{"version":3,"mappings":"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","names":["_createElementBlock","_createElementVNode","_toDisplayString","card","getTopicName","listeningQuizEnabled","_unref","_openBlock","listeningAnswer","listeningAnswered","listeningCorrect","_Fragment","_renderList","listeningQuizOptions","listeningQuizAnswered","_createVNode"],"ignoreList":[],"sources":["../../src/views/practice/components/ListeningMode.vue"],"sourcesContent":["<template>\n  <div\n    class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-800 p-6 sm:p-8 h-auto sm:h-96 select-none\"\n    @copy.prevent\n    @cut.prevent\n    @contextmenu.prevent\n  >\n    <div class=\"text-center h-full flex flex-col justify-center\">\n      <div class=\"mb-6\">\n        <span class=\"px-3 py-1 bg-blue-100 dark:bg-gray-800 text-blue-800 dark:text-blue-300 text-xs sm:text-sm md:text-base font-medium rounded-full\">\n          {{ card?.category ? getTopicName(card.category) : '' }}\n        </span>\n      </div>\n      <div class=\"mb-8\">\n        <button\n          @click=\"emit('play-audio')\"\n          class=\"bg-blue-500 hover:bg-blue-600 text-white p-6 rounded-full transition-colors\"\n        >\n          <svg class=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.816L4.846 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.846l3.537-3.816a1 1 0 011.617.816zM16 8a2 2 0 11-4 0 2 2 0 014 0zm-2 6a4 4 0 100-8 4 4 0 000 8z\" clip-rule=\"evenodd\"/>\n          </svg>\n        </button>\n      </div>\n      <p v-if=\"!listeningQuizEnabled\" class=\"text-base sm:text-lg md:text-xl text-gray-600 dark:text-gray-300 mb-8\">{{ t('flashcard.listening.instruction', 'Listen and type the word you hear:') }}</p>\n      <p v-else class=\"text-base sm:text-lg md:text-xl text-gray-600 dark:text-gray-300 mb-8\">{{ t('flashcard.listening.instructionQuiz', 'Choose the word you hear:') }}</p>\n\n      <div v-if=\"!listeningQuizEnabled\" class=\"max-w-md mx-auto\">\n        <input\n          ref=\"listeningInput\"\n          :value=\"listeningAnswer\"\n          @input=\"onInput\"\n          @keyup.enter=\"handleCheckAnswer\"\n          type=\"text\"\n          :disabled=\"listeningAnswered\"\n          class=\"w-full p-4 text-center text-lg sm:text-xl md:text-2xl border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 select-text\"\n          :placeholder=\"t('flashcard.listening.placeholder', 'Type the word you hear...')\"\n          inputmode=\"text\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          spellcheck=\"false\"\n          @blur=\"onListeningBlur\"\n        />\n        <div v-if=\"listeningAnswered\" class=\"mt-4\">\n          <p v-if=\"listeningCorrect\" class=\"text-green-600 dark:text-green-400 font-medium\">{{ t('flashcard.listening.correct', '✓ Correct!') }}</p>\n          <p v-else class=\"text-red-600 dark:text-red-400 font-medium\">{{ t('flashcard.listening.incorrect', '✗ Correct answer:') }} {{ card?.word }}</p>\n          <p class=\"text-sm text-gray-500 dark:text-gray-400 mt-2\">{{ card?.meaning }}</p>\n        </div>\n      </div>\n      <div v-else class=\"w-full px-2 sm:px-3 md:px-0\">\n        <div class=\"grid grid-cols-1 grid-2-cols-480 sm:grid-cols-2 gap-1.5 sm:gap-3 justify-items-stretch w-full max-w-none\">\n          <button\n            v-for=\"(opt, idx) in listeningQuizOptions\"\n            :key=\"idx\"\n            @click=\"onSelectListeningOption(opt)\"\n            :disabled=\"listeningQuizAnswered\"\n            translate=\"no\"\n            class=\"notranslate px-3 py-1.5 sm:py-2 rounded-md border text-[13px] sm:text-sm transition-all duration-150 disabled:opacity-70 disabled:cursor-not-allowed text-left flex items-center gap-2 w-full min-w-0\"\n            :class=\"[\n              listeningQuizAnswered\n                ? (isOptionCorrect(opt)\n                    ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300 border-green-300 dark:border-green-700'\n                    : isOptionSelected(opt)\n                      ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300 border-red-300 dark:border-red-700'\n                      : 'bg-white dark:bg-gray-custom text-gray-900 dark:text-white border-gray-300 dark:border-gray-custom/60')\n                : 'bg-white dark:bg-gray-custom text-gray-900 dark:text-white border-gray-300 dark:border-gray-custom/60 hover:shadow-sm hover:scale-[1.01] dark:hover:bg-white/5'\n            ]\"\n          >\n            <span class=\"inline-flex items-center justify-center w-5 h-5 rounded-full text-xs font-semibold bg-gray-200 text-gray-700 dark:bg-white/10 dark:text-white/80 shrink-0\">\n              {{ String.fromCharCode(65 + idx) }}\n            </span>\n            <span class=\"truncate overflow-hidden min-w-0\">{{ opt }}</span>\n          </button>\n        </div>\n        <div v-if=\"listeningAnswered\" class=\"mt-4 text-center\">\n          <p v-if=\"listeningCorrect\" class=\"text-green-600 dark:text-green-400 font-medium\">{{ t('flashcard.listening.correct', '✓ Correct!') }}</p>\n          <p v-else class=\"text-red-600 dark:text-red-400 font-medium\">{{ t('flashcard.listening.incorrect', '✗ Correct answer:') }} {{ card?.word }}</p>\n          <p class=\"text-sm text-gray-500 dark:text-gray-400 mt-2\">{{ card?.meaning }}</p>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Firework Sound Effect -->\n    <FireworkSoundEffect \n      ref=\"fireworkEffect\"\n      :trigger-firework=\"triggerFirework\"\n      :trigger-sound=\"triggerSound\"\n      :is-correct=\"isCorrectAnswer\"\n      @effect-complete=\"resetTriggers\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, defineAsyncComponent, onMounted, nextTick } from 'vue'\nimport { useI18n } from 'vue-i18n';\nimport type { Vocabulary } from '../../../composables/useVocabularyStore';\n\n// Import component using defineAsyncComponent to avoid \"has no default export\" error\nconst FireworkSoundEffect = defineAsyncComponent(() => import('./FireworkSoundEffect.vue'))\n\n// Effect triggers\nconst triggerFirework = ref(false)\nconst triggerSound = ref(false)\nconst isCorrectAnswer = ref(false)\nconst fireworkEffect = ref()\n\nconst props = defineProps<{\n  card: Vocabulary | null;\n  listeningAnswer: string;\n  listeningAnswered: boolean;\n  listeningCorrect: boolean;\n  listeningQuizEnabled: boolean;\n  listeningQuizOptions: string[];\n  listeningQuizSelected: string;\n  listeningQuizAnswered: boolean;\n  getTopicName: (topic: string) => string;\n}>();\n\nconst emit = defineEmits(['update:listeningAnswer', 'check-answer', 'play-audio', 'select-listening-quiz-answer']);\n\n// Remove Vietnamese diacritics so input is saved without accents\n// Special-case: map all forms of 'ư' to 'w' so Unikey 'w' is preserved\nconst stripDiacritics = (s: string) => s\n  .replace(/[ưừứửữự]/g, 'w')\n  .replace(/[ƯỪỨỬỮỰ]/g, 'W')\n  .normalize('NFD')\n  .replace(/[\\u0300-\\u036f]/g, '')\n  .replace(/đ/g, 'd')\n  .replace(/Đ/g, 'D')\n\n// ---------------- Auto-focus listening input (variant OFF) ----------------\nconst listeningInput = ref<HTMLInputElement | null>(null)\n\nconst focusListeningInput = async () => {\n  await nextTick()\n  try {\n    listeningInput.value?.focus({ preventScroll: true })\n  } catch {\n    listeningInput.value?.focus()\n  }\n}\n\nconst ensureListeningFocus = () => {\n  if (!props.listeningQuizEnabled && !props.listeningAnswered) {\n    if (document.activeElement !== listeningInput.value) {\n      focusListeningInput()\n    }\n  }\n}\n\nconst onListeningBlur = () => {\n  ensureListeningFocus()\n}\n\nconst onInput = (event: Event) => {\n  const el = event.target as HTMLInputElement\n  const sanitized = stripDiacritics(el.value)\n  if (sanitized !== el.value) {\n    el.value = sanitized\n  }\n  emit('update:listeningAnswer', sanitized)\n}\n\nonMounted(() => {\n  ensureListeningFocus()\n})\n\n// Handle check answer with effects\nconst handleCheckAnswer = () => {\n  if (props.listeningAnswered) return\n  \n  // Emit the check answer first\n  emit('check-answer')\n  \n  // Wait a bit for the answer to be processed, then trigger effects\n  setTimeout(() => {\n    // Use the listeningCorrect prop from parent\n    isCorrectAnswer.value = props.listeningCorrect\n    \n    // Trigger effects\n    triggerFirework.value = true\n    triggerSound.value = true\n  }, 100)\n}\n\n// Reset effect triggers\nconst resetTriggers = () => {\n  triggerFirework.value = false\n  triggerSound.value = false\n}\n\n// Watch for listeningAnswered changes to trigger effects after parent updates\nwatch(() => props.listeningAnswered, (newValue) => {\n  if (newValue && !triggerFirework.value) {\n    // Answer was just processed, trigger effects\n    isCorrectAnswer.value = props.listeningCorrect\n    \n    setTimeout(() => {\n      triggerFirework.value = true\n      triggerSound.value = true\n    }, 50)\n  }\n})\n\n// Refocus when answer resets, card changes, or toggling back to typing\nwatch(() => props.listeningAnswered, (answered) => {\n  if (!answered) ensureListeningFocus()\n})\nwatch(() => props.card, () => {\n  ensureListeningFocus()\n})\nwatch(() => props.listeningQuizEnabled, (val) => {\n  if (!val) ensureListeningFocus()\n})\n\nconst { t } = useI18n();\n\n// Helpers for options UI\nconst onSelectListeningOption = (opt: string) => {\n  if (!props.listeningQuizAnswered) {\n    emit('select-listening-quiz-answer', opt)\n  }\n}\nconst isOptionSelected = (opt: string) => props.listeningQuizSelected === opt\nconst isOptionCorrect = (opt: string) => props.card ? opt.trim().toLowerCase() === props.card.word.trim().toLowerCase() : false\n</script>\n\n<style scoped>\n@media (min-width: 480px) {\n  .grid-2-cols-480 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n</style>"],"file":"assets/ListeningMode-CTgmRuMk.js"}