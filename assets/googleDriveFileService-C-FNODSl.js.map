{"version":3,"file":"googleDriveFileService-C-FNODSl.js","sources":["../../src/services/googleDriveFileService.ts"],"sourcesContent":["import { googleDriveAuth } from './googleDriveAuth';\n\n// Declare gapi types\ndeclare const gapi: any;\n\nexport interface DriveFile {\n  id: string;\n  name: string;\n  size: string;\n  modifiedTime: string;\n  mimeType: string;\n}\n\n/**\n * Google Drive File Service\n * Handles file operations with Google Drive API\n */\nexport class GoogleDriveFileService {\n  private static instance: GoogleDriveFileService;\n\n  private constructor() {}\n\n  public static getInstance(): GoogleDriveFileService {\n    if (!GoogleDriveFileService.instance) {\n      GoogleDriveFileService.instance = new GoogleDriveFileService();\n    }\n    return GoogleDriveFileService.instance;\n  }\n\n  /**\n   * List JSON files from Google Drive\n   */\n  async listJSONFiles(): Promise<DriveFile[]> {\n    try {\n      if (!googleDriveAuth.isSignedIn()) {\n        throw new Error('Not signed in to Google Drive');\n      }\n\n      console.log('üìÅ Fetching JSON files from Google Drive...');\n\n      const response = await gapi.client.drive.files.list({\n        q: \"mimeType='application/json' or name contains '.json'\",\n        fields: 'files(id,name,size,modifiedTime,mimeType)',\n        orderBy: 'modifiedTime desc',\n        pageSize: 50\n      });\n\n      const files = response.result.files || [];\n      \n      console.log(`üìã Found ${files.length} JSON files`);\n\n      return files.map((file: any) => ({\n        id: file.id!,\n        name: file.name!,\n        size: this.formatFileSize(parseInt(file.size || '0')),\n        modifiedTime: this.formatDate(file.modifiedTime!),\n        mimeType: file.mimeType!\n      }));\n\n    } catch (error) {\n      console.error('‚ùå Error listing Google Drive files:', error);\n      throw new Error('Failed to fetch files from Google Drive');\n    }\n  }\n\n  /**\n   * Download file content from Google Drive\n   */\n  async downloadFile(fileId: string): Promise<string> {\n    try {\n      if (!googleDriveAuth.isSignedIn()) {\n        throw new Error('Not signed in to Google Drive');\n      }\n\n      console.log(`üì• Downloading file from Google Drive: ${fileId}`);\n\n      const response = await gapi.client.drive.files.get({\n        fileId: fileId,\n        alt: 'media'\n      });\n\n      console.log('‚úÖ File downloaded successfully');\n      return response.body;\n\n    } catch (error) {\n      console.error('‚ùå Error downloading file:', error);\n      throw new Error('Failed to download file from Google Drive');\n    }\n  }\n\n  /**\n   * Get file metadata from Google Drive\n   */\n  async getFileMetadata(fileId: string): Promise<any> {\n    try {\n      if (!googleDriveAuth.isSignedIn()) {\n        throw new Error('Not signed in to Google Drive');\n      }\n\n      const response = await gapi.client.drive.files.get({\n        fileId: fileId,\n        fields: 'id,name,size,modifiedTime,mimeType'\n      });\n\n      return response.result;\n\n    } catch (error) {\n      console.error('‚ùå Error getting file metadata:', error);\n      throw new Error('Failed to get file metadata');\n    }\n  }\n\n  /**\n   * Format file size in human readable format\n   */\n  private formatFileSize(bytes: number): string {\n    if (bytes === 0) return '0 B';\n    \n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;\n  }\n\n  /**\n   * Format date in readable format\n   */\n  private formatDate(dateString: string): string {\n    try {\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffTime = now.getTime() - date.getTime();\n      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n      \n      if (diffDays === 0) {\n        return 'Today';\n      } else if (diffDays === 1) {\n        return 'Yesterday';\n      } else if (diffDays < 7) {\n        return `${diffDays} days ago`;\n      } else {\n        return date.toLocaleDateString('en-US', { \n          year: 'numeric', \n          month: 'short', \n          day: 'numeric' \n        });\n      }\n    } catch (error) {\n      return dateString;\n    }\n  }\n}\n\n// Export singleton instance\nexport const googleDriveFileService = GoogleDriveFileService.getInstance();\n"],"names":[],"mappings":"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"}