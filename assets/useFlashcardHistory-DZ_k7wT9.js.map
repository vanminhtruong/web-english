{"version":3,"file":"useFlashcardHistory-DZ_k7wT9.js","sources":["../../src/views/practice/composables/useFlashcardHistory.ts"],"sourcesContent":["import { ref, onMounted } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport type { GameStats } from './useFlashcardStats'\r\n\r\nexport interface PracticeHistoryItem {\r\n  id: string\r\n  date: string\r\n  mode: string\r\n  totalCards: number\r\n  correctAnswers: number\r\n  incorrectAnswers: number\r\n  accuracy: number\r\n  duration: number\r\n  score: number\r\n  categories?: string[]\r\n  // Whether this session has detailed per-card logs stored\r\n  hasDetails?: boolean\r\n}\r\n\r\nexport function useFlashcardHistory() {\r\n  const showHistory = ref(false)\r\n  const practiceHistory = ref<PracticeHistoryItem[]>([])\r\n  const { t, locale } = useI18n()\r\n\r\n  // Load practice history from localStorage\r\n  const loadPracticeHistory = () => {\r\n    const saved = localStorage.getItem('flashcard-practice-history')\r\n    if (saved) {\r\n      const parsed: PracticeHistoryItem[] = JSON.parse(saved)\r\n      // Backfill hasDetails for older sessions by checking stored details key\r\n      practiceHistory.value = parsed.map((item) => {\r\n        if (item.hasDetails === undefined) {\r\n          const has = !!localStorage.getItem(`flashcard-session-details:${item.id}`)\r\n          return { ...item, hasDetails: has }\r\n        }\r\n        return item\r\n      })\r\n      // Persist backfilled flags so future loads are consistent\r\n      savePracticeHistory()\r\n    }\r\n  }\r\n\r\n  // Save practice history to localStorage\r\n  const savePracticeHistory = () => {\r\n    localStorage.setItem('flashcard-practice-history', JSON.stringify(practiceHistory.value))\r\n  }\r\n\r\n  // Save current session to history and return the session id\r\n  const saveSessionToHistory = (stats: GameStats, totalCards: number, sessionId?: string): string => {\r\n    const duration = stats.endTime && stats.startTime \r\n      ? Math.round((stats.endTime.getTime() - stats.startTime.getTime()) / 1000)\r\n      : 0\r\n    \r\n    const total = stats.correct + stats.incorrect\r\n    const accuracy = total > 0 ? Math.round((stats.correct / total) * 100) : 0\r\n    const score = Math.round(accuracy * (totalCards / 100))\r\n\r\n    const id = sessionId || Date.now().toString()\r\n\r\n    const historyItem: PracticeHistoryItem = {\r\n      id,\r\n      date: new Date().toISOString(),\r\n      mode: stats.mode,\r\n      totalCards,\r\n      correctAnswers: stats.correct,\r\n      incorrectAnswers: stats.incorrect,\r\n      accuracy,\r\n      duration,\r\n      score,\r\n      categories: stats.categories || [],\r\n      hasDetails: true,\r\n    }\r\n\r\n    practiceHistory.value.unshift(historyItem)\r\n    \r\n    // Keep only last 50 sessions\r\n    if (practiceHistory.value.length > 50) {\r\n      practiceHistory.value = practiceHistory.value.slice(0, 50)\r\n    }\r\n    \r\n    savePracticeHistory()\r\n    return id\r\n  }\r\n\r\n  // Helper functions for history display\r\n  const getModeColor = (mode: string) => {\r\n    switch (mode) {\r\n      case 'flashcard':\r\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'\r\n      case 'quiz':\r\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\r\n      case 'typing':\r\n        return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'\r\n      case 'listening':\r\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'\r\n      case 'image':\r\n        return 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200'\r\n      case 'pictionary':\r\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\r\n      case 'pronunciation':\r\n        return 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200'\r\n      case 'bubble-shooter':\r\n        return 'bg-teal-100 text-teal-800 dark:bg-teal-900 dark:text-teal-200'\r\n      case 'snake-game':\r\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\r\n      default:\r\n        // Avoid gray in dark mode per UI rules\r\n        return 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200'\r\n    }\r\n  }\r\n\r\n  const getModeText = (mode: string) => {\r\n    switch (mode) {\r\n      case 'flashcard':\r\n        return t('flashcard.modes.flashcard', 'Flashcard')\r\n      case 'quiz':\r\n        return t('flashcard.modes.quiz', 'Quiz')\r\n      case 'typing':\r\n        return t('flashcard.modes.typing', 'Typing')\r\n      case 'listening':\r\n        return t('flashcard.modes.listening', 'Listening')\r\n      case 'image':\r\n        return t('flashcard.modes.image', 'Image')\r\n      case 'pictionary':\r\n        return t('flashcard.modes.pictionary', 'Pictionary')\r\n      case 'pronunciation':\r\n        return t('flashcard.modes.pronunciation', 'Pronunciation')\r\n      case 'bubble-shooter':\r\n        return t('flashcard.modes.bubbleShooter', 'Bubble Shooter')\r\n      case 'snake-game':\r\n        return t('flashcard.modes.snakeGame', 'Snake Hunt')\r\n      default:\r\n        return 'Unknown'\r\n    }\r\n  }\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString)\r\n    const now = new Date()\r\n    const diffTime = now.getTime() - date.getTime()\r\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\r\n    \r\n    // Use the browser's locale based on the current i18n locale\r\n    const currentLocale = locale.value === 'en' ? 'en-US' : 'vi-VN'\r\n    \r\n    if (diffDays === 0) {\r\n      return locale.value === 'en' ? 'Today' : 'Hôm nay'\r\n    } else if (diffDays === 1) {\r\n      return locale.value === 'en' ? 'Yesterday' : 'Hôm qua'\r\n    } else if (diffDays < 7) {\r\n      return locale.value === 'en' \r\n        ? `${diffDays} days ago` \r\n        : `${diffDays} ngày trước`\r\n    } else {\r\n      return date.toLocaleDateString(currentLocale)\r\n    }\r\n  }\r\n\r\n  const formatDuration = (seconds: number) => {\r\n    const minutes = Math.floor(seconds / 60)\r\n    const remainingSeconds = seconds % 60\r\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\r\n  }\r\n\r\n  // Clear history\r\n  const clearHistory = () => {\r\n    practiceHistory.value = []\r\n    savePracticeHistory()\r\n    // Also clear session details from localStorage\r\n    Object.keys(localStorage).forEach(key => {\r\n      if (key.startsWith('flashcard-session-details:')) {\r\n        localStorage.removeItem(key)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Delete a specific session\r\n  const deleteSession = (sessionId: string) => {\r\n    practiceHistory.value = practiceHistory.value.filter(item => item.id !== sessionId)\r\n    savePracticeHistory()\r\n    // Also remove session details from localStorage\r\n    localStorage.removeItem(`flashcard-session-details:${sessionId}`)\r\n  }\r\n\r\n  // Get statistics from history\r\n  const getHistoryStats = () => {\r\n    if (practiceHistory.value.length === 0) {\r\n      return {\r\n        totalSessions: 0,\r\n        averageAccuracy: 0,\r\n        totalCards: 0,\r\n        totalTime: 0,\r\n        bestScore: 0,\r\n        favoriteMode: ''\r\n      }\r\n    }\r\n\r\n    const totalSessions = practiceHistory.value.length\r\n    const totalCards = practiceHistory.value.reduce((sum, item) => sum + item.totalCards, 0)\r\n    const totalTime = practiceHistory.value.reduce((sum, item) => sum + item.duration, 0)\r\n    const averageAccuracy = Math.round(\r\n      practiceHistory.value.reduce((sum, item) => sum + item.accuracy, 0) / totalSessions\r\n    )\r\n    const bestScore = Math.max(...practiceHistory.value.map(item => item.score))\r\n    \r\n    // Find most used mode\r\n    const modeCount = practiceHistory.value.reduce((acc, item) => {\r\n      acc[item.mode] = (acc[item.mode] || 0) + 1\r\n      return acc\r\n    }, {} as Record<string, number>)\r\n    \r\n    const favoriteMode = Object.entries(modeCount)\r\n      .sort(([, a], [, b]) => b - a)[0]?.[0] || ''\r\n\r\n    return {\r\n      totalSessions,\r\n      averageAccuracy,\r\n      totalCards,\r\n      totalTime,\r\n      bestScore,\r\n      favoriteMode\r\n    }\r\n  }\r\n\r\n  onMounted(() => {\r\n    loadPracticeHistory()\r\n  })\r\n\r\n  return {\r\n    showHistory,\r\n    practiceHistory,\r\n    saveSessionToHistory,\r\n    getModeColor,\r\n    getModeText,\r\n    formatDate,\r\n    formatDuration,\r\n    clearHistory,\r\n    deleteSession,\r\n    getHistoryStats\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}