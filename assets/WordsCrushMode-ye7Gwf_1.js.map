{"version":3,"file":"WordsCrushMode-ye7Gwf_1.js","sources":["../../src/views/practice/components/WordsCrushMode.vue"],"sourcesContent":["<template>\n  <div class=\"text-center w-full h-full flex flex-col justify-center items-center gap-1 sm:gap-2 p-2 sm:p-3 md:p-4 xl:p-3 2xl:p-4 overflow-hidden\"\n    @copy.prevent\n    @cut.prevent\n    @contextmenu.prevent\n  >\n      <!-- Topic Badge -->\n      <div class=\"mb-1\">\n        <span class=\"px-2 py-1 bg-purple-100 dark:bg-dark-bg-mute text-purple-800 dark:text-purple-300 text-xs font-medium rounded-full\">\n          {{ card?.category ? getTopicName(card.category) : '' }}\n        </span>\n      </div>\n\n      <!-- Title -->\n      <h2 class=\"text-lg sm:text-xl md:text-2xl xl:text-xl 2xl:text-2xl font-bold text-purple-900 dark:text-purple-300 mb-1 px-1 text-center\">\n        {{ t('flashcard.pronunciation.wordsCrush.title', 'Words Crush: Anagram Challenge') }}\n      </h2>\n      \n      <!-- Instructions -->\n      <p class=\"text-xs sm:text-sm xl:text-sm 2xl:text-sm text-gray-600 dark:text-white/70 mb-1 max-w-sm px-1 text-center\">\n        {{ t('flashcard.pronunciation.wordsCrush.instruction', 'Fill in the missing letters to complete the word') }}\n      </p>\n\n      <!-- Pronunciation & Meaning Hint -->\n      <div class=\"text-center mb-2\">\n        <p class=\"text-sm sm:text-base md:text-lg xl:text-base 2xl:text-lg text-gray-500 dark:text-white/70 break-words px-1\">{{ card?.pronunciation }}</p>\n        <p class=\"text-xs sm:text-sm text-gray-400 dark:text-white/60 mt-1\">{{ card?.meaning }}</p>\n      </div>\n\n      <!-- Hidden Word Display -->\n      <div class=\"flex flex-wrap justify-center gap-1 sm:gap-1.5 mb-2 px-2 max-w-full\">\n        <div\n          v-for=\"(slot, index) in wordSlots\"\n          :key=\"index\"\n          class=\"relative\"\n        >\n          <!-- Letter Slot -->\n          <div\n            v-if=\"!slot.separator\"\n            class=\"w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 xl:w-10 xl:h-10 2xl:w-11 2xl:h-11 border-2 border-purple-300 dark:border-purple-600 rounded-lg flex items-center justify-center text-sm sm:text-lg md:text-xl xl:text-lg 2xl:text-xl font-bold transition-all duration-200\"\n            :class=\"{\n              'border-green-500 bg-green-50 dark:bg-green-900/20': slot.correct,\n              'border-red-500 bg-red-50 dark:bg-red-900/20': slot.incorrect,\n              'bg-white dark:bg-dark-bg': !slot.correct && !slot.incorrect && !slot.filled,\n              'bg-purple-50 dark:bg-purple-900/20 border-purple-500': slot.filled,\n              'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-400': slot.revealed && !gameCompleted\n            }\"\n          >\n            <!-- Input Field -->\n            <input\n              v-if=\"!slot.filled && !slot.revealed\"\n              v-model=\"slot.userInput\"\n              @input=\"handleLetterInput(index, $event)\"\n              @keydown=\"handleKeyDown(index, $event)\"\n              type=\"text\"\n              maxlength=\"1\"\n              class=\"w-full h-full bg-transparent text-center text-sm sm:text-lg md:text-xl xl:text-lg 2xl:text-xl font-bold uppercase border-none outline-none text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500\"\n              ref=\"letterInput\"\n              placeholder=\"?\"\n            />\n            <!-- Filled Letter -->\n            <span v-else-if=\"slot.filled\" class=\"uppercase text-purple-700 dark:text-purple-300\">{{ slot.char }}</span>\n            <!-- Revealed Letter -->\n            <span v-else class=\"uppercase text-yellow-600 dark:text-yellow-400\">{{ slot.char }}</span>\n          </div>\n          <!-- Space Separator -->\n          <div v-else class=\"w-2 sm:w-3\"></div>\n        </div>\n      </div>\n\n      <!-- Audio Button -->\n      <div class=\"mb-0.5 xl:mb-0.5 2xl:mb-1\">\n        <button\n          @click=\"playPronunciation\"\n          class=\"px-2 py-0.5 md:px-3 md:py-1 xl:px-3 xl:py-1 2xl:px-3 2xl:py-1 text-xs sm:text-sm xl:text-sm 2xl:text-sm bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 text-white rounded font-medium transition-colors flex items-center gap-1\"\n        >\n          <svg class=\"w-3 h-3 xl:w-3 xl:h-3 2xl:w-3 2xl:h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.773l-4.146-3.382a.5.5 0 00-.319-.118H2a1 1 0 01-1-1V8a1 1 0 011-1h1.918a.5.5 0 00.319-.118l4.146-3.382zM14 5a1 1 0 011 1v8a1 1 0 11-2 0V6a1 1 0 011-1zm2.025 1.13a1 1 0 011.414.057 7 7 0 010 9.816 1 1 0 11-1.471-1.358 5 5 0 000-7.1 1 1 0 01.057-1.415zM16.5 8.5a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1z\" clip-rule=\"evenodd\" />\n          </svg>\n          {{ t('flashcard.pronunciation.wordsCrush.playSound', 'Play Sound') }}\n        </button>\n      </div>\n\n      <!-- Action Buttons -->\n      <div class=\"flex flex-wrap justify-center gap-2 px-1 mb-2\">\n        <button\n          v-if=\"!gameCompleted\"\n          @click=\"checkAnswer\"\n          :disabled=\"!canCheckAnswer\"\n          class=\"px-3 py-1.5 text-sm bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg\"\n        >\n          {{ t('flashcard.pronunciation.wordsCrush.checkAnswer', 'Check Answer') }}\n        </button>\n\n        <button\n          v-if=\"!gameCompleted && hintsUsed < maxHints\"\n          @click=\"revealHint\"\n          class=\"px-3 py-1.5 text-sm bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-white rounded-lg font-medium transition-all duration-200 shadow-lg\"\n        >\n          {{ t('flashcard.pronunciation.wordsCrush.hint', 'Hint') }} ({{ hintsUsed }}/{{ maxHints }})\n        </button>\n\n        <button\n          @click=\"resetGame\"\n          class=\"px-3 py-1.5 text-sm bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white rounded-lg font-medium transition-all duration-200 shadow-lg\"\n        >\n          {{ t('flashcard.pronunciation.wordsCrush.reset', 'Reset') }}\n        </button>\n      </div>\n\n      <!-- Result Message -->\n      <div v-if=\"gameCompleted\" class=\"px-1 text-center mt-0.5 xl:mt-0 2xl:mt-0.5 bg-gray-50 dark:bg-dark-bg-soft rounded py-1 xl:py-0.5 2xl:py-1\">\n        <p v-if=\"isCorrect\" class=\"text-sm sm:text-base xl:text-base 2xl:text-lg font-bold text-green-600 dark:text-green-400 mb-0.5 xl:mb-0.5 2xl:mb-1\">\n          {{ t('flashcard.pronunciation.wordsCrush.correct', ' Correct!') }}\n        </p>\n        <p v-else class=\"text-sm sm:text-base xl:text-base 2xl:text-lg font-bold text-red-600 dark:text-red-400 mb-0.5 xl:mb-0.5 2xl:mb-1\">\n          {{ t('flashcard.pronunciation.wordsCrush.tryAgain', 'Try Again!') }}\n        </p>\n        <div class=\"space-y-0.5 xl:space-y-0 2xl:space-y-0.5 border-t border-gray-200 dark:border-dark-bg-mute pt-0.5 xl:pt-0 2xl:pt-0.5\">\n          <p class=\"text-sm xl:text-sm 2xl:text-base text-gray-700 dark:text-white/80\">\n            <span class=\"font-semibold\">{{ t('flashcard.pronunciation.wordsCrush.correctWord', 'Word') }}:</span> \n            <span class=\"font-bold text-blue-600 dark:text-blue-400\">{{ card?.word }}</span>\n          </p>\n          <p class=\"text-sm xl:text-sm 2xl:text-base text-gray-700 dark:text-white/80\">\n            <span class=\"font-semibold\">{{ t('flashcard.pronunciation.wordsCrush.meaning', 'Meaning') }}:</span> \n            <span class=\"font-medium text-gray-900 dark:text-white\">{{ card?.meaning }}</span>\n          </p>\n        </div>\n      </div>\n    \n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, onMounted, nextTick, computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\ninterface Card {\n  id: number\n  word: string\n  meaning: string\n  pronunciation: string\n  category?: string\n}\n\ninterface WordSlot {\n  char: string\n  separator: boolean\n  filled: boolean\n  userInput: string\n  correct: boolean\n  incorrect: boolean\n  revealed: boolean\n}\n\nconst props = defineProps<{\n  card: Card | null\n  getTopicName: (category: string) => string\n}>()\n\nconst emit = defineEmits<{\n  'game-completed': [isCorrect: boolean]\n  'play-audio': [audioType: string, text: string]\n}>()\n\nconst { t } = useI18n()\n\n// Game state\nconst wordSlots = ref<WordSlot[]>([])\nconst gameCompleted = ref(false)\nconst isCorrect = ref(false)\nconst hintsUsed = ref(0)\nconst maxHints = 2\nconst letterInputs = ref<HTMLInputElement[]>([])\n\n// Create word slots from card word\nconst createWordSlots = () => {\n  if (!props.card?.word) return []\n  \n  const word = props.card.word.toLowerCase()\n  const slots: WordSlot[] = []\n  \n  for (let i = 0; i < word.length; i++) {\n    const char = word[i]\n    if (char === ' ') {\n      slots.push({\n        char: ' ',\n        separator: true,\n        filled: false,\n        userInput: '',\n        correct: false,\n        incorrect: false,\n        revealed: false\n      })\n    } else {\n      slots.push({\n        char: char,\n        separator: false,\n        filled: false,\n        userInput: '',\n        correct: false,\n        incorrect: false,\n        revealed: false\n      })\n    }\n  }\n  \n  // Get all letter slots (not separators)\n  const letterSlots = slots.filter(slot => !slot.separator)\n  const hideCount = Math.ceil(letterSlots.length * 0.5)\n  \n  // Randomly select which letters to hide\n  const indicesToHide: number[] = []\n  while (indicesToHide.length < hideCount) {\n    const randomIndex = Math.floor(Math.random() * letterSlots.length)\n    const actualIndex = slots.findIndex(slot => slot === letterSlots[randomIndex])\n    if (!indicesToHide.includes(actualIndex)) {\n      indicesToHide.push(actualIndex)\n    }\n  }\n  \n  // Get letters that will be shown (not hidden)\n  const shownLetterIndices: number[] = []\n  slots.forEach((slot, index) => {\n    if (!slot.separator && !indicesToHide.includes(index)) {\n      shownLetterIndices.push(index)\n    }\n  })\n  \n  // Create a shuffled array of the letters that will be shown\n  const shownLetters: string[] = shownLetterIndices.map(index => slots[index].char)\n  const shuffledLetters: string[] = [...shownLetters].sort(() => Math.random() - 0.5)\n  \n  // Assign shuffled letters to shown positions\n  let shuffleIndex = 0\n  slots.forEach((slot, index) => {\n    if (!slot.separator) {\n      if (indicesToHide.includes(index)) {\n        // Keep empty for user input\n      } else {\n        slot.filled = true\n        slot.userInput = shuffledLetters[shuffleIndex]\n        shuffleIndex++\n      }\n    }\n  })\n  \n  return slots\n}\n\n// Computed properties\nconst canCheckAnswer = computed(() => {\n  return wordSlots.value.filter(slot => !slot.separator && !slot.filled).every(slot => slot.userInput.trim() !== '')\n})\n\n// Initialize game\nconst initializeGame = () => {\n  if (!props.card?.word) return\n  \n  wordSlots.value = createWordSlots()\n  gameCompleted.value = false\n  isCorrect.value = false\n  hintsUsed.value = 0\n  letterInputs.value = []\n}\n\n// Input handling\nconst handleLetterInput = (index: number, event: Event) => {\n  const target = event.target as HTMLInputElement\n  const value = target.value.toLowerCase()\n  \n  if (value && /^[a-zA-Z]$/.test(value)) {\n    wordSlots.value[index].userInput = value\n    // Move to next empty input\n    const nextEmptyIndex = wordSlots.value.findIndex((slot, i) => \n      i > index && !slot.separator && !slot.filled && slot.userInput === ''\n    )\n    if (nextEmptyIndex !== -1 && letterInputs.value[nextEmptyIndex]) {\n      nextTick(() => {\n        letterInputs.value[nextEmptyIndex].focus()\n      })\n    }\n  } else if (value === '') {\n    wordSlots.value[index].userInput = ''\n  } else {\n    // Invalid input, clear and stay\n    target.value = ''\n    wordSlots.value[index].userInput = ''\n  }\n}\n\nconst handleKeyDown = (index: number, event: KeyboardEvent) => {\n  if (event.key === 'Backspace' && wordSlots.value[index].userInput === '') {\n    // Move to previous empty input\n    const prevEmptyIndex = wordSlots.value.findIndex((slot, i) => \n      i < index && !slot.separator && !slot.filled\n    )\n    if (prevEmptyIndex !== -1) {\n      const reversedIndex = [...wordSlots.value]\n        .reverse()\n        .findIndex((slot, i) => {\n          const originalIndex = wordSlots.value.length - 1 - i\n          return originalIndex < index && !slot.separator && !slot.filled\n        })\n      if (reversedIndex !== -1) {\n        const actualIndex = wordSlots.value.length - 1 - reversedIndex\n        if (letterInputs.value[actualIndex]) {\n          nextTick(() => {\n            letterInputs.value[actualIndex].focus()\n          })\n        }\n      }\n    }\n  } else if (event.key === 'Enter') {\n    checkAnswer()\n  }\n}\n\n// Game actions\nconst checkAnswer = () => {\n  if (!canCheckAnswer.value) return\n  \n  let allCorrect = true\n  \n  wordSlots.value.forEach(slot => {\n    if (!slot.separator && !slot.filled) {\n      const isLetterCorrect = slot.userInput.toLowerCase() === slot.char.toLowerCase()\n      slot.correct = isLetterCorrect\n      slot.incorrect = !isLetterCorrect\n      if (!isLetterCorrect) allCorrect = false\n    }\n  })\n  \n  gameCompleted.value = true\n  isCorrect.value = allCorrect\n  \n  emit('game-completed', allCorrect)\n}\n\nconst revealHint = () => {\n  if (hintsUsed.value >= maxHints) return\n  \n  const emptySlots = wordSlots.value.filter(slot => !slot.separator && !slot.filled && slot.userInput === '')\n  if (emptySlots.length === 0) return\n  \n  const randomSlot = emptySlots[Math.floor(Math.random() * emptySlots.length)]\n  randomSlot.revealed = true\n  randomSlot.userInput = randomSlot.char\n  hintsUsed.value++\n}\n\nconst resetGame = () => {\n  initializeGame()\n}\n\nconst playPronunciation = () => {\n  if (props.card?.word) {\n    emit('play-audio', 'vocabulary', props.card.word)\n  }\n}\n\n// Initialize on mount and when card changes\nonMounted(() => {\n  initializeGame()\n})\n\nwatch(() => props.card, () => {\n  initializeGame()\n}, { deep: true })\n</script>\n\n<style scoped>\n/* Drag and drop visual effects */\n.cursor-grab:active {\n  cursor: grabbing;\n}\n\n/* Smooth transitions for drag elements */\n.transition-all {\n  transition: all 0.2s ease-in-out;\n}\n\n/* Purple theme customizations */\n.gradient-purple {\n  background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);\n}\n</style>\n"],"names":["_createElementBlock","_createElementVNode","_toDisplayString","card","getTopicName","_unref","_openBlock","_Fragment","_renderList","_vModelText","_createTextVNode"],"mappings":"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"}