{"version":3,"mappings":"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","names":["grammarId","newExercise","settings","_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_unref","_createTextVNode","_Fragment","_renderList","_normalizeClass","_createBlock","_resolveDynamicComponent","_normalizeStyle","_createVNode","_Transition","_vModelSelect","_vModelText","_vModelCheckbox"],"ignoreList":[],"sources":["../../src/views/grammar/GrammarPracticeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-[#0a0a0a] dark:to-[#0f0f0f] relative overflow-x-hidden\">\r\n    <!-- Animated Background Elements to match Dashboard style -->\r\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none z-0\">\r\n      <div class=\"floating-shapes\">\r\n        <div class=\"absolute top-16 left-8 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\r\n        <div class=\"absolute top-36 right-8 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\r\n        <div class=\"absolute -bottom-10 left-24 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\r\n      </div>\r\n    </div>\r\n    <!-- Header -->\r\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-3 sm:pt-6\">\r\n      <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] p-3 sm:p-4 md:p-5 lg:p-6\">\r\n        <div class=\"flex items-center justify-between\">\r\n          <div class=\"flex items-center space-x-4\">\r\n            <button\r\n              @click=\"goBackToGrammarDetail\"\r\n              class=\"p-2 rounded-lg text-gray-600 dark:text-white/70 hover:text-gray-800 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-[#0f0f0f] transition-colors\"\r\n            >\r\n              <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n              </svg>\r\n            </button>\r\n            <div>\r\n              <div class=\"flex items-center mb-1\">\r\n                <div class=\"animate-pulse-slow\">\r\n                  <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full mr-2.5\"></div>\r\n                </div>\r\n                <h1 class=\"text-xl sm:text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent\">\r\n                  {{ t('grammar.practice.title', 'Practice') }}\r\n                </h1>\r\n              </div>\r\n              <p class=\"text-sm text-gray-600 dark:text-white/70\">\r\n                {{ t('grammar.practice.subtitle', 'Choose a mode to practice grammar with interactive exercises') }}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Settings and Progress -->\r\n          <div class=\"flex items-center space-x-4\">\r\n            <div class=\"text-sm text-gray-600 dark:text-white/70\">\r\n              {{ t('grammar.practice.score', 'Score') }}: <span class=\"font-medium text-blue-600 dark:text-blue-400\">{{ totalScore }}</span>\r\n            </div>\r\n            \r\n            <!-- Exercise Management Button -->\r\n            <button\r\n              @click=\"showExerciseManager = true\"\r\n              class=\"p-2 rounded-lg text-gray-600 dark:text-white/70 hover:text-gray-800 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-[#0f0f0f] transition-colors\"\r\n              :title=\"t('grammar.practice.exerciseManager.title', 'Manage exercises')\"\r\n            >\r\n              <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\r\n              </svg>\r\n            </button>\r\n            \r\n            <!-- Settings Button -->\r\n            <button\r\n              @click=\"showSettings = true\"\r\n              class=\"p-2 rounded-lg text-gray-600 dark:text-white/70 hover:text-gray-800 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-[#0f0f0f] transition-colors\"\r\n              :title=\"t('grammar.practice.settings.title', 'Settings')\"\r\n            >\r\n              <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n      <!-- Exercise Type Selection -->\r\n      <div v-if=\"!selectedExercise\" class=\"space-y-6\">\r\n        <div class=\"text-center\">\r\n          <h2 class=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent mb-4\">\r\n            {{ t('grammar.practice.chooseExercise', 'Choose an exercise') }}\r\n          </h2>\r\n          <p class=\"text-gray-700 dark:text-white/70 mb-8\">\r\n            {{ t('grammar.practice.chooseDescription', 'Select a practice type below to get started') }}\r\n          </p>\r\n        </div>\r\n\r\n        <!-- Exercise Cards Grid -->\r\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <div\r\n            v-for=\"exercise in exerciseTypes\"\r\n            :key=\"exercise.type\"\r\n            @click=\"startExercise(exercise.type)\"\r\n            class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 dark:border-white/10 p-6 cursor-pointer hover:shadow-2xl hover:scale-[1.03] transition-all duration-300\"\r\n          >\r\n            <div class=\"text-center\">\r\n              <div class=\"w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center\" :class=\"exercise.colorClass\">\r\n                <component :is=\"exercise.icon\" class=\"w-8 h-8 text-white\" />\r\n              </div>\r\n              <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\r\n                {{ tf(`grammar.practice.exercises.${exercise.type}.title`, exercise.title) }}\r\n              </h3>\r\n              <p class=\"text-sm text-gray-600 dark:text-white/70 mb-4\">\r\n                {{ tf(`grammar.practice.exercises.${exercise.type}.description`, exercise.description) }}\r\n              </p>\r\n              <div class=\"flex items-center justify-center space-x-4 text-xs text-gray-500 dark:text-white/60\">\r\n                <span>{{ exercise.duration }}</span>\r\n                <span>•</span>\r\n                <span>{{ exercise.difficulty }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Exercise Content -->\r\n      <div v-else class=\"space-y-6\">\r\n        <!-- Exercise Header -->\r\n        <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-6\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <div class=\"flex items-center space-x-4\">\r\n              <button\r\n                @click=\"goBackToSelection\"\r\n                class=\"p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\r\n              >\r\n                <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n                </svg>\r\n              </button>\r\n              <div>\r\n                <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n                  {{ tf(`grammar.practice.exercises.${selectedExercise}.title`, 'Exercise') }}\r\n                </h2>\r\n                <p class=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  {{ t('grammar.practice.question', 'Question') }} {{ currentQuestionIndex + 1 }} / {{ totalQuestions }}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Progress Bar -->\r\n            <div class=\"flex items-center space-x-4\">\r\n              <div class=\"w-32 bg-gray-200 dark:bg-mute rounded-full h-2\">\r\n                <div \r\n                  class=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                  :style=\"{ width: `${(currentQuestionIndex / totalQuestions) * 100}%` }\"\r\n                ></div>\r\n              </div>\r\n              <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                {{ Math.round((currentQuestionIndex / totalQuestions) * 100) }}%\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Exercise Component -->\r\n        <component \r\n          :is=\"currentExerciseComponent\"\r\n          :question=\"currentQuestion\"\r\n          :question-index=\"currentQuestionIndex\"\r\n          :total-questions=\"totalQuestions\"\r\n          :difficulty=\"settings.difficulty\"\r\n          @answer=\"handleAnswer\"\r\n          @next=\"nextQuestion\"\r\n          @complete=\"completeExercise\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Settings Modal -->\r\n    <Transition\r\n      enter-active-class=\"transition-all duration-500 ease-out\"\r\n      enter-from-class=\"opacity-0\"\r\n      enter-to-class=\"opacity-100\"\r\n      leave-active-class=\"transition-all duration-300 ease-in\"\r\n      leave-from-class=\"opacity-100\"\r\n      leave-to-class=\"opacity-0\"\r\n    >\r\n      <div v-if=\"showSettings\" class=\"fixed inset-0 bg-black/50 dark:bg-black/60 flex items-center justify-center p-4 z-50 backdrop-blur-sm\">\r\n        <Transition\r\n          enter-active-class=\"transition-all duration-500 ease-out\"\r\n          enter-from-class=\"opacity-0 scale-90 translate-y-8 rotate-1\"\r\n          enter-to-class=\"opacity-100 scale-100 translate-y-0 rotate-0\"\r\n          leave-active-class=\"transition-all duration-300 ease-in\"\r\n          leave-from-class=\"opacity-100 scale-100 translate-y-0 rotate-0\"\r\n          leave-to-class=\"opacity-0 scale-90 translate-y-8 rotate-1\"\r\n        >\r\n          <div class=\"w-full max-h-[90vh] flex flex-col max-w-md sm:max-w-md md:max-w-lg\" @click.stop>\r\n            <div class=\"bg-white dark:bg-[#0a0a0a] shadow-2xl rounded-xl border border-gray-200 dark:border-dark-bg-mute flex flex-col h-full overflow-hidden transform\">\r\n              <!-- Header -->\r\n              <div class=\"px-6 py-4 border-b border-gray-200 dark:border-dark-bg-mute flex-shrink-0 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-[#0a0a0a] dark:to-[#0a0a0a]\">\r\n                <div class=\"flex items-center justify-between\">\r\n                  <h3 class=\"text-lg sm:text-xl font-semibold text-gray-900 dark:text-white flex items-center space-x-2\">\r\n                    <span class=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></span>\r\n                    <span>{{ t('grammar.practice.settings.title', 'Settings') }}</span>\r\n                  </h3>\r\n                  <button \r\n                    @click=\"showSettings = false\"\r\n                    class=\"text-gray-400 dark:text-white hover:text-gray-600 dark:hover:text-white transition-all duration-300 hover:scale-110 hover:rotate-90 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-dark-bg-mute\"\r\n                  >\r\n                    <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Body -->\r\n              <div class=\"px-6 py-4 flex-1 overflow-y-auto min-h-0 space-y-4\">\r\n                <!-- Difficulty Level -->\r\n                <div>\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-white mb-2\">\r\n                    {{ t('grammar.practice.settings.difficulty', 'Difficulty') }}\r\n                  </label>\r\n                  <select \r\n                    v-model=\"settings.difficulty\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-bg-mute rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:border-blue-500\"\r\n                  >\r\n                    <option value=\"easy\">{{ t('grammar.practice.settings.levels.easy', 'Easy') }}</option>\r\n                    <option value=\"medium\">{{ t('grammar.practice.settings.levels.medium', 'Medium') }}</option>\r\n                    <option value=\"hard\">{{ t('grammar.practice.settings.levels.hard', 'Hard') }}</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <!-- Auto-play Audio -->\r\n                <div class=\"flex items-center justify-between\">\r\n                  <label class=\"text-sm font-medium text-gray-700 dark:text-white\">\r\n                    {{ t('grammar.practice.settings.autoPlay', 'Auto-play audio') }}\r\n                  </label>\r\n                  <button\r\n                    @click=\"settings.autoPlayAudio = !settings.autoPlayAudio\"\r\n                    :class=\"[\r\n                      'relative inline-flex h-6 w-11 items-center rounded-full transition-colors',\r\n                      settings.autoPlayAudio ? 'bg-blue-600' : 'bg-gray-200 dark:bg-dark-bg-mute'\r\n                    ]\"\r\n                  >\r\n                    <span\r\n                      :class=\"[\r\n                        'inline-block h-4 w-4 transform rounded-full bg-white transition-transform',\r\n                        settings.autoPlayAudio ? 'translate-x-6' : 'translate-x-1'\r\n                      ]\"\r\n                    />\r\n                  </button>\r\n                </div>\r\n\r\n                <!-- Show Explanations -->\r\n                <div class=\"flex items-center justify-between\">\r\n                  <label class=\"text-sm font-medium text-gray-700 dark:text-white\">\r\n                    {{ t('grammar.practice.settings.showExplanations', 'Show explanations') }}\r\n                  </label>\r\n                  <button\r\n                    @click=\"settings.showExplanations = !settings.showExplanations\"\r\n                    :class=\"[\r\n                      'relative inline-flex h-6 w-11 items-center rounded-full transition-colors',\r\n                      settings.showExplanations ? 'bg-blue-600' : 'bg-gray-200 dark:bg-dark-bg-mute'\r\n                    ]\"\r\n                  >\r\n                    <span\r\n                      :class=\"[\r\n                        'inline-block h-4 w-4 transform rounded-full bg-white transition-transform',\r\n                        settings.showExplanations ? 'translate-x-6' : 'translate-x-1'\r\n                      ]\"\r\n                    />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Footer -->\r\n              <div class=\"px-6 py-4 border-t border-gray-200 dark:border-dark-bg-mute flex-shrink-0 bg-gradient-to-r from-gray-50 to-blue-50 dark:from-[#0a0a0a] dark:to-[#0a0a0a]\">\r\n                <div class=\"flex justify-end space-x-3\">\r\n                  <button\r\n                    @click=\"showSettings = false\"\r\n                    class=\"px-6 py-2 text-gray-700 dark:text-white bg-gray-100 dark:bg-dark-bg-mute hover:bg-gray-200 dark:hover:bg-dark-bg-soft rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium\"\r\n                  >\r\n                    {{ t('common.cancel', 'Cancel') }}\r\n                  </button>\r\n                  <button\r\n                    @click=\"saveSettings\"\r\n                    class=\"px-6 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium\"\r\n                  >\r\n                    {{ t('common.save', 'Save') }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Transition>\r\n      </div>\r\n    </Transition>\r\n\r\n    <!-- Results Modal -->\r\n    <div v-if=\"showResults\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700 p-6 max-w-lg w-full mx-4\">\r\n        <div class=\"text-center\">\r\n          <div class=\"w-20 h-20 mx-auto mb-4 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center\">\r\n            <svg class=\"w-10 h-10 text-green-600 dark:text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n          </div>\r\n          \r\n          <h3 class=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\r\n            {{ t('grammar.practice.results.title', 'Great job!') }}\r\n          </h3>\r\n          \r\n          <div class=\"space-y-4 mb-6\">\r\n            <div class=\"grid grid-cols-3 gap-4 text-center\">\r\n              <div class=\"bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4\">\r\n                <div class=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{{ exerciseResults.correct }}</div>\r\n                <div class=\"text-sm text-gray-600 dark:text-gray-400\">{{ t('grammar.practice.results.correct', 'Correct') }}</div>\r\n              </div>\r\n              <div class=\"bg-red-50 dark:bg-red-900/30 rounded-lg p-4\">\r\n                <div class=\"text-2xl font-bold text-red-600 dark:text-red-400\">{{ exerciseResults.incorrect }}</div>\r\n                <div class=\"text-sm text-gray-600 dark:text-gray-400\">{{ t('grammar.practice.results.incorrect', 'Incorrect') }}</div>\r\n              </div>\r\n              <div class=\"bg-green-50 dark:bg-green-900/30 rounded-lg p-4\">\r\n                <div class=\"text-2xl font-bold text-green-600 dark:text-green-400\">{{ exerciseResults.percentage }}%</div>\r\n                <div class=\"text-sm text-gray-600 dark:text-gray-400\">{{ t('grammar.practice.results.accuracy', 'Accuracy') }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"flex justify-center space-x-4\">\r\n            <button\r\n              @click=\"restartExercise\"\r\n              class=\"px-6 py-3 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\r\n            >\r\n              {{ t('grammar.practice.results.tryAgain', 'Try again') }}\r\n            </button>\r\n            <button\r\n              @click=\"goBackToSelection\"\r\n              class=\"px-6 py-3 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors\"\r\n            >\r\n              {{ t('grammar.practice.results.chooseAnother', 'Choose another exercise') }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Exercise Manager Component -->\r\n    <ExerciseManager\r\n      v-model=\"showExerciseManager\"\r\n      :exercise-types=\"exerciseTypes\"\r\n      @add-exercise=\"addExerciseType\"\r\n      @edit-exercise=\"editExerciseType\"\r\n      @delete-exercise=\"deleteExerciseType\"\r\n      @save-exercises=\"saveExerciseTypes\"\r\n      @open-question-manager=\"openQuestionManager\"\r\n    />\r\n\r\n    <!-- Question Manager Modal -->\r\n    <div v-if=\"showQuestionManager\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700 p-6 max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\r\n        <div class=\"flex items-center justify-between mb-6\">\r\n          <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            {{ t('grammar.practice.questionManager.title') }}: {{ t(`grammar.practice.exercises.${selectedExerciseTypeForQuestions}.title`) }}\r\n          </h3>\r\n          <button\r\n            @click=\"closeQuestionManager\"\r\n            class=\"p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\r\n          >\r\n            <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        <!-- Question Management -->\r\n        <div class=\"space-y-6\">\r\n          <!-- Add New Question Form -->\r\n          <div class=\"bg-gray-50 dark:bg-gray-800/30 border border-gray-200 dark:border-gray-600 rounded-lg p-4\">\r\n            <h4 class=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\r\n              {{ editingQuestionIndex >= 0 ? t('grammar.practice.questionManager.editQuestion') : t('grammar.practice.questionManager.addNew') }}\r\n            </h4>\r\n            \r\n            <!-- Writing Exercise Form -->\r\n            <div v-if=\"selectedExerciseTypeForQuestions === 'writing'\" class=\"space-y-4\">\r\n              <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    {{ t('grammar.practice.questionManager.taskType') }}\r\n                  </label>\r\n                  <select\r\n                    v-model=\"newQuestion.taskType\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"essay\">{{ t('grammar.practice.exercises.writing.essay') }}</option>\r\n                    <option value=\"email\">{{ t('grammar.practice.exercises.writing.email') }}</option>\r\n                    <option value=\"letter\">{{ t('grammar.practice.exercises.writing.letter') }}</option>\r\n                    <option value=\"paragraph\">{{ t('grammar.practice.exercises.writing.paragraph') }}</option>\r\n                  </select>\r\n                </div>\r\n                <div class=\"grid grid-cols-2 gap-2\">\r\n                  <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                      {{ t('grammar.practice.questionManager.minWords') }}\r\n                    </label>\r\n                    <input\r\n                      v-model.number=\"newQuestion.minWords\"\r\n                      type=\"number\"\r\n                      min=\"50\"\r\n                      class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    >\r\n                  </div>\r\n                  <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                      {{ t('grammar.practice.questionManager.timeLimit') }}\r\n                    </label>\r\n                    <input\r\n                      v-model.number=\"newQuestion.timeLimit\"\r\n                      type=\"number\"\r\n                      min=\"5\"\r\n                      class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.prompt') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.prompt\"\r\n                  rows=\"3\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.promptPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n              <div>\r\n                <div class=\"flex items-center justify-between mb-2\">\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                    {{ t('grammar.practice.questionManager.requirements') }}\r\n                  </label>\r\n                  <button\r\n                    @click=\"addRequirement\"\r\n                    class=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300\"\r\n                  >\r\n                    + {{ t('grammar.practice.questionManager.addRequirement') }}\r\n                  </button>\r\n                </div>\r\n                <div class=\"space-y-2\">\r\n                  <div \r\n                    v-for=\"(requirement, index) in newQuestion.requirements\" \r\n                    :key=\"index\"\r\n                    class=\"flex items-center space-x-2\"\r\n                  >\r\n                    <input\r\n                      v-model=\"newQuestion.requirements[index]\"\r\n                      type=\"text\"\r\n                      class=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                      :placeholder=\"t('grammar.practice.questionManager.requirementPlaceholder')\"\r\n                    >\r\n                    <button\r\n                      @click=\"removeRequirement(index)\"\r\n                      class=\"p-2 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/30 rounded\"\r\n                      :disabled=\"newQuestion.requirements.length === 1\"\r\n                    >\r\n                      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                      </svg>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Multiple Choice Form -->\r\n            <div v-else-if=\"selectedExerciseTypeForQuestions === 'multiple-choice'\" class=\"space-y-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.question') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.question\"\r\n                  rows=\"2\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.questionPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.options') }}\r\n                </label>\r\n                <div class=\"space-y-2\">\r\n                  <div v-for=\"(option, index) in newQuestion.options\" :key=\"index\" class=\"flex items-center space-x-2\">\r\n                    <span class=\"text-sm font-medium text-gray-500 dark:text-gray-400 w-6\">{{ String.fromCharCode(65 + index) }}.</span>\r\n                    <input\r\n                      v-model=\"newQuestion.options[index]\"\r\n                      type=\"text\"\r\n                      class=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                      :placeholder=\"t('grammar.practice.questionManager.optionPlaceholder')\"\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.correctAnswer') }}\r\n                </label>\r\n                <select\r\n                  v-model=\"newQuestion.correctAnswer\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                >\r\n                  <option v-for=\"(option, index) in newQuestion.options\" :key=\"index\" :value=\"option\">\r\n                    {{ String.fromCharCode(65 + index) }}. {{ option }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.explanation') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.explanation\"\r\n                  rows=\"2\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.explanationPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Listening Exercise Form -->\r\n            <div v-else-if=\"selectedExerciseTypeForQuestions === 'listening'\" class=\"space-y-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.exercises.listening.audioUrl') }}\r\n                </label>\r\n                <div class=\"relative\">\r\n                  <input\r\n                    v-model=\"newQuestion.audioUrl\"\r\n                    type=\"text\"\r\n                    @input=\"handleAudioUrlChange\"\r\n                    @paste=\"handleUrlPaste\"\r\n                    class=\"w-full px-3 py-2 pr-20 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    :placeholder=\"t('grammar.practice.exercises.listening.audioUrlPlaceholder')\"\r\n                  >\r\n                  <!-- Clear button -->\r\n                  <button\r\n                    v-if=\"newQuestion.audioUrl\"\r\n                    @click=\"clearAudioUrl\"\r\n                    type=\"button\"\r\n                    class=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n                  >\r\n                    <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n                <div class=\"mt-2 text-xs text-gray-500 dark:text-gray-400\">\r\n                  {{ t('grammar.practice.exercises.listening.audioUrlHint') }}\r\n                </div>\r\n                <!-- YouTube URL Preview -->\r\n                <div v-if=\"isYouTubeUrl(newQuestion.audioUrl)\" class=\"mt-3 p-3 bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 rounded-lg\">\r\n                  <div class=\"flex items-center space-x-2 text-sm text-blue-800 dark:text-blue-200\">\r\n                    <svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path d=\"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\"/>\r\n                    </svg>\r\n                    <span>{{ t('grammar.practice.exercises.listening.youtubeDetected') }}</span>\r\n                  </div>\r\n                  <div class=\"mt-2 text-xs text-gray-600 dark:text-gray-400\">\r\n                    {{ t('grammar.practice.exercises.listening.youtubeNote') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div>\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    {{ t('grammar.practice.exercises.listening.maxPlays') }}\r\n                  </label>\r\n                  <input\r\n                    v-model.number=\"newQuestion.maxPlays\"\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    max=\"10\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                </div>\r\n                <div>\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    {{ t('grammar.practice.settings.difficulty') }}\r\n                  </label>\r\n                  <select\r\n                    v-model=\"newQuestion.difficulty\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"easy\">{{ t('grammar.practice.settings.levels.easy') }}</option>\r\n                    <option value=\"medium\">{{ t('grammar.practice.settings.levels.medium') }}</option>\r\n                    <option value=\"hard\">{{ t('grammar.practice.settings.levels.hard') }}</option>\r\n                  </select>\r\n                </div>\r\n                <div class=\"flex items-center\">\r\n                  <label class=\"flex items-center space-x-2 cursor-pointer\">\r\n                    <input\r\n                      v-model=\"newQuestion.allowNotes\"\r\n                      type=\"checkbox\"\r\n                      class=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                    >\r\n                    <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                      {{ t('grammar.practice.exercises.listening.allowNotes') }}\r\n                    </span>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.exercises.listening.transcript') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.transcript\"\r\n                  rows=\"3\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.exercises.listening.transcriptPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n              \r\n              <!-- Questions about the audio -->\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.exercises.listening.questions') }}\r\n                </label>\r\n                <div class=\"space-y-3\">\r\n                  <div \r\n                    v-for=\"(question, qIndex) in newQuestion.questions\" \r\n                    :key=\"qIndex\"\r\n                    class=\"border border-gray-200 dark:border-gray-600 rounded-lg p-3\"\r\n                  >\r\n                    <div class=\"flex items-center justify-between mb-2\">\r\n                      <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                        {{ t('grammar.practice.exercises.listening.question') }} {{ qIndex + 1 }}\r\n                      </span>\r\n                      <button\r\n                        @click=\"removeListeningQuestion(qIndex)\"\r\n                        class=\"p-1 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/30 rounded\"\r\n                        :disabled=\"newQuestion.questions.length === 1\"\r\n                      >\r\n                        <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                        </svg>\r\n                      </button>\r\n                    </div>\r\n                    \r\n                    <div class=\"space-y-2\">\r\n                      <div>\r\n                        <select\r\n                          v-model=\"question.type\"\r\n                          class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                        >\r\n                          <option value=\"multiple-choice\">{{ t('grammar.practice.exercises.listening.multipleChoice') }}</option>\r\n                          <option value=\"fill-blank\">{{ t('grammar.practice.exercises.listening.fillBlank') }}</option>\r\n                          <option value=\"ordering\">{{ t('grammar.practice.exercises.listening.ordering') }}</option>\r\n                        </select>\r\n                      </div>\r\n                      \r\n                      <div>\r\n                        <textarea\r\n                          v-model=\"question.question\"\r\n                          rows=\"2\"\r\n                          class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                          :placeholder=\"t('grammar.practice.questionManager.questionPlaceholder')\"\r\n                        ></textarea>\r\n                      </div>\r\n                      \r\n                      <!-- Multiple choice options -->\r\n                      <div v-if=\"question.type === 'multiple-choice'\" class=\"space-y-1\">\r\n                        <div v-for=\"(option, oIndex) in question.options\" :key=\"oIndex\" class=\"flex items-center space-x-2\">\r\n                          <span class=\"text-xs font-medium text-gray-500 dark:text-gray-400 w-4\">{{ String.fromCharCode(65 + oIndex) }}.</span>\r\n                          <input\r\n                            v-model=\"question.options[oIndex]\"\r\n                            type=\"text\"\r\n                            class=\"flex-1 px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                            :placeholder=\"t('grammar.practice.questionManager.optionPlaceholder')\"\r\n                          >\r\n                        </div>\r\n                        <div>\r\n                          <select\r\n                            v-model=\"question.correctAnswer\"\r\n                            class=\"w-full px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                          >\r\n                            <option value=\"\">{{ t('grammar.practice.questionManager.selectCorrectAnswer') }}</option>\r\n                            <option v-for=\"(option, oIndex) in question.options\" :key=\"oIndex\" :value=\"oIndex\">\r\n                              {{ String.fromCharCode(65 + oIndex) }}. {{ option }}\r\n                            </option>\r\n                          </select>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <!-- Fill blank answer -->\r\n                      <div v-else-if=\"question.type === 'fill-blank'\">\r\n                        <input\r\n                          v-model=\"question.correctAnswer\"\r\n                          type=\"text\"\r\n                          class=\"w-full px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                          :placeholder=\"t('grammar.practice.exercises.listening.correctAnswerPlaceholder')\"\r\n                        >\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <button\r\n                    @click=\"addListeningQuestion\"\r\n                    class=\"w-full px-3 py-2 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-gray-500 dark:text-gray-400 hover:border-blue-400 hover:text-blue-500 transition-colors text-sm\"\r\n                  >\r\n                    + {{ t('grammar.practice.exercises.listening.addQuestion') }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Generic Form for other exercise types -->\r\n            <div v-else class=\"space-y-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.question') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.question\"\r\n                  rows=\"3\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.questionPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.explanation') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.explanation\"\r\n                  rows=\"2\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.explanationPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"flex justify-end mt-4\">\r\n              <button\r\n                @click=\"addQuestion\"\r\n                class=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors\"\r\n              >\r\n                {{ editingQuestionIndex >= 0 ? t('common.update') : t('grammar.practice.questionManager.addQuestion') }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Existing Questions List -->\r\n          <div v-if=\"exerciseQuestions[selectedExerciseTypeForQuestions]?.length > 0\">\r\n            <h4 class=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\r\n              {{ t('grammar.practice.questionManager.existingQuestions') }} ({{ exerciseQuestions[selectedExerciseTypeForQuestions].length }})\r\n            </h4>\r\n            <div class=\"space-y-4 max-h-96 overflow-y-auto\">\r\n              <div\r\n                v-for=\"(question, index) in exerciseQuestions[selectedExerciseTypeForQuestions]\"\r\n                :key=\"question.id\"\r\n                class=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4\"\r\n              >\r\n                <div class=\"flex items-start justify-between\">\r\n                  <div class=\"flex-1\">\r\n                    <div class=\"mb-2\">\r\n                      <span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\r\n                        #{{ index + 1 }}\r\n                      </span>\r\n                      <span v-if=\"selectedExerciseTypeForQuestions === 'writing'\" class=\"ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\r\n                        {{ t(`grammar.practice.exercises.writing.${question.taskType}`) }}\r\n                      </span>\r\n                    </div>\r\n                    <div class=\"text-sm text-gray-900 dark:text-white mb-2\">\r\n                      <strong>{{ selectedExerciseTypeForQuestions === 'writing' ? t('grammar.practice.questionManager.prompt') : t('grammar.practice.questionManager.question') }}:</strong>\r\n                      <p class=\"mt-1\">{{ selectedExerciseTypeForQuestions === 'writing' ? question.prompt : question.question }}</p>\r\n                    </div>\r\n                    <div v-if=\"selectedExerciseTypeForQuestions === 'writing' && question.requirements?.length > 0\" class=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                      <strong>{{ t('grammar.practice.questionManager.requirements') }}:</strong>\r\n                      <ul class=\"list-disc list-inside mt-1\">\r\n                        <li v-for=\"req in question.requirements\" :key=\"req\">{{ req }}</li>\r\n                      </ul>\r\n                    </div>\r\n                    <div v-if=\"selectedExerciseTypeForQuestions === 'multiple-choice' && question.options\" class=\"text-xs text-gray-600 dark:text-gray-400 mt-2\">\r\n                      <strong>{{ t('grammar.practice.questionManager.correctAnswer') }}:</strong> {{ question.correctAnswer }}\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"flex items-center space-x-2 ml-4\">\r\n                    <button\r\n                      @click=\"editQuestion(index)\"\r\n                      class=\"p-1 rounded text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors\"\r\n                      :title=\"t('common.edit')\"\r\n                    >\r\n                      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                      </svg>\r\n                    </button>\r\n                    <button\r\n                      @click=\"deleteQuestion(index)\"\r\n                      class=\"p-1 rounded text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/30 transition-colors\"\r\n                      :title=\"t('common.delete')\"\r\n                    >\r\n                      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                      </svg>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- No Questions Message -->\r\n          <div v-else class=\"text-center py-8\">\r\n            <div class=\"text-gray-500 dark:text-gray-400\">\r\n              <svg class=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n              </svg>\r\n              <p>{{ t('grammar.practice.questionManager.noQuestions') }}</p>\r\n              <p class=\"text-sm mt-1\">{{ t('grammar.practice.questionManager.addFirstQuestion') }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"flex justify-end space-x-4 mt-6\">\r\n          <button\r\n            @click=\"closeQuestionManager\"\r\n            class=\"px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-[#0a0a0a] rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\r\n          >\r\n            {{ t('common.close') }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, watch, defineAsyncComponent, h } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport { useVoiceStore } from '../../stores/voiceStore'\r\n\r\nconst { t } = useI18n()\r\n// Helper: i18n with safe fallback and optional params\r\nconst tf = (key: string, fallback: string, params?: Record<string, any>) => {\r\n  const translated = params ? (t as any)(key, params) : (t as any)(key)\r\n  const text = typeof translated === 'string' ? translated : String(translated)\r\n  if (text === key) return fallback\r\n  return text\r\n}\r\nconst route = useRoute()\r\nconst router = useRouter()\r\nconst { playAudio } = useVoiceStore()\r\n\r\n// TypeScript Interfaces\r\ninterface ListeningQuestion {\r\n  question: string\r\n  type: 'multiple-choice' | 'fill-blank' | 'ordering'\r\n  options?: string[]\r\n  correctAnswer: string | number\r\n  explanation?: string\r\n}\r\n\r\ninterface BaseQuestion {\r\n  id: string\r\n  type: string\r\n  question: string\r\n  options: string[]\r\n  correctAnswer: string\r\n  explanation: string\r\n  difficulty: string\r\n}\r\n\r\ninterface ListeningExercise extends BaseQuestion {\r\n  type: 'listening'\r\n  audioUrl: string\r\n  originalUrl: string\r\n  maxPlays: number\r\n  allowNotes: boolean\r\n  transcript: string\r\n  questions: ListeningQuestion[]\r\n  // Include all other properties for compatibility\r\n  taskType: string\r\n  prompt: string\r\n  requirements: string[]\r\n  minWords: number\r\n  timeLimit: number\r\n}\r\n\r\ninterface WritingExercise extends BaseQuestion {\r\n  type: 'writing'\r\n  taskType: string\r\n  prompt: string\r\n  requirements: string[]\r\n  minWords: number\r\n  timeLimit: number\r\n  audioUrl: string\r\n  originalUrl: string\r\n  maxPlays: number\r\n  allowNotes: boolean\r\n  transcript: string\r\n  questions: any[]\r\n}\r\n\r\ninterface OtherExercise extends BaseQuestion {\r\n  taskType: string\r\n  prompt: string\r\n  requirements: string[]\r\n  minWords: number\r\n  timeLimit: number\r\n  audioUrl: string\r\n  originalUrl: string\r\n  maxPlays: number\r\n  allowNotes: boolean\r\n  transcript: string\r\n  questions: any[]\r\n}\r\n\r\ntype QuestionType = ListeningExercise | WritingExercise | OtherExercise\r\n\r\n// Exercise Components (lazy loaded)\r\nconst MultipleChoiceExercise = defineAsyncComponent(() => import('./components/MultipleChoiceExercise.vue'))\r\nconst FillBlankExercise = defineAsyncComponent(() => import('./components/FillBlankExercise.vue'))\r\nconst PronunciationExercise = defineAsyncComponent(() => import('./components/PronunciationExercise.vue'))\r\nconst ReadingExercise = defineAsyncComponent(() => import('./components/ReadingExercise.vue'))\r\nconst ListeningExercise = defineAsyncComponent(() => import('./components/ListeningExercise.vue'))\r\nconst WritingExercise = defineAsyncComponent(() => import('./components/WritingExercise.vue'))\r\nconst ExerciseManager = defineAsyncComponent(() => import('./components/ExerciseManager.vue'))\r\n\r\n// Icons for exercises\r\nconst BookOpenIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.168 18.477 18.582 18 16.5 18c-1.746 0-3.332.477-4.5 1.253' })\r\n])\r\n\r\nconst PencilIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z' })\r\n])\r\n\r\nconst SpeakerWaveIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M19.114 5.636a9 9 0 010 12.728M16.463 8.288a5.25 5.25 0 010 7.424M6.75 8.25l4.72-4.72a.75.75 0 011.28.53v15.88a.75.75 0 01-1.28.53l-4.72-4.72H4.51c-.88 0-1.59-.71-1.59-1.59V9.84c0-.88.71-1.59 1.59-1.59h2.24z' })\r\n])\r\n\r\nconst MicrophoneIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3zM19 10v2a7 7 0 0 1-14 0v-2M12 19v4M8 23h8' })\r\n])\r\n\r\nconst EyeIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M15 12a3 3 0 11-6 0 3 3 0 016 0z' }),\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z' })\r\n])\r\n\r\nconst EditIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z' })\r\n])\r\n\r\n// State\r\nconst grammarId = computed(() => route.params.id as string)\r\nconst selectedExercise = ref<string | null>(null)\r\nconst currentQuestionIndex = ref(0)\r\nconst totalQuestions = ref(10)\r\nconst currentQuestion = ref<any>(null)\r\nconst exerciseResults = ref<{\r\n  correct: number\r\n  incorrect: number\r\n  percentage: number\r\n  answers: any[]\r\n}>({\r\n  correct: 0,\r\n  incorrect: 0,\r\n  percentage: 0,\r\n  answers: []\r\n})\r\nconst showSettings = ref(false)\r\nconst showResults = ref(false)\r\nconst showExerciseManager = ref(false)\r\nconst totalScore = ref(0)\r\n\r\n// Exercise Manager State\r\nconst newExercise = ref({\r\n  type: '',\r\n  title: '',\r\n  description: '',\r\n  difficulty: 'medium',\r\n  duration: ''\r\n})\r\n\r\n// Question Management State\r\nconst exerciseQuestions = ref<Record<string, any[]>>({})\r\nconst showQuestionManager = ref(false)\r\nconst selectedExerciseTypeForQuestions = ref('')\r\nconst newQuestion = ref<QuestionType>({\r\n  id: '',\r\n  type: '',\r\n  question: '',\r\n  options: ['', '', '', ''],\r\n  correctAnswer: '',\r\n  explanation: '',\r\n  difficulty: 'medium',\r\n  // Writing specific fields\r\n  taskType: 'essay',\r\n  prompt: '',\r\n  requirements: [''],\r\n  minWords: 100,\r\n  timeLimit: 20,\r\n  // Listening specific fields\r\n  audioUrl: '',\r\n  originalUrl: '',\r\n  maxPlays: 3,\r\n  allowNotes: false,\r\n  transcript: '',\r\n  questions: []\r\n})\r\nconst editingQuestionIndex = ref(-1)\r\n\r\n// Settings\r\nconst settings = ref({\r\n  difficulty: 'medium',\r\n  autoPlayAudio: true,\r\n  showExplanations: true\r\n})\r\n\r\n// Exercise types with metadata\r\nconst exerciseTypes = ref([\r\n  {\r\n    type: 'multiple-choice',\r\n    title: 'Multiple Choice',\r\n    description: 'Choose the correct answer from multiple options',\r\n    icon: BookOpenIcon,\r\n    colorClass: 'bg-gray-500',\r\n    duration: '10-15 min',\r\n    difficulty: 'Easy'\r\n  },\r\n  {\r\n    type: 'fill-blank',\r\n    title: 'Fill in the Blanks',\r\n    description: 'Complete sentences by filling in missing words',\r\n    icon: PencilIcon,\r\n    colorClass: 'bg-green-500',\r\n    duration: '15-20 min',\r\n    difficulty: 'Medium'\r\n  },\r\n  {\r\n    type: 'pronunciation',\r\n    title: 'Pronunciation Practice',\r\n    description: 'Practice speaking and pronunciation skills',\r\n    icon: MicrophoneIcon,\r\n    colorClass: 'bg-purple-500',\r\n    duration: '10-15 min',\r\n    difficulty: 'Medium'\r\n  },\r\n  {\r\n    type: 'reading',\r\n    title: 'Reading Comprehension',\r\n    description: 'Read passages and answer comprehension questions',\r\n    icon: EyeIcon,\r\n    colorClass: 'bg-orange-500',\r\n    duration: '20-25 min',\r\n    difficulty: 'Hard'\r\n  },\r\n  {\r\n    type: 'listening',\r\n    title: 'Listening Exercise',\r\n    description: 'Listen to audio and answer related questions',\r\n    icon: SpeakerWaveIcon,\r\n    colorClass: 'bg-indigo-500',\r\n    duration: '15-20 min',\r\n    difficulty: 'Medium'\r\n  },\r\n  {\r\n    type: 'writing',\r\n    title: 'Writing Practice',\r\n    description: 'Practice writing skills with various prompts',\r\n    icon: EditIcon,\r\n    colorClass: 'bg-red-500',\r\n    duration: '25-30 min',\r\n    difficulty: 'Hard'\r\n  }\r\n])\r\n\r\n// Computed\r\nconst currentExerciseComponent = computed(() => {\r\n  const componentMap: Record<string, any> = {\r\n    'multiple-choice': MultipleChoiceExercise,\r\n    'fill-blank': FillBlankExercise,\r\n    'pronunciation': PronunciationExercise,\r\n    'reading': ReadingExercise,\r\n    'listening': ListeningExercise,\r\n    'writing': WritingExercise\r\n  }\r\n  return selectedExercise.value ? componentMap[selectedExercise.value] || null : null\r\n})\r\n\r\n// Methods\r\nconst startExercise = (exerciseType: string) => {\r\n  selectedExercise.value = exerciseType\r\n  currentQuestionIndex.value = 0\r\n  exerciseResults.value = {\r\n    correct: 0,\r\n    incorrect: 0,\r\n    percentage: 0,\r\n    answers: []\r\n  }\r\n  generateQuestions()\r\n  \r\n  // Update URL to include selected exercise\r\n  const newQuery = { ...route.query, exercise: exerciseType }\r\n  router.replace({ query: newQuery })\r\n}\r\n\r\nconst generateQuestions = () => {\r\n  // Get questions from localStorage or use default data\r\n  if (!selectedExercise.value) return\r\n  const savedQuestions = exerciseQuestions.value[selectedExercise.value] || []\r\n  \r\n  if (savedQuestions.length > 0) {\r\n    // Use saved questions\r\n    const questionIndex = currentQuestionIndex.value % savedQuestions.length\r\n    currentQuestion.value = savedQuestions[questionIndex]\r\n  } else {\r\n    // Use default mock data if no saved questions\r\n    generateDefaultQuestions()\r\n  }\r\n}\r\n\r\nconst generateDefaultQuestions = () => {\r\n  if (selectedExercise.value === 'writing') {\r\n    // Default writing exercise data\r\n    const writingTasks = [\r\n      {\r\n        id: 1,\r\n        type: 'writing',\r\n        taskType: 'essay',\r\n        prompt: 'Write an essay about the importance of learning English in today\\'s globalized world. Discuss how English proficiency can benefit individuals in their personal and professional lives.',\r\n        requirements: [\r\n          'Write at least 250 words',\r\n          'Include an introduction, body paragraphs, and conclusion',\r\n          'Use specific examples to support your points',\r\n          'Demonstrate proper grammar and vocabulary usage'\r\n        ],\r\n        minWords: 250,\r\n        timeLimit: 30\r\n      },\r\n      {\r\n        id: 2,\r\n        type: 'writing',\r\n        taskType: 'email',\r\n        prompt: 'Write a formal email to your manager requesting time off for a family vacation. Include the dates, reason, and any work arrangements you have made.',\r\n        requirements: [\r\n          'Use formal email format',\r\n          'Include appropriate subject line',\r\n          'Be polite and professional',\r\n          'Provide all necessary details'\r\n        ],\r\n        minWords: 150,\r\n        timeLimit: 20\r\n      },\r\n      {\r\n        id: 3,\r\n        type: 'writing',\r\n        taskType: 'letter',\r\n        prompt: 'Write a letter to a friend describing your recent trip to a new city. Share your experiences, what you liked most, and recommend places to visit.',\r\n        requirements: [\r\n          'Use informal, friendly tone',\r\n          'Include specific details about places visited',\r\n          'Share personal experiences and feelings',\r\n          'Make recommendations'\r\n        ],\r\n        minWords: 200,\r\n        timeLimit: 25\r\n      }\r\n    ]\r\n    \r\n    const taskIndex = currentQuestionIndex.value % writingTasks.length\r\n    currentQuestion.value = writingTasks[taskIndex]\r\n    \r\n  } else if (selectedExercise.value === 'multiple-choice') {\r\n    // Default multiple choice data\r\n    const mcQuestions = [\r\n      {\r\n        id: 1,\r\n        type: 'multiple-choice',\r\n        question: 'Choose the correct form of the verb: \"She _____ to the store yesterday.\"',\r\n        options: ['go', 'goes', 'went', 'going'],\r\n        correctAnswer: 'went',\r\n        explanation: 'Past tense is used for actions completed in the past.'\r\n      },\r\n      {\r\n        id: 2,\r\n        type: 'multiple-choice',\r\n        question: 'Which sentence is grammatically correct?',\r\n        options: [\r\n          'I have been living here since 5 years.',\r\n          'I have been living here for 5 years.',\r\n          'I am living here since 5 years.',\r\n          'I live here since 5 years.'\r\n        ],\r\n        correctAnswer: 'I have been living here for 5 years.',\r\n        explanation: 'Use \"for\" with duration and present perfect continuous for ongoing actions.'\r\n      }\r\n    ]\r\n    \r\n    const questionIndex = currentQuestionIndex.value % mcQuestions.length\r\n    currentQuestion.value = mcQuestions[questionIndex]\r\n    \r\n  } else if (selectedExercise.value === 'fill-blank') {\r\n    // Default fill in the blank data\r\n    const fillBlankQuestions = [\r\n      {\r\n        id: 1,\r\n        type: 'fill-blank',\r\n        question: 'Complete the sentence: \"I _____ been studying English _____ three years.\"',\r\n        blanks: ['have', 'for'],\r\n        sentence: 'I _____ been studying English _____ three years.',\r\n        explanation: 'Present perfect continuous with \"have\" and duration with \"for\".'\r\n      }\r\n    ]\r\n    \r\n    const questionIndex = currentQuestionIndex.value % fillBlankQuestions.length\r\n    currentQuestion.value = fillBlankQuestions[questionIndex]\r\n    \r\n  } else {\r\n    // Default generic question for other exercise types\r\n    currentQuestion.value = {\r\n      id: 1,\r\n      type: selectedExercise.value,\r\n      question: `Sample ${selectedExercise.value} question`,\r\n      options: ['Option A', 'Option B', 'Option C', 'Option D'],\r\n      correctAnswer: 'Option A',\r\n      explanation: 'This is the correct answer because...'\r\n    }\r\n  }\r\n}\r\n\r\nconst handleAnswer = (answer: any) => {\r\n  // Process the answer and update results\r\n  const isCorrect = answer.isCorrect\r\n  if (isCorrect) {\r\n    exerciseResults.value.correct++\r\n  } else {\r\n    exerciseResults.value.incorrect++\r\n  }\r\n  \r\n  exerciseResults.value.answers.push({\r\n    questionIndex: currentQuestionIndex.value,\r\n    userAnswer: answer.userAnswer,\r\n    correctAnswer: answer.correctAnswer,\r\n    isCorrect\r\n  })\r\n}\r\n\r\nconst nextQuestion = () => {\r\n  if (currentQuestionIndex.value < totalQuestions.value - 1) {\r\n    currentQuestionIndex.value++\r\n    generateQuestions()\r\n  } else {\r\n    completeExercise()\r\n  }\r\n}\r\n\r\nconst completeExercise = () => {\r\n  const total = exerciseResults.value.correct + exerciseResults.value.incorrect\r\n  exerciseResults.value.percentage = total > 0 ? Math.round((exerciseResults.value.correct / total) * 100) : 0\r\n  totalScore.value += exerciseResults.value.correct * 10\r\n  showResults.value = true\r\n}\r\n\r\nconst restartExercise = () => {\r\n  showResults.value = false\r\n  currentQuestionIndex.value = 0\r\n  exerciseResults.value = {\r\n    correct: 0,\r\n    incorrect: 0,\r\n    percentage: 0,\r\n    answers: []\r\n  }\r\n  generateQuestions()\r\n}\r\n\r\nconst goBackToSelection = () => {\r\n  selectedExercise.value = null\r\n  showResults.value = false\r\n  currentQuestionIndex.value = 0\r\n  \r\n  // Clear exercise query parameter\r\n  const newQuery = { ...route.query }\r\n  delete newQuery.exercise\r\n  router.replace({ query: newQuery })\r\n}\r\n\r\nconst saveSettings = () => {\r\n  // Save settings to localStorage\r\n  localStorage.setItem('grammarPracticeSettings', JSON.stringify(settings.value))\r\n  showSettings.value = false\r\n}\r\n\r\nconst goBackToGrammarDetail = () => {\r\n  // Navigate back to grammar detail page using the ID from route params\r\n  const grammarId = route.params.id\r\n  if (grammarId) {\r\n    router.push(`/grammar/${grammarId}`)\r\n  } else {\r\n    // Fallback to grammar list if no ID\r\n    router.push('/grammar')\r\n  }\r\n}\r\n\r\n// Exercise Manager Functions\r\nconst addExerciseType = () => {\r\n  if (!newExercise.value.type || !newExercise.value.title) {\r\n    return\r\n  }\r\n  \r\n  const exerciseToAdd = {\r\n    type: newExercise.value.type,\r\n    title: newExercise.value.title,\r\n    description: newExercise.value.description,\r\n    difficulty: newExercise.value.difficulty,\r\n    duration: newExercise.value.duration,\r\n    icon: BookOpenIcon,\r\n    colorClass: 'bg-blue-500'\r\n  }\r\n  \r\n  exerciseTypes.value.push(exerciseToAdd)\r\n  \r\n  // Reset form\r\n  newExercise.value = {\r\n    type: '',\r\n    title: '',\r\n    description: '',\r\n    difficulty: 'medium',\r\n    duration: ''\r\n  }\r\n}\r\n\r\nconst editExerciseType = (index: number) => {\r\n  const exercise = exerciseTypes.value[index]\r\n  newExercise.value = {\r\n    type: exercise.type,\r\n    title: exercise.title,\r\n    description: exercise.description,\r\n    difficulty: exercise.difficulty,\r\n    duration: exercise.duration\r\n  }\r\n  \r\n  // Remove the exercise from list (will be re-added when saved)\r\n  exerciseTypes.value.splice(index, 1)\r\n}\r\n\r\nconst deleteExerciseType = (index: number) => {\r\n  if (confirm(t('common.confirmDelete', 'Are you sure you want to delete this?'))) {\r\n    exerciseTypes.value.splice(index, 1)\r\n  }\r\n}\r\n\r\nconst saveExerciseTypes = () => {\r\n  // Here you could save to localStorage or API\r\n  localStorage.setItem('grammarExerciseTypes', JSON.stringify(exerciseTypes.value))\r\n  showExerciseManager.value = false\r\n}\r\n\r\n// Question Management Functions\r\nconst openQuestionManager = (exerciseType: string) => {\r\n  selectedExerciseTypeForQuestions.value = exerciseType\r\n  showQuestionManager.value = true\r\n  resetNewQuestionForm()\r\n}\r\n\r\nconst closeQuestionManager = () => {\r\n  showQuestionManager.value = false\r\n  selectedExerciseTypeForQuestions.value = ''\r\n  resetNewQuestionForm()\r\n  editingQuestionIndex.value = -1\r\n}\r\n\r\nconst resetNewQuestionForm = () => {\r\n  if (selectedExerciseTypeForQuestions.value === 'listening') {\r\n    newQuestion.value = {\r\n      id: '',\r\n      type: 'listening',\r\n      audioUrl: '',\r\n      maxPlays: 3,\r\n      allowNotes: true,\r\n      difficulty: 'medium',\r\n      transcript: '',\r\n      questions: [{\r\n        question: '',\r\n        type: 'multiple-choice',\r\n        options: ['', '', '', ''],\r\n        correctAnswer: ''\r\n      }]\r\n    } as any\r\n  } else if (selectedExerciseTypeForQuestions.value === 'writing') {\r\n    newQuestion.value = {\r\n      id: '',\r\n      type: 'writing',\r\n      question: '',\r\n      options: ['', '', '', ''],\r\n      correctAnswer: '',\r\n      explanation: '',\r\n      difficulty: 'medium',\r\n      // Writing specific fields\r\n      taskType: 'essay',\r\n      prompt: '',\r\n      requirements: [''],\r\n      minWords: 100,\r\n      timeLimit: 20,\r\n      // Listening specific fields (default values)\r\n      audioUrl: '',\r\n      originalUrl: '',\r\n      maxPlays: 3,\r\n      allowNotes: false,\r\n      transcript: '',\r\n      questions: []\r\n    }\r\n  } else {\r\n    newQuestion.value = {\r\n      id: '',\r\n      type: selectedExerciseTypeForQuestions.value || '',\r\n      question: '',\r\n      options: ['', '', '', ''],\r\n      correctAnswer: '',\r\n      explanation: '',\r\n      difficulty: 'medium',\r\n      // Add missing properties to satisfy TypeScript\r\n      taskType: 'essay',\r\n      prompt: '',\r\n      requirements: [''],\r\n      minWords: 100,\r\n      timeLimit: 20,\r\n      // Listening specific fields (default values)\r\n      audioUrl: '',\r\n      originalUrl: '',\r\n      maxPlays: 3,\r\n      allowNotes: false,\r\n      transcript: '',\r\n      questions: []\r\n    }\r\n  }\r\n}\r\n\r\nconst addQuestion = () => {\r\n  const exerciseType = selectedExerciseTypeForQuestions.value\r\n  if (!exerciseType) return\r\n  \r\n  // Generate unique ID\r\n  const id = Date.now().toString()\r\n  \r\n  const questionToAdd = {\r\n    ...newQuestion.value,\r\n    id,\r\n    type: exerciseType\r\n  }\r\n  \r\n  // Clean up empty requirements for writing exercises\r\n  if (exerciseType === 'writing') {\r\n    questionToAdd.requirements = questionToAdd.requirements.filter(req => req.trim() !== '')\r\n  }\r\n  \r\n  // Initialize exercise questions array if it doesn't exist\r\n  if (!exerciseQuestions.value[exerciseType]) {\r\n    exerciseQuestions.value[exerciseType] = []\r\n  }\r\n  \r\n  if (editingQuestionIndex.value >= 0) {\r\n    // Update existing question\r\n    exerciseQuestions.value[exerciseType][editingQuestionIndex.value] = questionToAdd\r\n    editingQuestionIndex.value = -1\r\n  } else {\r\n    // Add new question\r\n    exerciseQuestions.value[exerciseType].push(questionToAdd)\r\n  }\r\n  \r\n  // Save to localStorage\r\n  saveQuestionsToStorage()\r\n  \r\n  // Reset form\r\n  resetNewQuestionForm()\r\n}\r\n\r\nconst editQuestion = (index: number) => {\r\n  const exerciseType = selectedExerciseTypeForQuestions.value\r\n  const question = exerciseQuestions.value[exerciseType][index]\r\n  \r\n  newQuestion.value = { ...question }\r\n  editingQuestionIndex.value = index\r\n}\r\n\r\nconst deleteQuestion = (index: number) => {\r\n  if (confirm(t('common.confirmDelete', 'Are you sure you want to delete this?'))) {\r\n    const exerciseType = selectedExerciseTypeForQuestions.value\r\n    exerciseQuestions.value[exerciseType].splice(index, 1)\r\n    saveQuestionsToStorage()\r\n  }\r\n}\r\n\r\nconst addRequirement = () => {\r\n  newQuestion.value.requirements.push('')\r\n}\r\n\r\nconst removeRequirement = (index: number) => {\r\n  if (newQuestion.value.requirements.length > 1) {\r\n    newQuestion.value.requirements.splice(index, 1)\r\n  }\r\n}\r\n\r\n// Listening question management\r\nconst addListeningQuestion = () => {\r\n  const listeningQuestion = newQuestion.value as any\r\n  if (listeningQuestion.questions) {\r\n    listeningQuestion.questions.push({\r\n      question: '',\r\n      type: 'multiple-choice',\r\n      options: ['', '', '', ''],\r\n      correctAnswer: ''\r\n    })\r\n  }\r\n}\r\n\r\nconst removeListeningQuestion = (index: number) => {\r\n  const listeningQuestion = newQuestion.value as any\r\n  if (listeningQuestion.questions && listeningQuestion.questions.length > 1) {\r\n    listeningQuestion.questions.splice(index, 1)\r\n  }\r\n}\r\n\r\n// YouTube URL handling functions\r\nconst isYouTubeUrl = (url: string): boolean => {\r\n  if (!url) return false\r\n  const youtubeRegex = /^(https?\\:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\/.+/\r\n  return youtubeRegex.test(url)\r\n}\r\n\r\nconst extractYouTubeVideoId = (url: string): string | null => {\r\n  const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/\r\n  const match = url.match(regex)\r\n  return match ? match[1] : null\r\n}\r\n\r\nconst convertYouTubeToAudioUrl = (url: string): string => {\r\n  // For now, we'll store the YouTube URL and handle audio extraction in the ListeningExercise component\r\n  // This allows the Question Manager to accept YouTube URLs while keeping ListeningExercise audio-only\r\n  const videoId = extractYouTubeVideoId(url)\r\n  if (videoId) {\r\n    // Return a special format that the ListeningExercise can recognize and handle\r\n    return `youtube:${videoId}`\r\n  }\r\n  return url\r\n}\r\n\r\nconst handleAudioUrlChange = () => {\r\n  // Auto-convert YouTube URLs to audio format when user inputs them\r\n  if (isYouTubeUrl(newQuestion.value.audioUrl)) {\r\n    const convertedUrl = convertYouTubeToAudioUrl(newQuestion.value.audioUrl)\r\n    newQuestion.value.originalUrl = newQuestion.value.audioUrl\r\n    newQuestion.value.audioUrl = convertedUrl\r\n  }\r\n}\r\n\r\nconst handleUrlPaste = (event: ClipboardEvent) => {\r\n  const pastedText = event.clipboardData?.getData('text') || ''\r\n  if (pastedText) {\r\n    // Clean up common URL issues from share dialogs\r\n    let cleanUrl = pastedText.trim()\r\n    \r\n    // Remove query parameters that might interfere (like si= from YouTube)\r\n    if (cleanUrl.includes('youtube.com') || cleanUrl.includes('youtu.be')) {\r\n      // For YouTube URLs, keep only essential parameters\r\n      const url = new URL(cleanUrl)\r\n      if (url.hostname.includes('youtube.com')) {\r\n        const videoId = url.searchParams.get('v')\r\n        if (videoId) {\r\n          cleanUrl = `https://www.youtube.com/watch?v=${videoId}`\r\n        }\r\n      } else if (url.hostname.includes('youtu.be')) {\r\n        const videoId = url.pathname.slice(1)\r\n        if (videoId) {\r\n          cleanUrl = `https://youtu.be/${videoId}`\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Update the input value\r\n    newQuestion.value.audioUrl = cleanUrl\r\n    \r\n    // Prevent default paste behavior\r\n    event.preventDefault()\r\n    \r\n    // Trigger the change handler\r\n    handleAudioUrlChange()\r\n  }\r\n}\r\n\r\nconst clearAudioUrl = () => {\r\n  newQuestion.value.audioUrl = ''\r\n  newQuestion.value.originalUrl = ''\r\n}\r\n\r\nconst saveQuestionsToStorage = () => {\r\n  localStorage.setItem('grammarExerciseQuestions', JSON.stringify(exerciseQuestions.value))\r\n}\r\n\r\nconst loadQuestionsFromStorage = () => {\r\n  const saved = localStorage.getItem('grammarExerciseQuestions')\r\n  if (saved) {\r\n    exerciseQuestions.value = JSON.parse(saved)\r\n  }\r\n}\r\n\r\n// Initialize from URL\r\nconst initializeFromUrl = () => {\r\n  const exerciseFromUrl = route.query.exercise as string\r\n  if (exerciseFromUrl && exerciseTypes.value.some(ex => ex.type === exerciseFromUrl)) {\r\n    selectedExercise.value = exerciseFromUrl\r\n    generateQuestions()\r\n  } else {\r\n    selectedExercise.value = null\r\n  }\r\n}\r\n\r\n// Watch for route changes\r\nwatch(() => route.query.exercise, (newExercise) => {\r\n  if (newExercise && exerciseTypes.value.some(ex => ex.type === newExercise)) {\r\n    if (selectedExercise.value !== newExercise) {\r\n      selectedExercise.value = newExercise as string\r\n      currentQuestionIndex.value = 0\r\n      exerciseResults.value = {\r\n        correct: 0,\r\n        incorrect: 0,\r\n        percentage: 0,\r\n        answers: []\r\n      }\r\n      generateQuestions()\r\n    }\r\n  } else {\r\n    selectedExercise.value = null\r\n  }\r\n})\r\n\r\n// Watch for modal states to control body scroll\r\nwatch([showQuestionManager, showSettings, showResults, showExerciseManager], ([questionManager, settings, results, exerciseManager]) => {\r\n  const anyModalOpen = questionManager || settings || results || exerciseManager\r\n  if (anyModalOpen) {\r\n    document.body.style.overflow = 'hidden'\r\n  } else {\r\n    document.body.style.overflow = ''\r\n  }\r\n})\r\n\r\n// Lifecycle\r\nonMounted(() => {\r\n  // Load settings from localStorage\r\n  const savedSettings = localStorage.getItem('grammarPracticeSettings')\r\n  if (savedSettings) {\r\n    settings.value = { ...settings.value, ...JSON.parse(savedSettings) }\r\n  }\r\n  \r\n  // Load saved score\r\n  const savedScore = localStorage.getItem('grammarPracticeScore')\r\n  if (savedScore) {\r\n    totalScore.value = parseInt(savedScore)\r\n  }\r\n  \r\n  // Load questions from localStorage\r\n  loadQuestionsFromStorage()\r\n  \r\n  // Initialize from URL parameters\r\n  initializeFromUrl()\r\n})\r\n</script>\r\n"],"file":"assets/GrammarPracticeView-CXslhokZ.js"}