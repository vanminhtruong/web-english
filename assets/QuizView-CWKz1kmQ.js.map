{"version":3,"mappings":"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","names":["_openBlock","_createElementBlock","_createVNode","_unref","_createElementVNode","_createBlock"],"ignoreList":[],"sources":["../../src/views/practice/QuizView.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 dark:from-gray-900 dark:to-[#0a0a0a]\">\r\n    <!-- Header -->\r\n    <QuizHeader \r\n      :time-remaining=\"timeRemaining\"\r\n      :score=\"score\"\r\n      @go-back=\"goBack\"\r\n    />\r\n\r\n    <!-- Progress Bar -->\r\n    <QuizProgress \r\n      :current-question-index=\"currentQuestionIndex\"\r\n      :total-questions=\"questions.length\"\r\n      :progress-percentage=\"progressPercentage\"\r\n    />\r\n\r\n    <!-- Quiz Content -->\r\n    <div class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n      <!-- Quiz Setup -->\r\n      <QuizSetup \r\n        v-if=\"!quizStarted\"\r\n        :settings=\"quizSettings\"\r\n        :available-levels=\"availableLevels\"\r\n        @start-quiz=\"startQuiz\"\r\n      />\r\n\r\n      <!-- Quiz Questions -->\r\n      <QuizQuestion\r\n        v-else-if=\"!quizCompleted\"\r\n        :question=\"currentQuestion\"\r\n        :selected-answer=\"selectedAnswer\"\r\n        :is-first-question=\"currentQuestionIndex === 0\"\r\n        :is-last-question=\"currentQuestionIndex === questions.length - 1\"\r\n        @select-answer=\"selectAnswer\"\r\n        @previous-question=\"previousQuestion\"\r\n        @next-question=\"nextQuestion\"\r\n      />\r\n\r\n      <!-- Quiz Results -->\r\n      <QuizResults\r\n        v-else\r\n        :score=\"score\"\r\n        :correct-answers=\"correctAnswers\"\r\n        :total-questions=\"questions.length\"\r\n        :accuracy=\"Math.round(accuracy)\"\r\n        :questions=\"questions\"\r\n        :user-answers=\"userAnswers\"\r\n        @restart-quiz=\"restartQuiz\"\r\n        @go-back=\"goBack\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, onUnmounted, defineAsyncComponent, watch } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport { loadComponentSafely } from '../../utils/import-helper'\r\nimport { useVocabularyStore } from '../../composables/useVocabularyStore'\r\nimport type { Vocabulary } from '../../composables/useVocabularyStore'\r\n\r\n// Sử dụng defineAsyncComponent để import components an toàn\r\nconst QuizHeader = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizHeader.vue'))\r\n)\r\nconst QuizProgress = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizProgress.vue'))\r\n)\r\nconst QuizSetup = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizSetup.vue'))\r\n)\r\nconst QuizQuestion = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizQuestion.vue'))\r\n)\r\nconst QuizResults = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizResults.vue'))\r\n)\r\n\r\nconst router = useRouter()\r\nconst vocabularyStore = useVocabularyStore()\r\n\r\n// Data\r\nconst quizStarted = ref(false)\r\nconst quizCompleted = ref(false)\r\nconst currentQuestionIndex = ref(0)\r\nconst selectedAnswer = ref<number | null>(null)\r\nconst userAnswers = ref<number[]>([])\r\nconst score = ref(0)\r\nconst timeRemaining = ref(0)\r\nlet timer: number | null = null\r\n\r\nconst quizSettings = ref({\r\n  type: 'vocabulary',\r\n  level: '',\r\n  questionCount: '10',\r\n  timeLimit: '10'\r\n})\r\n\r\n// Question interface\r\ninterface Question {\r\n  id: number\r\n  type: string\r\n  level: string\r\n  question: string\r\n  options: string[]\r\n  correctAnswer: number\r\n  explanation: string\r\n}\r\n\r\nconst questions = ref<Question[]>([])\r\n\r\n// Function to generate questions from vocabulary data\r\nconst generateQuestionsFromVocabulary = (vocabularies: Vocabulary[]): Question[] => {\r\n  console.log('Generating questions from', vocabularies.length, 'vocabularies')\r\n  if (vocabularies.length === 0) return []\r\n  \r\n  const vocabQuestions = vocabularies.map((vocab, index) => {\r\n    // Create incorrect options by mixing meanings from other vocabularies\r\n    const otherVocabs = vocabularies.filter(v => v.id !== vocab.id)\r\n    let incorrectOptions: string[] = []\r\n    \r\n    if (otherVocabs.length > 0) {\r\n      incorrectOptions = otherVocabs\r\n        .slice(0, 3)\r\n        .map(v => v.meaning.split(' - ')[0]) // Take first part of meaning\r\n    }\r\n    \r\n    // If we don't have enough other vocabularies, add some generic options\r\n    const genericOptions = ['Không có nghĩa', 'Từ khác', 'Khái niệm khác', 'Nghĩa khác', 'Ý nghĩa khác']\r\n    while (incorrectOptions.length < 3) {\r\n      const randomGeneric = genericOptions[Math.floor(Math.random() * genericOptions.length)]\r\n      if (!incorrectOptions.includes(randomGeneric)) {\r\n        incorrectOptions.push(randomGeneric)\r\n      }\r\n    }\r\n    \r\n    const correctMeaning = vocab.meaning.split(' - ')[0] // Take first part of meaning\r\n    const allOptions = [correctMeaning, ...incorrectOptions.slice(0, 3)]\r\n    \r\n    // Shuffle options\r\n    const shuffledOptions = allOptions.sort(() => Math.random() - 0.5)\r\n    const correctAnswer = shuffledOptions.indexOf(correctMeaning)\r\n    \r\n    return {\r\n      id: vocab.id,\r\n      type: 'vocabulary',\r\n      level: vocab.level,\r\n      question: `What does \"${vocab.word}\" mean?`,\r\n      options: shuffledOptions,\r\n      correctAnswer,\r\n      explanation: `\"${vocab.word}\" có nghĩa là: ${vocab.meaning}`\r\n    }\r\n  })\r\n  \r\n  // Shuffle questions and limit to quiz settings\r\n  return vocabQuestions.sort(() => Math.random() - 0.5)\r\n}\r\n\r\n// Function to update questions based on current vocabulary data\r\nconst updateQuestions = () => {\r\n  const vocabularies = vocabularyStore.allVocabularies.value\r\n  console.log('Updating questions from', vocabularies.length, 'total vocabularies')\r\n  \r\n  const filteredVocabs = vocabularies.filter(vocab => {\r\n    // Filter based on quiz settings if needed\r\n    if (quizSettings.value.level && vocab.level !== quizSettings.value.level) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  \r\n  console.log('Filtered to', filteredVocabs.length, 'vocabularies for quiz')\r\n  \r\n  const generatedQuestions = generateQuestionsFromVocabulary(filteredVocabs)\r\n  const questionCount = parseInt(quizSettings.value.questionCount)\r\n  questions.value = generatedQuestions.slice(0, questionCount)\r\n  \r\n  console.log('Generated', questions.value.length, 'questions')\r\n}\r\n\r\n// Get available levels from vocabulary store\r\nconst availableLevels = computed(() => {\r\n  return vocabularyStore.getLevels.value\r\n})\r\n\r\n// Computed\r\nconst currentQuestion = computed(() => questions.value[currentQuestionIndex.value] || {})\r\nconst progressPercentage = computed(() => ((currentQuestionIndex.value + 1) / questions.value.length) * 100)\r\nconst correctAnswers = computed(() => {\r\n  return userAnswers.value.filter((answer, index) => answer === questions.value[index].correctAnswer).length\r\n})\r\nconst accuracy = computed(() => (correctAnswers.value / questions.value.length) * 100)\r\n\r\n// Methods\r\nconst startQuiz = (settings?: any) => {\r\n  // Update settings if provided\r\n  if (settings) {\r\n    quizSettings.value = { ...settings }\r\n  }\r\n  // Ensure we have questions before starting\r\n  if (questions.value.length === 0) {\r\n    updateQuestions()\r\n  }\r\n  \r\n  // If still no questions, show alert\r\n  if (questions.value.length === 0) {\r\n    alert('Không có từ vựng nào để luyện tập. Vui lòng thêm từ vựng trước!')\r\n    return\r\n  }\r\n  \r\n  quizStarted.value = true\r\n  \r\n  // Set timer if time limit is specified\r\n  if (quizSettings.value.timeLimit !== '0') {\r\n    timeRemaining.value = parseInt(quizSettings.value.timeLimit) * 60\r\n    startTimer()\r\n  }\r\n  \r\n  // Initialize user answers array\r\n  userAnswers.value = new Array(questions.value.length).fill(-1)\r\n}\r\n\r\nconst startTimer = () => {\r\n  timer = setInterval(() => {\r\n    timeRemaining.value--\r\n    if (timeRemaining.value <= 0) {\r\n      completeQuiz()\r\n    }\r\n  }, 1000)\r\n}\r\n\r\nconst selectAnswer = (index: number) => {\r\n  selectedAnswer.value = index\r\n}\r\n\r\nconst nextQuestion = () => {\r\n  if (selectedAnswer.value !== null) {\r\n    userAnswers.value[currentQuestionIndex.value] = selectedAnswer.value\r\n    \r\n    if (currentQuestionIndex.value === questions.value.length - 1) {\r\n      completeQuiz()\r\n    } else {\r\n      currentQuestionIndex.value++\r\n      selectedAnswer.value = userAnswers.value[currentQuestionIndex.value] !== -1 \r\n        ? userAnswers.value[currentQuestionIndex.value] \r\n        : null\r\n    }\r\n  }\r\n}\r\n\r\nconst previousQuestion = () => {\r\n  if (currentQuestionIndex.value > 0) {\r\n    userAnswers.value[currentQuestionIndex.value] = selectedAnswer.value || -1\r\n    currentQuestionIndex.value--\r\n    selectedAnswer.value = userAnswers.value[currentQuestionIndex.value] !== -1 \r\n      ? userAnswers.value[currentQuestionIndex.value] \r\n      : null\r\n  }\r\n}\r\n\r\nconst completeQuiz = () => {\r\n  if (selectedAnswer.value !== null) {\r\n    userAnswers.value[currentQuestionIndex.value] = selectedAnswer.value\r\n  }\r\n  \r\n  // Calculate score\r\n  score.value = correctAnswers.value * 10\r\n  \r\n  quizCompleted.value = true\r\n  \r\n  if (timer) {\r\n    clearInterval(timer)\r\n  }\r\n}\r\n\r\nconst restartQuiz = () => {\r\n  quizStarted.value = false\r\n  quizCompleted.value = false\r\n  currentQuestionIndex.value = 0\r\n  selectedAnswer.value = null\r\n  userAnswers.value = []\r\n  score.value = 0\r\n  timeRemaining.value = 0\r\n  \r\n  // Update questions to get fresh data\r\n  updateQuestions()\r\n  \r\n  if (timer) {\r\n    clearInterval(timer)\r\n  }\r\n}\r\n\r\nconst goBack = () => {\r\n  router.back()\r\n}\r\n\r\nconst formatTime = (seconds: number) => {\r\n  const minutes = Math.floor(seconds / 60)\r\n  const remainingSeconds = seconds % 60\r\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\r\n}\r\n\r\nconst getLevelColor = (level: string) => {\r\n  switch (level) {\r\n    case 'beginner': return 'bg-green-100 text-green-800'\r\n    case 'intermediate': return 'bg-yellow-100 text-yellow-800'\r\n    case 'advanced': return 'bg-red-100 text-red-800'\r\n    default: return 'bg-gray-100 text-gray-800'\r\n  }\r\n}\r\n\r\nconst getLevelText = (level: string) => {\r\n  switch (level) {\r\n    case 'beginner': return 'Cơ bản'\r\n    case 'intermediate': return 'Trung cấp'\r\n    case 'advanced': return 'Nâng cao'\r\n    default: return level\r\n  }\r\n}\r\n\r\nonMounted(async () => {\r\n  // Initialize vocabulary store\r\n  const isReady = vocabularyStore.initializeStore()\r\n  \r\n  // Wait for store to be ready\r\n  if (!isReady.value) {\r\n    await new Promise(resolve => \r\n      watch(isReady, (ready) => {\r\n        if (ready) resolve(true)\r\n      }, { immediate: true })\r\n    )\r\n  }\r\n  \r\n  // Load quiz questions based on settings\r\n  updateQuestions()\r\n  \r\n  console.log('Quiz view mounted', vocabularyStore.allVocabularies.value.length, 'vocabularies loaded')\r\n})\r\n\r\n// Watch for store ready state and vocabulary changes\r\nwatch(\r\n  () => vocabularyStore.isStoreReady.value,\r\n  (isReady) => {\r\n    if (isReady) {\r\n      updateQuestions()\r\n    }\r\n  },\r\n  { immediate: true }\r\n)\r\n\r\n// Watch for changes in vocabulary store and update questions\r\nwatch(\r\n  () => vocabularyStore.allVocabularies.value,\r\n  () => {\r\n    if (vocabularyStore.isStoreReady.value) {\r\n      updateQuestions()\r\n    }\r\n  },\r\n  { deep: true }\r\n)\r\n\r\n// Watch for changes in quiz settings and update questions\r\nwatch(\r\n  () => quizSettings.value,\r\n  () => {\r\n    updateQuestions()\r\n  },\r\n  { deep: true }\r\n)\r\n\r\nonUnmounted(() => {\r\n  if (timer) {\r\n    clearInterval(timer)\r\n  }\r\n})\r\n</script>\r\n"],"file":"assets/QuizView-CWKz1kmQ.js"}