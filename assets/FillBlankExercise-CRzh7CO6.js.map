{"version":3,"file":"FillBlankExercise-CRzh7CO6.js","sources":["../../src/views/grammar/components/FillBlankExercise.vue"],"sourcesContent":["<template>\n  <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-lg border border-gray-200 dark:border-white/10 p-6\">\n    <!-- Question -->\n    <div class=\"mb-6\">\n      <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n        {{ tf('grammar.practice.fillBlank.instruction', 'Fill in the blanks') }}\n      </h3>\n      \n      <!-- Sentence with blanks -->\n      <div class=\"bg-gray-50 dark:bg-[#0a0a0a]/50 rounded-lg p-4 mb-4\">\n        <div class=\"text-lg leading-relaxed text-gray-900 dark:text-white\">\n          <span v-for=\"(part, index) in sentenceParts\" :key=\"index\">\n            <span v-if=\"part.type === 'text'\">{{ part.content }}</span>\n            <input\n              v-else-if=\"part.type === 'blank'\"\n              v-model=\"userAnswers[part.index]\"\n              :class=\"[\n                'inline-block mx-1 px-3 py-1 border-b-2 bg-transparent text-center min-w-20 focus:outline-none transition-colors',\n                showAnswer\n                  ? isAnswerCorrect(part.index)\n                    ? 'border-green-500 text-green-600 dark:text-green-400'\n                    : 'border-red-500 text-red-600 dark:text-red-400'\n                  : 'border-blue-500 focus:border-blue-600'\n              ]\"\n              :placeholder=\"`(${part.index + 1})`\"\n              :disabled=\"showAnswer\"\n            />\n          </span>\n        </div>\n      </div>\n\n      <!-- Word Bank (if provided) -->\n      <div v-if=\"question.wordBank && question.wordBank.length > 0\" class=\"mb-4\">\n        <h4 class=\"text-sm font-medium text-gray-700 dark:text-white/80 mb-2\">\n          {{ tf('grammar.practice.fillBlank.wordBank', 'Word bank') }}\n        </h4>\n        <div class=\"flex flex-wrap gap-2\">\n          <button\n            v-for=\"word in question.wordBank\"\n            :key=\"word\"\n            @click=\"insertWord(word)\"\n            :disabled=\"showAnswer\"\n            class=\"px-3 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {{ word }}\n          </button>\n        </div>\n      </div>\n\n      <!-- Audio for sentence -->\n      <div v-if=\"question.audio\" class=\"mb-4\">\n        <button\n          @click=\"playSentenceAudio\"\n          class=\"flex items-center space-x-2 px-4 py-2 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors\"\n        >\n          <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.536 8.464a5 5 0 010 7.072m-2.036-5.036a2.5 2.5 0 010 3.536M6 10h4l4.5-4.5v9L10 10H6V8z\" />\n          </svg>\n          <span>{{ tf('grammar.practice.playAudio', 'Play audio') }}</span>\n        </button>\n      </div>\n    </div>\n\n    <!-- Answer Feedback -->\n    <div v-if=\"showAnswer\" class=\"mb-6 space-y-4\">\n      <!-- Correct Answers -->\n      <div class=\"p-4 bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-700 rounded-lg\">\n        <h4 class=\"font-medium text-green-800 dark:text-green-200 mb-2\">\n          {{ tf('grammar.practice.correctAnswers', 'Correct answers') }}\n        </h4>\n        <div class=\"text-lg leading-relaxed text-green-700 dark:text-green-300\">\n          <span v-for=\"(part, index) in sentenceParts\" :key=\"`correct-${index}`\">\n            <span v-if=\"part.type === 'text'\">{{ part.content }}</span>\n            <span \n              v-else-if=\"part.type === 'blank'\"\n              class=\"inline-block mx-1 px-2 py-1 bg-green-100 dark:bg-green-800 rounded border font-medium\"\n            >\n              {{ question.correctAnswers[part.index] }}\n            </span>\n          </span>\n        </div>\n      </div>\n\n      <!-- Your Answers (if different) -->\n      <div v-if=\"hasIncorrectAnswers\" class=\"p-4 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 rounded-lg\">\n        <h4 class=\"font-medium text-red-800 dark:text-red-200 mb-2\">\n          {{ tf('grammar.practice.yourAnswers', 'Your answers') }}\n        </h4>\n        <div class=\"text-lg leading-relaxed text-red-700 dark:text-red-300\">\n          <span v-for=\"(part, index) in sentenceParts\" :key=\"`user-${index}`\">\n            <span v-if=\"part.type === 'text'\">{{ part.content }}</span>\n            <span \n              v-else-if=\"isBlankPart(part)\"\n              :class=\"[\n                'inline-block mx-1 px-2 py-1 rounded border font-medium',\n                isAnswerCorrect(part.index)\n                  ? 'bg-green-100 dark:bg-green-800 text-green-700 dark:text-green-300'\n                  : 'bg-red-100 dark:bg-red-800 text-red-700 dark:text-red-300'\n              ]\"\n            >\n              {{ userAnswers[part.index] || '(empty)' }}\n            </span>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Explanation -->\n    <div v-if=\"showAnswer && question.explanation\" class=\"mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700 rounded-lg\">\n      <h4 class=\"font-medium text-yellow-800 dark:text-yellow-200 mb-2\">\n        {{ tf('grammar.practice.explanation', 'Explanation') }}\n      </h4>\n      <p class=\"text-yellow-700 dark:text-yellow-300 text-sm\">\n        {{ question.explanation }}\n      </p>\n    </div>\n\n    <!-- Action Buttons -->\n    <div class=\"flex justify-between items-center\">\n      <div class=\"flex items-center space-x-4\">\n        <!-- Hint button -->\n        <button\n          v-if=\"!showAnswer && question.hint\"\n          @click=\"showHint = !showHint\"\n          class=\"flex items-center space-x-2 px-4 py-2 text-sm text-gray-600 dark:text-white/60 hover:text-gray-800 dark:hover:text-white transition-colors\"\n        >\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n          </svg>\n          <span>{{ tf('grammar.practice.hint', 'Hint') }}</span>\n        </button>\n        \n        <!-- Hint content -->\n        <div v-if=\"showHint && question.hint\" class=\"text-sm text-blue-600 dark:text-blue-400\">\n          ðŸ’¡ {{ question.hint }}\n        </div>\n        \n        <!-- Clear button -->\n        <button\n          v-if=\"!showAnswer\"\n          @click=\"clearAnswers\"\n          class=\"flex items-center space-x-2 px-4 py-2 text-sm text-gray-600 dark:text-white/60 hover:text-gray-800 dark:hover:text-white transition-colors\"\n        >\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n          </svg>\n          <span>{{ tf('grammar.practice.clear', 'Clear') }}</span>\n        </button>\n      </div>\n\n      <div class=\"flex space-x-4\">\n        <!-- Submit/Check Answer -->\n        <button\n          v-if=\"!showAnswer\"\n          @click=\"checkAnswer\"\n          :disabled=\"!hasAllAnswers\"\n          class=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 dark:disabled:bg-white/20 disabled:cursor-not-allowed transition-colors\"\n        >\n          {{ tf('grammar.practice.checkAnswer', 'Check answer') }}\n        </button>\n        \n        <!-- Next Question -->\n        <button\n          v-else\n          @click=\"nextQuestion\"\n          class=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n        >\n          {{ questionIndex === totalQuestions - 1 ? tf('grammar.practice.finish', 'Finish') : tf('grammar.practice.next', 'Next') }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useVoiceStore } from '../../../stores/voiceStore'\n\nconst { t } = useI18n()\n// Safe translation helper with explicit English fallback and optional params\nconst tf = (key: string, fallback: string, params?: Record<string, any>) => {\n  try {\n    const translated = t(key as any, params as any)\n    return typeof translated === 'string' && translated !== key ? translated : fallback\n  } catch {\n    return fallback\n  }\n}\nconst { playAudio } = useVoiceStore()\n\n// Props\ninterface Props {\n  question: {\n    id: number\n    sentence: string\n    correctAnswers: string[]\n    wordBank?: string[]\n    explanation?: string\n    hint?: string\n    audio?: string\n  }\n  questionIndex: number\n  totalQuestions: number\n}\n\nconst props = defineProps<Props>()\n\n// Emits\nconst emit = defineEmits<{\n  answer: [answer: { isCorrect: boolean; userAnswer: string[]; correctAnswer: string[] }]\n  next: []\n  complete: []\n}>()\n\n// State\nconst userAnswers = ref<string[]>([])\nconst showAnswer = ref(false)\nconst showHint = ref(false)\nconst focusedBlankIndex = ref<number | null>(null)\n\n// Types for sentence parts\ntype SentencePart = {\n  type: 'text'\n  content: string\n} | {\n  type: 'blank'\n  index: number\n}\n\n// Computed\nconst sentenceParts = computed((): SentencePart[] => {\n  if (!props.question?.sentence) return []\n  \n  const parts: SentencePart[] = []\n  const regex = /___+/g\n  let lastIndex = 0\n  let match\n  let blankIndex = 0\n\n  while ((match = regex.exec(props.question.sentence)) !== null) {\n    // Add text before the blank\n    if (match.index > lastIndex) {\n      parts.push({\n        type: 'text',\n        content: props.question.sentence.slice(lastIndex, match.index)\n      })\n    }\n    \n    // Add the blank\n    parts.push({\n      type: 'blank',\n      index: blankIndex++\n    })\n    \n    lastIndex = regex.lastIndex\n  }\n  \n  // Add remaining text\n  if (lastIndex < props.question.sentence.length) {\n    parts.push({\n      type: 'text',\n      content: props.question.sentence.slice(lastIndex)\n    })\n  }\n  \n  return parts\n})\n\nconst hasAllAnswers = computed(() => {\n  if (!props.question?.correctAnswers) return false\n  return userAnswers.value.length === props.question.correctAnswers.length &&\n         userAnswers.value.every(answer => answer && answer.trim() !== '')\n})\n\nconst hasIncorrectAnswers = computed(() => {\n  if (!props.question?.correctAnswers) return false\n  return userAnswers.value.some((answer, index) => \n    answer.toLowerCase().trim() !== props.question.correctAnswers[index].toLowerCase().trim()\n  )\n})\n\nconst correctCount = computed(() => {\n  if (!props.question?.correctAnswers) return 0\n  return userAnswers.value.filter((answer, index) => \n    answer.toLowerCase().trim() === props.question.correctAnswers[index].toLowerCase().trim()\n  ).length\n})\n\n// Methods\nconst isBlankPart = (part: SentencePart): part is { type: 'blank'; index: number } => {\n  return part.type === 'blank'\n}\n\nconst isAnswerCorrect = (index: number) => {\n  if (!showAnswer.value || !userAnswers.value[index] || !props.question?.correctAnswers?.[index]) return false\n  return userAnswers.value[index].toLowerCase().trim() === \n         props.question.correctAnswers[index].toLowerCase().trim()\n}\n\nconst insertWord = (word: string) => {\n  if (focusedBlankIndex.value !== null) {\n    userAnswers.value[focusedBlankIndex.value] = word\n  } else {\n    // Find first empty blank\n    const emptyIndex = userAnswers.value.findIndex(answer => !answer || answer.trim() === '')\n    if (emptyIndex !== -1) {\n      userAnswers.value[emptyIndex] = word\n    }\n  }\n}\n\nconst clearAnswers = () => {\n  userAnswers.value = []\n}\n\nconst checkAnswer = () => {\n  if (!hasAllAnswers.value || !props.question?.correctAnswers) return\n  \n  showAnswer.value = true\n  const isCorrect = correctCount.value === props.question.correctAnswers.length\n  \n  emit('answer', {\n    isCorrect,\n    userAnswer: [...userAnswers.value],\n    correctAnswer: [...props.question.correctAnswers]\n  })\n}\n\nconst nextQuestion = () => {\n  if (props.questionIndex === props.totalQuestions - 1) {\n    emit('complete')\n  } else {\n    // Reset for next question\n    userAnswers.value = []\n    showAnswer.value = false\n    showHint.value = false\n    focusedBlankIndex.value = null\n    emit('next')\n  }\n}\n\nconst playSentenceAudio = async () => {\n  try {\n    // Create complete sentence with correct answers for audio\n    let completeSentence = props.question.sentence\n    props.question.correctAnswers.forEach((answer, index) => {\n      completeSentence = completeSentence.replace(/___+/, answer)\n    })\n    await playAudio(completeSentence)\n  } catch (error) {\n    console.error('Error playing audio:', error)\n  }\n}\n\n// Initialize userAnswers array\nwatch(() => props.question, (newQuestion) => {\n  if (newQuestion && newQuestion.correctAnswers && newQuestion.correctAnswers.length > 0) {\n    userAnswers.value = new Array(newQuestion.correctAnswers.length).fill('')\n  }\n}, { immediate: true })\n</script>\n"],"names":["_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_Fragment","_renderList","_normalizeClass","question","questionIndex","totalQuestions"],"mappings":"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"}