{"version":3,"file":"WritingExercise-DWOHDXPd.js","sources":["../../src/views/grammar/components/WritingExercise.vue"],"sourcesContent":["<template>\r\n  <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-lg border border-gray-200 dark:border-white/10 p-6\">\r\n    <!-- Writing Prompt -->\r\n    <div class=\"mb-8\">\r\n      <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n        {{ tf('grammar.practice.exercises.writing.instruction', 'Follow the writing instructions') }}\r\n      </h3>\r\n      \r\n      <!-- Task Description -->\r\n      <div class=\"bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 rounded-lg p-4 mb-6\">\r\n        <div class=\"flex items-start space-x-3\">\r\n          <div class=\"w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\r\n            <svg class=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n          </div>\r\n          <div>\r\n            <h4 class=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">\r\n              {{ question.taskType === 'essay' ? tf('grammar.practice.exercises.writing.essay', 'Essay') : \r\n                 question.taskType === 'email' ? tf('grammar.practice.exercises.writing.email', 'Email') :\r\n                 question.taskType === 'letter' ? tf('grammar.practice.exercises.writing.letter', 'Letter') :\r\n                 tf('grammar.practice.exercises.writing.paragraph', 'Paragraph') }}\r\n            </h4>\r\n            <p class=\"text-blue-700 dark:text-blue-300 text-sm\">\r\n              {{ question.prompt }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Requirements -->\r\n      <div v-if=\"question.requirements && question.requirements.length > 0\" class=\"mb-6\">\r\n        <h4 class=\"text-sm font-medium text-gray-700 dark:text-white/70 mb-2\">\r\n          {{ tf('grammar.practice.exercises.writing.requirements', 'Requirements') }}\r\n        </h4>\r\n        <ul class=\"space-y-1\">\r\n          <li \r\n            v-for=\"requirement in question.requirements\" \r\n            :key=\"requirement\"\r\n            class=\"flex items-start space-x-2 text-sm text-gray-600 dark:text-white/60\"\r\n          >\r\n            <svg class=\"w-4 h-4 text-green-600 dark:text-green-400 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\r\n            </svg>\r\n            <span>{{ requirement }}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      \r\n      <!-- Word/Time Limits -->\r\n      <div class=\"flex items-center space-x-6 text-sm text-gray-600 dark:text-white/60 mb-4\">\r\n        <div v-if=\"question.minWords\" class=\"flex items-center space-x-1\">\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n          </svg>\r\n          <span>{{ tf('grammar.practice.exercises.writing.minWords', 'Min words') }}: {{ question.minWords }}</span>\r\n        </div>\r\n        <div v-if=\"question.timeLimit\" class=\"flex items-center space-x-1\">\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n          </svg>\r\n          <span>{{ tf('grammar.practice.exercises.writing.timeLimit', 'Time limit') }}: {{ question.timeLimit }} {{ tf('common.minutes', 'minutes') }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Writing Area -->\r\n    <div class=\"mb-6\">\r\n      <div class=\"flex items-center justify-between mb-4\">\r\n        <h4 class=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n          {{ tf('grammar.practice.exercises.writing.yourResponse', 'Your response') }}\r\n        </h4>\r\n        \r\n        <!-- Stats -->\r\n        <div class=\"flex items-center space-x-4 text-sm\">\r\n          <div class=\"flex items-center space-x-1\">\r\n            <span class=\"text-gray-500 dark:text-white/60\">{{ tf('grammar.practice.exercises.writing.words', 'Words') }}:</span>\r\n            <span \r\n              :class=\"[\r\n                'font-medium',\r\n                wordCount >= (question.minWords || 0) ? 'text-green-600 dark:text-green-400' : 'text-orange-600 dark:text-orange-400'\r\n              ]\"\r\n            >\r\n              {{ wordCount }}\r\n            </span>\r\n            <span v-if=\"question.minWords\" class=\"text-gray-400 dark:text-white/50\">\r\n              / {{ question.minWords }}\r\n            </span>\r\n          </div>\r\n          \r\n          <div v-if=\"question.timeLimit\" class=\"flex items-center space-x-1\">\r\n            <span class=\"text-gray-500 dark:text-white/60\">{{ tf('grammar.practice.exercises.writing.timeLeft', 'Time left') }}:</span>\r\n            <span \r\n              :class=\"[\r\n                'font-medium font-mono',\r\n                timeRemaining <= 300 ? 'text-red-600 dark:text-red-400' : 'text-blue-600 dark:text-blue-400'\r\n              ]\"\r\n            >\r\n              {{ formatTime(timeRemaining) }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Text Area -->\r\n      <textarea\r\n        v-model=\"userText\"\r\n        :disabled=\"timeExpired || isSubmitted\"\r\n        :placeholder=\"getPlaceholderText()\"\r\n        class=\"w-full h-80 px-4 py-3 border border-gray-300 dark:border-white/10 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white resize-none disabled:bg-gray-100 dark:disabled:bg-white/5 disabled:cursor-not-allowed\"\r\n        @input=\"updateWordCount\"\r\n      ></textarea>\r\n      \r\n      <!-- Tips -->\r\n      <div class=\"mt-4 text-sm text-gray-600 dark:text-white/60\">\r\n        <button\r\n          @click=\"showTips = !showTips\"\r\n          class=\"flex items-center space-x-1 hover:text-gray-800 dark:hover:text-white/80 transition-colors\"\r\n        >\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\r\n          </svg>\r\n          <span>{{ tf('grammar.practice.exercises.writing.tips', 'Tips') }}</span>\r\n        </button>\r\n        \r\n        <div v-if=\"showTips\" class=\"mt-2 p-3 bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700 rounded-lg\">\r\n          <ul class=\"space-y-1\">\r\n            <li v-for=\"tip in writingTips\" :key=\"tip\" class=\"text-yellow-800 dark:text-yellow-200\">\r\n              • {{ tip }}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- AI Feedback (if submitted) -->\r\n    <div v-if=\"isSubmitted && feedback\" class=\"mb-6\">\r\n      <h4 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\r\n        {{ tf('grammar.practice.exercises.writing.feedback', 'Feedback') }}\r\n      </h4>\r\n      \r\n      <!-- Overall Score -->\r\n      <div class=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/30 dark:to-purple-900/30 border border-blue-200 dark:border-blue-700 rounded-lg p-4 mb-4\">\r\n        <div class=\"flex items-center justify-between\">\r\n          <h5 class=\"font-medium text-gray-900 dark:text-white\">\r\n            {{ tf('grammar.practice.exercises.writing.overallScore', 'Overall score') }}\r\n          </h5>\r\n          <div class=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n            {{ feedback.overallScore }}/100\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Score breakdown -->\r\n        <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\r\n          <div class=\"text-center\">\r\n            <div class=\"text-lg font-semibold text-gray-900 dark:text-white\">{{ feedback.grammar }}</div>\r\n            <div class=\"text-xs text-gray-600 dark:text-white/60\">{{ tf('grammar.practice.exercises.writing.grammar', 'Grammar') }}</div>\r\n          </div>\r\n          <div class=\"text-center\">\r\n            <div class=\"text-lg font-semibold text-gray-900 dark:text-white\">{{ feedback.vocabulary }}</div>\r\n            <div class=\"text-xs text-gray-600 dark:text-white/60\">{{ tf('grammar.practice.exercises.writing.vocabulary', 'Vocabulary') }}</div>\r\n          </div>\r\n          <div class=\"text-center\">\r\n            <div class=\"text-lg font-semibold text-gray-900 dark:text-white\">{{ feedback.coherence }}</div>\r\n            <div class=\"text-xs text-gray-600 dark:text-white/60\">{{ tf('grammar.practice.exercises.writing.coherence', 'Coherence') }}</div>\r\n          </div>\r\n          <div class=\"text-center\">\r\n            <div class=\"text-lg font-semibold text-gray-900 dark:text-white\">{{ feedback.taskResponse }}</div>\r\n            <div class=\"text-xs text-gray-600 dark:text-white/60\">{{ tf('grammar.practice.exercises.writing.taskResponse', 'Task response') }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Detailed Feedback -->\r\n      <div class=\"space-y-4\">\r\n        <!-- Strengths -->\r\n        <div v-if=\"feedback.strengths.length > 0\" class=\"p-4 bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-700 rounded-lg\">\r\n          <h6 class=\"font-medium text-green-800 dark:text-green-200 mb-2\">\r\n            {{ tf('grammar.practice.exercises.writing.strengths', 'Strengths') }}\r\n          </h6>\r\n          <ul class=\"space-y-1\">\r\n            <li v-for=\"strength in feedback.strengths\" :key=\"strength\" class=\"text-green-700 dark:text-green-300 text-sm\">\r\n              ✓ {{ strength }}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <!-- Areas for Improvement -->\r\n        <div v-if=\"feedback.improvements.length > 0\" class=\"p-4 bg-orange-50 dark:bg-orange-900/30 border border-orange-200 dark:border-orange-700 rounded-lg\">\r\n          <h6 class=\"font-medium text-orange-800 dark:text-orange-200 mb-2\">\r\n            {{ tf('grammar.practice.exercises.writing.improvements', 'Areas for improvement') }}\r\n          </h6>\r\n          <ul class=\"space-y-1\">\r\n            <li v-for=\"improvement in feedback.improvements\" :key=\"improvement\" class=\"text-orange-700 dark:text-orange-300 text-sm\">\r\n              → {{ improvement }}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <!-- Specific Corrections -->\r\n        <div v-if=\"feedback.corrections.length > 0\" class=\"p-4 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 rounded-lg\">\r\n          <h6 class=\"font-medium text-red-800 dark:text-red-200 mb-2\">\r\n            {{ tf('grammar.practice.exercises.writing.corrections', 'Corrections') }}\r\n          </h6>\r\n          <div class=\"space-y-2\">\r\n            <div v-for=\"correction in feedback.corrections\" :key=\"correction.original\" class=\"text-sm\">\r\n              <div class=\"text-red-700 dark:text-red-300\">\r\n                ❌ {{ correction.original }}\r\n              </div>\r\n              <div class=\"text-green-700 dark:text-green-300\">\r\n                ✅ {{ correction.corrected }}\r\n              </div>\r\n              <div v-if=\"correction.explanation\" class=\"text-gray-600 dark:text-white/60 text-xs mt-1\">\r\n                {{ correction.explanation }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Action Buttons -->\r\n    <div class=\"flex justify-between items-center\">\r\n      <div class=\"flex space-x-4\">\r\n        <!-- Save Draft -->\r\n        <button\r\n          v-if=\"!isSubmitted && userText.trim()\"\r\n          @click=\"saveDraft\"\r\n          class=\"flex items-center space-x-2 px-4 py-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors\"\r\n        >\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12\" />\r\n          </svg>\r\n          <span>{{ tf('grammar.practice.exercises.writing.saveDraft', 'Save draft') }}</span>\r\n        </button>\r\n        \r\n        <!-- Clear -->\r\n        <button\r\n          v-if=\"!isSubmitted && userText.trim()\"\r\n          @click=\"clearText\"\r\n          class=\"flex items-center space-x-2 px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors\"\r\n        >\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n          </svg>\r\n          <span>{{ tf('grammar.practice.exercises.writing.clear', 'Clear') }}</span>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"flex space-x-4\">\r\n        <!-- Submit for Review -->\r\n        <button\r\n          v-if=\"!isSubmitted\"\r\n          @click=\"submitForReview\"\r\n          :disabled=\"!canSubmit\"\r\n          class=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\r\n        >\r\n          {{ isAnalyzing ? tf('grammar.practice.exercises.writing.analyzing', 'Analyzing...') : tf('grammar.practice.exercises.writing.submit', 'Submit for review') }}\r\n        </button>\r\n        \r\n        <!-- Next Question -->\r\n        <button\r\n          v-else\r\n          @click=\"nextQuestion\"\r\n          class=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\r\n        >\r\n          {{ questionIndex === totalQuestions - 1 ? tf('grammar.practice.finish', 'Finish') : tf('grammar.practice.next', 'Next') }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\n\r\nconst { t } = useI18n()\r\n// Helper: i18n with safe fallback and optional params\r\nconst tf = (key: string, fallback: string, params?: Record<string, any>) => {\r\n  const translated = params ? (t as any)(key, params) : (t as any)(key)\r\n  const text = typeof translated === 'string' ? translated : String(translated)\r\n  if (text === key) return fallback\r\n  return text\r\n}\r\n\r\n// Props\r\ninterface Props {\r\n  question: {\r\n    id: number\r\n    taskType: 'essay' | 'email' | 'letter' | 'paragraph'\r\n    prompt: string\r\n    requirements?: string[]\r\n    minWords?: number\r\n    timeLimit?: number // in minutes\r\n  }\r\n  questionIndex: number\r\n  totalQuestions: number\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\n// Emits\r\nconst emit = defineEmits<{\r\n  answer: [answer: { isCorrect: boolean; score: number; text: string }]\r\n  next: []\r\n  complete: []\r\n}>()\r\n\r\n// State\r\nconst userText = ref('')\r\nconst wordCount = ref(0)\r\nconst timeRemaining = ref(0)\r\nconst timeExpired = ref(false)\r\nconst isSubmitted = ref(false)\r\nconst isAnalyzing = ref(false)\r\nconst showTips = ref(false)\r\nconst timer = ref<number | null>(null)\r\n\r\nconst feedback = ref<{\r\n  overallScore: number\r\n  grammar: number\r\n  vocabulary: number\r\n  coherence: number\r\n  taskResponse: number\r\n  strengths: string[]\r\n  improvements: string[]\r\n  corrections: Array<{\r\n    original: string\r\n    corrected: string\r\n    explanation?: string\r\n  }>\r\n} | null>(null)\r\n\r\n// Computed\r\nconst canSubmit = computed(() => {\r\n  return userText.value.trim().length > 0 && \r\n         wordCount.value >= (props.question.minWords || 0) &&\r\n         !timeExpired.value &&\r\n         !isAnalyzing.value\r\n})\r\n\r\nconst writingTips = computed(() => {\r\n  const tips = [\r\n    tf('grammar.practice.exercises.writing.tip1', 'Plan your structure before writing.'),\r\n    tf('grammar.practice.exercises.writing.tip2', 'Use clear and concise sentences.'),\r\n    tf('grammar.practice.exercises.writing.tip3', 'Vary vocabulary and sentence patterns.'),\r\n    tf('grammar.practice.exercises.writing.tip4', 'Check grammar and punctuation.'),\r\n    tf('grammar.practice.exercises.writing.tip5', 'Review and edit your response.')\r\n  ]\r\n  return tips\r\n})\r\n\r\n// Methods\r\nconst updateWordCount = () => {\r\n  wordCount.value = userText.value.trim().split(/\\s+/).filter(word => word.length > 0).length\r\n}\r\n\r\nconst getPlaceholderText = () => {\r\n  switch (props.question.taskType) {\r\n    case 'essay':\r\n      return tf('grammar.practice.exercises.writing.essayPlaceholder', 'Write your essay here...')\r\n    case 'email':\r\n      return tf('grammar.practice.exercises.writing.emailPlaceholder', 'Write your email here...')\r\n    case 'letter':\r\n      return tf('grammar.practice.exercises.writing.letterPlaceholder', 'Write your letter here...')\r\n    default:\r\n      return tf('grammar.practice.exercises.writing.paragraphPlaceholder', 'Write your paragraph here...')\r\n  }\r\n}\r\n\r\nconst startTimer = () => {\r\n  if (props.question.timeLimit) {\r\n    timeRemaining.value = props.question.timeLimit * 60 // Convert to seconds\r\n    timer.value = setInterval(() => {\r\n      timeRemaining.value--\r\n      if (timeRemaining.value <= 0) {\r\n        timeExpired.value = true\r\n        stopTimer()\r\n        if (!isSubmitted.value) {\r\n          submitForReview()\r\n        }\r\n      }\r\n    }, 1000)\r\n  }\r\n}\r\n\r\nconst stopTimer = () => {\r\n  if (timer.value) {\r\n    clearInterval(timer.value)\r\n    timer.value = null\r\n  }\r\n}\r\n\r\nconst formatTime = (seconds: number) => {\r\n  const mins = Math.floor(seconds / 60)\r\n  const secs = seconds % 60\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`\r\n}\r\n\r\nconst saveDraft = () => {\r\n  // Save to localStorage\r\n  const draftKey = `writing-draft-${props.question.id}`\r\n  localStorage.setItem(draftKey, userText.value)\r\n  \r\n  // Show toast notification (you might want to implement a toast system)\r\n  console.log('Draft saved!')\r\n}\r\n\r\nconst clearText = () => {\r\n  if (confirm(t('grammar.practice.exercises.writing.confirmClear', 'Clear all text?'))) {\r\n    userText.value = ''\r\n    wordCount.value = 0\r\n  }\r\n}\r\n\r\nconst submitForReview = async () => {\r\n  isAnalyzing.value = true\r\n  stopTimer()\r\n  \r\n  try {\r\n    // Simulate AI analysis (in real app, call AI service)\r\n    await new Promise(resolve => setTimeout(resolve, 3000))\r\n    \r\n    // Mock feedback generation\r\n    const mockFeedback = {\r\n      overallScore: Math.floor(Math.random() * 30) + 70, // 70-100\r\n      grammar: Math.floor(Math.random() * 30) + 70,\r\n      vocabulary: Math.floor(Math.random() * 30) + 70,\r\n      coherence: Math.floor(Math.random() * 30) + 70,\r\n      taskResponse: Math.floor(Math.random() * 30) + 70,\r\n      strengths: [\r\n        'Good use of complex sentence structures',\r\n        'Clear organization of ideas',\r\n        'Appropriate vocabulary for the task'\r\n      ],\r\n      improvements: [\r\n        'Work on paragraph transitions',\r\n        'Use more varied sentence beginnings',\r\n        'Expand on supporting details'\r\n      ],\r\n      corrections: [\r\n        {\r\n          original: 'This is very good',\r\n          corrected: 'This is excellent',\r\n          explanation: 'Use more precise adjectives for better impact'\r\n        }\r\n      ]\r\n    }\r\n    \r\n    feedback.value = mockFeedback\r\n    isSubmitted.value = true\r\n    \r\n    const score = mockFeedback.overallScore\r\n    emit('answer', {\r\n      isCorrect: score >= 70,\r\n      score,\r\n      text: userText.value\r\n    })\r\n    \r\n  } catch (error) {\r\n    console.error('Error analyzing writing:', error)\r\n  } finally {\r\n    isAnalyzing.value = false\r\n  }\r\n}\r\n\r\nconst nextQuestion = () => {\r\n  if (props.questionIndex === props.totalQuestions - 1) {\r\n    emit('complete')\r\n  } else {\r\n    resetExercise()\r\n    emit('next')\r\n  }\r\n}\r\n\r\nconst resetExercise = () => {\r\n  userText.value = ''\r\n  wordCount.value = 0\r\n  timeExpired.value = false\r\n  isSubmitted.value = false\r\n  isAnalyzing.value = false\r\n  showTips.value = false\r\n  feedback.value = null\r\n  stopTimer()\r\n  startTimer()\r\n}\r\n\r\nconst loadDraft = () => {\r\n  const draftKey = `writing-draft-${props.question.id}`\r\n  const draft = localStorage.getItem(draftKey)\r\n  if (draft) {\r\n    userText.value = draft\r\n    updateWordCount()\r\n  }\r\n}\r\n\r\n// Initialize\r\nonMounted(() => {\r\n  startTimer()\r\n  loadDraft()\r\n})\r\n\r\nonUnmounted(() => {\r\n  stopTimer()\r\n})\r\n</script>\r\n"],"names":["_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","question","_Fragment","_renderList","_normalizeClass","questionIndex","totalQuestions"],"mappings":"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"}