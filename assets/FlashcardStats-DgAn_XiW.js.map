{"version":3,"file":"FlashcardStats-DgAn_XiW.js","sources":["../../src/views/dashboard/composables/useFlashcardDashboardStats.ts","../../src/views/dashboard/components/FlashcardStats.vue"],"sourcesContent":["import { ref, computed, onMounted } from 'vue'\nimport type { PracticeHistoryItem } from '../../practice/composables/useFlashcardHistory'\n\nexport interface FlashcardDashboardStats {\n  totalSessions: number\n  totalPracticeTime: number\n  averageAccuracy: number\n  bestScore: number\n  favoriteMode: string\n  totalCardsStudied: number\n  streakDays: number\n  weeklyProgress: number\n  sessionsThisWeek: number\n  sessionsThisMonth: number\n}\n\nexport function useFlashcardDashboardStats() {\n  const practiceHistory = ref<PracticeHistoryItem[]>([])\n  const isLoading = ref(true)\n\n  // Load practice history from localStorage\n  const loadPracticeHistory = () => {\n    try {\n      const saved = localStorage.getItem('flashcard-practice-history')\n      if (saved) {\n        const parsed: PracticeHistoryItem[] = JSON.parse(saved)\n        practiceHistory.value = parsed\n      }\n    } catch (error) {\n      console.error('Error loading flashcard practice history:', error)\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  // Calculate streak days (consecutive days with practice)\n  const getStreakDays = (): number => {\n    if (practiceHistory.value.length === 0) return 0\n\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    \n    // Get unique practice dates sorted descending\n    const practiceDates = [...new Set(\n      practiceHistory.value.map(item => {\n        const date = new Date(item.date)\n        date.setHours(0, 0, 0, 0)\n        return date.getTime()\n      })\n    )].sort((a, b) => b - a)\n\n    if (practiceDates.length === 0) return 0\n\n    // Check if practiced today or yesterday\n    const mostRecentDate = new Date(practiceDates[0])\n    const daysDiff = Math.floor((today.getTime() - mostRecentDate.getTime()) / (1000 * 60 * 60 * 24))\n    \n    if (daysDiff > 1) return 0 // Break in streak\n\n    let streak = 0\n    let expectedDate = today.getTime()\n\n    for (const practiceDate of practiceDates) {\n      const date = new Date(practiceDate)\n      if (date.getTime() === expectedDate) {\n        streak++\n        expectedDate -= 24 * 60 * 60 * 1000 // Previous day\n      } else if (date.getTime() === expectedDate + 24 * 60 * 60 * 1000 && streak === 0) {\n        // Allow for practicing yesterday if we haven't practiced today yet\n        streak++\n        expectedDate -= 24 * 60 * 60 * 1000\n      } else {\n        break // Streak broken\n      }\n    }\n\n    return streak\n  }\n\n  // Get sessions from last 7 days\n  const getWeeklyProgress = (): { sessionsThisWeek: number; weeklyProgress: number } => {\n    const now = new Date()\n    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\n    \n    const thisWeekSessions = practiceHistory.value.filter(item => {\n      const itemDate = new Date(item.date)\n      return itemDate >= weekAgo && itemDate <= now\n    })\n\n    // Calculate weekly progress (sessions completed vs target of 7)\n    const weeklyProgress = Math.min(Math.round((thisWeekSessions.length / 7) * 100), 100)\n\n    return {\n      sessionsThisWeek: thisWeekSessions.length,\n      weeklyProgress\n    }\n  }\n\n  // Get sessions from last 30 days\n  const getSessionsThisMonth = (): number => {\n    const now = new Date()\n    const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)\n    \n    return practiceHistory.value.filter(item => {\n      const itemDate = new Date(item.date)\n      return itemDate >= monthAgo && itemDate <= now\n    }).length\n  }\n\n  // Get most used mode\n  const getFavoriteMode = (): string => {\n    if (practiceHistory.value.length === 0) return ''\n\n    const modeCount = practiceHistory.value.reduce((acc, item) => {\n      acc[item.mode] = (acc[item.mode] || 0) + 1\n      return acc\n    }, {} as Record<string, number>)\n\n    return Object.entries(modeCount)\n      .sort(([, a], [, b]) => b - a)[0]?.[0] || ''\n  }\n\n  // Main computed stats\n  const stats = computed((): FlashcardDashboardStats => {\n    if (isLoading.value || practiceHistory.value.length === 0) {\n      return {\n        totalSessions: 0,\n        totalPracticeTime: 0,\n        averageAccuracy: 0,\n        bestScore: 0,\n        favoriteMode: '',\n        totalCardsStudied: 0,\n        streakDays: 0,\n        weeklyProgress: 0,\n        sessionsThisWeek: 0,\n        sessionsThisMonth: 0\n      }\n    }\n\n    const totalSessions = practiceHistory.value.length\n    const totalPracticeTime = practiceHistory.value.reduce((sum, item) => sum + item.duration, 0)\n    const averageAccuracy = Math.round(\n      practiceHistory.value.reduce((sum, item) => sum + item.accuracy, 0) / totalSessions\n    )\n    const bestScore = Math.max(...practiceHistory.value.map(item => item.score))\n    const totalCardsStudied = practiceHistory.value.reduce((sum, item) => sum + item.totalCards, 0)\n    \n    const favoriteMode = getFavoriteMode()\n    const streakDays = getStreakDays()\n    const { sessionsThisWeek, weeklyProgress } = getWeeklyProgress()\n    const sessionsThisMonth = getSessionsThisMonth()\n\n    return {\n      totalSessions,\n      totalPracticeTime: Math.round(totalPracticeTime / 60), // Convert to minutes\n      averageAccuracy,\n      bestScore,\n      favoriteMode,\n      totalCardsStudied,\n      streakDays,\n      weeklyProgress,\n      sessionsThisWeek,\n      sessionsThisMonth\n    }\n  })\n\n  // Get formatted stats for display\n  const getFormattedStats = computed(() => {\n    const currentStats = stats.value\n    \n    return {\n      ...currentStats,\n      totalPracticeTimeFormatted: formatDuration(currentStats.totalPracticeTime),\n      favoriteModeFormatted: formatMode(currentStats.favoriteMode),\n      accuracyLevel: getAccuracyLevel(currentStats.averageAccuracy),\n      streakLevel: getStreakLevel(currentStats.streakDays),\n      progressLevel: getProgressLevel(currentStats.weeklyProgress)\n    }\n  })\n\n  // Helper formatting functions\n  const formatDuration = (minutes: number): string => {\n    if (minutes < 60) {\n      return `${minutes}m`\n    }\n    const hours = Math.floor(minutes / 60)\n    const remainingMinutes = minutes % 60\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`\n  }\n\n  const formatMode = (mode: string): string => {\n    const modeNames: Record<string, string> = {\n      'flashcard': 'Flashcard',\n      'quiz': 'Quiz',\n      'typing': 'Typing',\n      'listening': 'Listening',\n      'image': 'Image',\n      'pictionary': 'Pictionary',\n      'pronunciation': 'Pronunciation',\n      'bubble-shooter': 'Bubble Shooter',\n      'snake-game': 'Snake Hunt'\n    }\n    return modeNames[mode] || mode\n  }\n\n  const getAccuracyLevel = (accuracy: number): { level: string; color: string } => {\n    if (accuracy >= 90) return { level: 'Excellent', color: 'text-green-600 dark:text-green-400' }\n    if (accuracy >= 80) return { level: 'Good', color: 'text-blue-600 dark:text-blue-400' }\n    if (accuracy >= 70) return { level: 'Fair', color: 'text-yellow-600 dark:text-yellow-400' }\n    if (accuracy >= 60) return { level: 'Average', color: 'text-orange-600 dark:text-orange-400' }\n    return { level: 'Needs Work', color: 'text-red-600 dark:text-red-400' }\n  }\n\n  const getStreakLevel = (days: number): { level: string; color: string } => {\n    if (days >= 30) return { level: 'Amazing', color: 'text-purple-600 dark:text-purple-400' }\n    if (days >= 14) return { level: 'Great', color: 'text-green-600 dark:text-green-400' }\n    if (days >= 7) return { level: 'Good', color: 'text-blue-600 dark:text-blue-400' }\n    if (days >= 3) return { level: 'Building', color: 'text-yellow-600 dark:text-yellow-400' }\n    if (days >= 1) return { level: 'Started', color: 'text-orange-600 dark:text-orange-400' }\n    return { level: 'None', color: 'text-gray-600 dark:text-gray-400' }\n  }\n\n  const getProgressLevel = (progress: number): { level: string; color: string } => {\n    if (progress >= 90) return { level: 'Outstanding', color: 'text-green-600 dark:text-green-400' }\n    if (progress >= 70) return { level: 'Strong', color: 'text-blue-600 dark:text-blue-400' }\n    if (progress >= 50) return { level: 'Moderate', color: 'text-yellow-600 dark:text-yellow-400' }\n    if (progress >= 30) return { level: 'Light', color: 'text-orange-600 dark:text-orange-400' }\n    return { level: 'Minimal', color: 'text-red-600 dark:text-red-400' }\n  }\n\n  // Refresh stats\n  const refreshStats = () => {\n    loadPracticeHistory()\n  }\n\n  onMounted(() => {\n    loadPracticeHistory()\n  })\n\n  return {\n    stats,\n    getFormattedStats,\n    isLoading,\n    refreshStats\n  }\n}\n","<template>\n  <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-105 hover:-translate-y-2 h-full min-h-[420px] flex flex-col\">\n    <div class=\"px-6 py-8 sm:p-8 flex-1 flex flex-col\">\n      <!-- Header with title and icon -->\n      <div class=\"flex items-center mb-6\">\n        <div class=\"animate-pulse-slow\">\n          <div class=\"w-3 h-3 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full mr-3\"></div>\n        </div>\n        <h3 class=\"text-lg sm:text-xl md:text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400 bg-clip-text text-transparent\">\n          {{ t('dashboard.flashcardStats.title', 'Flashcard Practice') }}\n        </h3>\n      </div>\n\n      <!-- Loading state -->\n      <div v-if=\"isLoading\" class=\"flex-1 flex items-center justify-center\">\n        <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500\"></div>\n      </div>\n\n      <!-- No data state -->\n      <div v-else-if=\"stats.totalSessions === 0\" class=\"flex-1 flex flex-col items-center justify-center text-center space-y-4\">\n        <div class=\"w-16 h-16 bg-gradient-to-br from-purple-100 to-pink-100 dark:bg-gradient-to-br dark:from-purple-900/30 dark:to-pink-900/30 rounded-full flex items-center justify-center\">\n          <svg class=\"w-8 h-8 text-purple-500 dark:text-purple-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"/>\n          </svg>\n        </div>\n        <div>\n          <p class=\"text-sm font-medium text-gray-600 dark:text-gray-300\">\n            {{ t('dashboard.flashcardStats.noData', 'No practice sessions yet') }}\n          </p>\n          <p class=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            {{ t('dashboard.flashcardStats.startPracticing', 'Start practicing to see your stats!') }}\n          </p>\n        </div>\n      </div>\n\n      <!-- Stats content -->\n      <div v-else class=\"space-y-6 flex-1\">\n        <!-- Key metrics grid -->\n        <div class=\"grid grid-cols-2 gap-4\">\n          <!-- Total Sessions -->\n          <div class=\"bg-white/50 dark:bg-white/5 rounded-xl p-4 group/stat hover:bg-white/70 dark:hover:bg-white/10 transition-all duration-300\"\n               style=\"animation-delay: 0.1s\">\n            <div class=\"flex items-center justify-between mb-2\">\n              <span class=\"text-xs font-semibold text-purple-600 dark:text-purple-400 uppercase tracking-wide\">\n                {{ t('dashboard.flashcardStats.sessions', 'Sessions') }}\n              </span>\n              <div class=\"w-6 h-6 bg-purple-100 dark:bg-purple-900/50 rounded-lg flex items-center justify-center group-hover/stat:scale-110 transition-transform duration-300\">\n                <svg class=\"w-3 h-3 text-purple-600 dark:text-purple-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                </svg>\n              </div>\n            </div>\n            <p class=\"text-2xl font-bold text-gray-900 dark:text-white counter-animate\">{{ stats.totalSessions }}</p>\n          </div>\n\n          <!-- Current Streak -->\n          <div class=\"bg-white/50 dark:bg-white/5 rounded-xl p-4 group/stat hover:bg-white/70 dark:hover:bg-white/10 transition-all duration-300\"\n               style=\"animation-delay: 0.2s\">\n            <div class=\"flex items-center justify-between mb-2\">\n              <span class=\"text-xs font-semibold text-orange-600 dark:text-orange-400 uppercase tracking-wide\">\n                {{ t('dashboard.flashcardStats.streak', 'Streak') }}\n              </span>\n              <div class=\"w-6 h-6 bg-orange-100 dark:bg-orange-900/50 rounded-lg flex items-center justify-center group-hover/stat:scale-110 transition-transform duration-300\">\n                <svg class=\"w-3 h-3 text-orange-600 dark:text-orange-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z\"/>\n                </svg>\n              </div>\n            </div>\n            <p class=\"text-2xl font-bold text-gray-900 dark:text-white counter-animate\">\n              {{ stats.streakDays }} \n              <span class=\"text-sm font-medium text-gray-600 dark:text-gray-300\">\n                {{ t('dashboard.flashcardStats.days', 'days') }}\n              </span>\n            </p>\n          </div>\n        </div>\n\n        <!-- Accuracy and Score -->\n        <div class=\"grid grid-cols-2 gap-4\">\n          <!-- Average Accuracy -->\n          <div class=\"bg-white/50 dark:bg-white/5 rounded-xl p-4 group/stat hover:bg-white/70 dark:hover:bg-white/10 transition-all duration-300\"\n               style=\"animation-delay: 0.3s\">\n            <div class=\"flex items-center justify-between mb-2\">\n              <span class=\"text-xs font-semibold text-green-600 dark:text-green-400 uppercase tracking-wide\">\n                {{ t('dashboard.flashcardStats.accuracy', 'Accuracy') }}\n              </span>\n              <div class=\"w-6 h-6 bg-green-100 dark:bg-green-900/50 rounded-lg flex items-center justify-center group-hover/stat:scale-110 transition-transform duration-300\">\n                <svg class=\"w-3 h-3 text-green-600 dark:text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                </svg>\n              </div>\n            </div>\n            <div class=\"space-y-1\">\n              <p class=\"text-2xl font-bold text-gray-900 dark:text-white counter-animate\">{{ stats.averageAccuracy }}%</p>\n              <p class=\"text-xs font-medium\" :class=\"formattedStats.accuracyLevel.color\">\n                {{ formattedStats.accuracyLevel.level }}\n              </p>\n            </div>\n          </div>\n\n          <!-- Best Score -->\n          <div class=\"bg-white/50 dark:bg-white/5 rounded-xl p-4 group/stat hover:bg-white/70 dark:hover:bg-white/10 transition-all duration-300\"\n               style=\"animation-delay: 0.4s\">\n            <div class=\"flex items-center justify-between mb-2\">\n              <span class=\"text-xs font-semibold text-blue-600 dark:text-blue-400 uppercase tracking-wide\">\n                {{ t('dashboard.flashcardStats.bestScore', 'Best Score') }}\n              </span>\n              <div class=\"w-6 h-6 bg-blue-100 dark:bg-blue-900/50 rounded-lg flex items-center justify-center group-hover/stat:scale-110 transition-transform duration-300\">\n                <svg class=\"w-3 h-3 text-blue-600 dark:text-blue-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"/>\n                </svg>\n              </div>\n            </div>\n            <p class=\"text-2xl font-bold text-gray-900 dark:text-white counter-animate\">{{ stats.bestScore }}</p>\n          </div>\n        </div>\n\n        <!-- Additional stats -->\n        <div class=\"space-y-3\">\n          <!-- Practice Time -->\n          <div class=\"group/activity flex items-center space-x-4 p-3 rounded-xl hover:bg-white/50 dark:hover:bg-white/5 transition-all duration-300\"\n               style=\"animation-delay: 0.5s\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center transform group-hover/activity:rotate-12 group-hover/activity:scale-110 transition-all duration-300\">\n                <svg class=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                </svg>\n              </div>\n            </div>\n            <div class=\"flex-1 min-w-0\">\n              <p class=\"text-xs sm:text-sm font-semibold text-gray-900 dark:text-white\">\n                {{ t('dashboard.flashcardStats.totalTime', 'Total Practice Time') }}\n              </p>\n              <p class=\"text-xs text-purple-600 dark:text-purple-400 font-medium\">{{ formattedStats.totalPracticeTimeFormatted }}</p>\n            </div>\n          </div>\n\n          <!-- Cards Studied -->\n          <div class=\"group/activity flex items-center space-x-4 p-3 rounded-xl hover:bg-white/50 dark:hover:bg-white/5 transition-all duration-300\"\n               style=\"animation-delay: 0.6s\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-8 h-8 bg-gradient-to-br from-pink-500 to-red-500 rounded-lg flex items-center justify-center transform group-hover/activity:rotate-12 group-hover/activity:scale-110 transition-all duration-300\">\n                <svg class=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z\"/>\n                </svg>\n              </div>\n            </div>\n            <div class=\"flex-1 min-w-0\">\n              <p class=\"text-xs sm:text-sm font-semibold text-gray-900 dark:text-white\">\n                {{ t('dashboard.flashcardStats.cardsStudied', 'Cards Studied') }}\n              </p>\n              <p class=\"text-xs text-pink-600 dark:text-pink-400 font-medium\">{{ stats.totalCardsStudied.toLocaleString() }}</p>\n            </div>\n          </div>\n\n          <!-- Favorite Mode -->\n          <div v-if=\"stats.favoriteMode\" class=\"group/activity flex items-center space-x-4 p-3 rounded-xl hover:bg-white/50 dark:hover:bg-white/5 transition-all duration-300\"\n               style=\"animation-delay: 0.7s\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-8 h-8 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-lg flex items-center justify-center transform group-hover/activity:rotate-12 group-hover/activity:scale-110 transition-all duration-300\">\n                <svg class=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"/>\n                </svg>\n              </div>\n            </div>\n            <div class=\"flex-1 min-w-0\">\n              <p class=\"text-xs sm:text-sm font-semibold text-gray-900 dark:text-white\">\n                {{ t('dashboard.flashcardStats.favoriteMode', 'Favorite Mode') }}\n              </p>\n              <p class=\"text-xs text-yellow-600 dark:text-yellow-400 font-medium\">{{ formattedStats.favoriteModeFormatted }}</p>\n            </div>\n          </div>\n        </div>\n\n        <!-- Weekly Progress Bar -->\n        <div class=\"pt-4 border-t border-gray-200 dark:border-white/10\" style=\"animation-delay: 0.8s\">\n          <div class=\"flex items-center justify-between mb-2\">\n            <span class=\"text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wide\">\n              {{ t('dashboard.flashcardStats.weeklyProgress', 'This Week') }}\n            </span>\n            <span class=\"text-xs font-medium\" :class=\"formattedStats.progressLevel.color\">\n              {{ stats.sessionsThisWeek }}/7 {{ t('dashboard.flashcardStats.sessions', 'sessions') }}\n            </span>\n          </div>\n          <div class=\"w-full bg-gray-200 dark:bg-white/10 rounded-full h-2\">\n            <div \n              class=\"bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all duration-1000 animate-progress-slide\" \n              :style=\"{ width: `${stats.weeklyProgress}%` }\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n'\nimport { useFlashcardDashboardStats } from '../composables/useFlashcardDashboardStats'\n\nconst { t } = useI18n()\nconst { stats, getFormattedStats: formattedStats, isLoading } = useFlashcardDashboardStats()\n</script>\n\n<style scoped>\n.counter-animate {\n  animation: counter-animate 0.6s ease-out;\n}\n\n.animate-progress-slide {\n  animation: progress-slide 1.5s ease-out;\n}\n\n@keyframes counter-animate {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes progress-slide {\n  from {\n    width: 0%;\n  }\n  to {\n    width: var(--target-width);\n  }\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes pulse-slow {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-fade-in-up {\n  animation: fade-in-up 0.6s ease-out forwards;\n}\n\n@keyframes fade-in-up {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n</style>\n"],"names":["_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_unref","_normalizeStyle"],"mappings":"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"}