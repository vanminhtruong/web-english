{"version":3,"mappings":"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","names":["_createElementBlock","_createElementVNode","_toDisplayString","_unref","currentCard","typingQuizEnabled","_openBlock","typingAnswer","typingAnswered","_Fragment","_renderList","typingQuizOptions","typingQuizAnswered","typingCorrect","_createTextVNode","_createVNode"],"ignoreList":[],"sources":["../../src/views/practice/components/FlashcardTyping.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-800 p-8 h-96 select-none\"\r\n    @copy.prevent\r\n    @cut.prevent\r\n    @contextmenu.prevent\r\n  >\r\n    <div class=\"h-full flex flex-col\">\r\n      <!-- Header -->\r\n      <div class=\"text-center mb-6\">\r\n        <span class=\"px-4 py-2 bg-purple-100 dark:bg-gray-800 text-purple-800 dark:text-purple-300 text-sm font-medium rounded-full\">\r\n          {{ getTopicName(currentCard.category) }}\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Question -->\r\n      <div class=\"text-center mb-8\">\r\n        <h2 class=\"text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">{{ getShortMeaning(currentCard.meaning) }}</h2>\r\n        <p v-if=\"!typingQuizEnabled\" class=\"text-base sm:text-lg md:text-xl text-gray-600 dark:text-gray-300\">{{ t('flashcard.typing.instruction', 'Type the corresponding English word:') }}</p>\r\n        <p v-else class=\"text-base sm:text-lg md:text-xl text-gray-600 dark:text-gray-300\">{{ t('flashcard.typing.instructionQuiz', 'Choose the correct English word:') }}</p>\r\n      </div>\r\n\r\n      <!-- Input Area -->\r\n      <div class=\"flex-1 flex flex-col justify-center\">\r\n        <div v-if=\"!typingQuizEnabled\" class=\"max-w-lg mx-auto w-full\">\r\n          <div class=\"relative\">\r\n            <input\r\n              ref=\"typingInput\"\r\n              :value=\"typingAnswer\"\r\n              @input=\"handleInput\"\r\n              @keyup.enter=\"handleCheckAnswer\"\r\n              type=\"text\"\r\n              :disabled=\"typingAnswered\"\r\n              class=\"w-full p-3 text-center text-xl sm:text-2xl md:text-3xl border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all duration-200 disabled:bg-gray-100 dark:disabled:bg-gray-700 select-text\"\r\n              :placeholder=\"t('flashcard.typing.placeholder', 'Type the word...')\"\r\n              inputmode=\"text\"\r\n              autocomplete=\"off\"\r\n              autocapitalize=\"none\"\r\n              spellcheck=\"false\"\r\n              @blur=\"onTypingBlur\"\r\n            />\r\n            \r\n            <!-- Result indicator -->\r\n            <div v-if=\"typingAnswered\" class=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\r\n              <span v-if=\"typingAnswer.toLowerCase().trim() === currentCard.word.toLowerCase()\" class=\"text-green-500\">\r\n                <svg class=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\"/>\r\n                </svg>\r\n              </span>\r\n              <span v-else class=\"text-red-500\">\r\n                <svg class=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"/>\r\n                </svg>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Correct answer display -->\r\n          <div v-if=\"typingAnswered && typingAnswer.toLowerCase().trim() !== currentCard.word.toLowerCase()\" class=\"mt-4 text-center\">\r\n            <p class=\"text-gray-600 dark:text-gray-400 text-sm\">{{ t('flashcard.typing.correctAnswer', 'Correct answer:') }}</p>\r\n            <p class=\"text-lg sm:text-xl md:text-2xl font-bold text-green-600 dark:text-green-400\">{{ currentCard.word }}</p>\r\n          </div>\r\n        </div>\r\n        <div v-else class=\"w-full px-2 sm:px-3 md:px-0\">\r\n          <div class=\"grid grid-cols-1 sm:grid-cols-2 gap-1.5 sm:gap-2 justify-items-stretch w-full\">\r\n            <button\r\n              v-for=\"(opt, idx) in typingQuizOptions\"\r\n              :key=\"idx\"\r\n              @click=\"onSelectTypingOption(opt)\"\r\n              :disabled=\"typingQuizAnswered\"\r\n              translate=\"no\"\r\n              class=\"notranslate px-3 py-1.5 sm:py-2 rounded-md border text-[13px] sm:text-sm transition-all duration-150 disabled:opacity-70 disabled:cursor-not-allowed text-left flex items-center gap-2 w-full min-w-0\"\r\n              :class=\"[\r\n                typingQuizAnswered\r\n                  ? (isOptionCorrect(opt)\r\n                      ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300 border-green-300 dark:border-green-700'\r\n                      : isOptionSelected(opt)\r\n                        ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300 border-red-300 dark:border-red-700'\r\n                        : 'bg-white dark:bg-gray-custom text-gray-900 dark:text-white border-gray-300 dark:border-gray-custom/60')\r\n                  : 'bg-white dark:bg-gray-custom text-gray-900 dark:text-white border-gray-300 dark:border-gray-custom/60 hover:shadow-sm hover:scale-[1.01] dark:hover:bg-white/5'\r\n              ]\"\r\n            >\r\n              <span class=\"inline-flex items-center justify-center w-5 h-5 rounded-full text-xs font-semibold bg-gray-200 text-gray-700 dark:bg-white/10 dark:text-white/80 shrink-0\">\r\n                {{ String.fromCharCode(65 + idx) }}\r\n              </span>\r\n              <span class=\"truncate overflow-hidden min-w-0\">{{ opt }}</span>\r\n            </button>\r\n          </div>\r\n          <div v-if=\"typingAnswered\" class=\"mt-3 sm:mt-4 text-center px-2\">\r\n            <p v-if=\"typingCorrect\" class=\"text-green-600 dark:text-green-400 font-medium text-sm sm:text-base\">{{ t('flashcard.typing.correct', '✓ Correct!') }}</p>\r\n            <p v-else class=\"text-red-600 dark:text-red-400 font-medium text-sm sm:text-base break-words\">{{ t('flashcard.typing.incorrect', '✗ Correct answer:') }} <span class=\"font-bold\">{{ currentCard.word }}</span></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Submit button -->\r\n      <div class=\"text-center mt-6\">\r\n        <button\r\n          v-if=\"!typingAnswered && !typingQuizEnabled\"\r\n          @click=\"handleCheckAnswer\"\r\n          :disabled=\"!typingAnswer.trim()\"\r\n          class=\"bg-purple-500 hover:bg-purple-600 disabled:bg-gray-300 dark:disabled:bg-gray-700 text-white px-8 py-3 rounded-full font-medium transition-colors\"\r\n        >\r\n          {{ t('common.check', 'Check') }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Firework Sound Effect -->\r\n    <FireworkSoundEffect \r\n      ref=\"fireworkEffect\"\r\n      :trigger-firework=\"triggerFirework\"\r\n      :trigger-sound=\"triggerSound\"\r\n      :is-correct=\"isCorrectAnswer\"\r\n      @effect-complete=\"resetTriggers\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch, defineAsyncComponent, onMounted, nextTick } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { getTopicName } from '../../../utils/topicUtils'\r\n\r\n// Import component using defineAsyncComponent to avoid \"has no default export\" error\r\nconst FireworkSoundEffect = defineAsyncComponent(() => import('./FireworkSoundEffect.vue'))\r\n\r\nconst { t } = useI18n()\r\n\r\n// Effect triggers\r\nconst triggerFirework = ref(false)\r\nconst triggerSound = ref(false)\r\nconst isCorrectAnswer = ref(false)\r\nconst fireworkEffect = ref()\r\n\r\ninterface FlashcardData {\r\n  word: string\r\n  meaning: string\r\n  pronunciation: string\r\n  category: string\r\n  partOfSpeech?: string\r\n  example?: string\r\n}\r\n\r\ninterface Props {\r\n  currentCard: FlashcardData\r\n  typingAnswer: string\r\n  typingAnswered: boolean\r\n  typingCorrect?: boolean\r\n  typingQuizEnabled?: boolean\r\n  typingQuizOptions?: string[]\r\n  typingQuizSelected?: string\r\n  typingQuizAnswered?: boolean\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst emit = defineEmits<{\r\n  'update:typingAnswer': [value: string]\r\n  'check-answer': []\r\n  'select-typing-quiz-answer': [answer: string]\r\n}>()\r\n\r\n// Remove Vietnamese diacritics so input is saved without accents\r\n// Special-case: map all forms of 'ư' to 'w' so Unikey 'w' is preserved\r\nconst stripDiacritics = (s: string) => s\r\n  // map ư-variants to w, before normalization removes marks\r\n  .replace(/[ưừứửữự]/g, 'w')\r\n  .replace(/[ƯỪỨỬỮỰ]/g, 'W')\r\n  .normalize('NFD')\r\n  .replace(/[\\u0300-\\u036f]/g, '')\r\n  .replace(/đ/g, 'd')\r\n  .replace(/Đ/g, 'D')\r\n\r\nconst handleInput = (event: Event) => {\r\n  const target = event.target as HTMLInputElement\r\n  const sanitized = stripDiacritics(target.value)\r\n  if (sanitized !== target.value) {\r\n    target.value = sanitized\r\n  }\r\n  emit('update:typingAnswer', sanitized)\r\n}\r\n\r\nconst getShortMeaning = (meaning: string) => {\r\n  return meaning.split(' - ')[0].trim()\r\n}\r\n\r\n// Handle check answer with effects\r\nconst handleCheckAnswer = () => {\r\n  if (props.typingAnswered) return\r\n  \r\n  // Emit the check answer first\r\n  emit('check-answer')\r\n  \r\n  // Wait a bit for the answer to be processed, then trigger effects\r\n  setTimeout(() => {\r\n    // Determine if answer is correct\r\n    isCorrectAnswer.value = props.typingAnswer.toLowerCase().trim() === props.currentCard.word.toLowerCase()\r\n    \r\n    // Trigger effects\r\n    triggerFirework.value = true\r\n    triggerSound.value = true\r\n  }, 100)\r\n}\r\n\r\n// Reset effect triggers\r\nconst resetTriggers = () => {\r\n  triggerFirework.value = false\r\n  triggerSound.value = false\r\n}\r\n\r\n// Watch for typingAnswered changes to trigger effects after parent updates\r\nwatch(() => props.typingAnswered, (newValue) => {\r\n  if (newValue && !triggerFirework.value) {\r\n    // Use typingCorrect from props (set by parent) to ensure consistency\r\n    if (typeof props.typingCorrect === 'boolean') {\r\n      isCorrectAnswer.value = props.typingCorrect\r\n    } else {\r\n      // Fallback compare for legacy input flow\r\n      isCorrectAnswer.value = props.typingAnswer.toLowerCase().trim() === props.currentCard.word.toLowerCase()\r\n    }\r\n\r\n    setTimeout(() => {\r\n      triggerFirework.value = true\r\n      triggerSound.value = true\r\n    }, 50)\r\n  }\r\n})\r\n\r\n// Helpers for options UI\r\nconst onSelectTypingOption = (opt: string) => {\r\n  if (!props.typingQuizAnswered) emit('select-typing-quiz-answer', opt)\r\n}\r\nconst isOptionSelected = (opt: string) => props.typingQuizSelected === opt\r\nconst isOptionCorrect = (opt: string) => opt.trim().toLowerCase() === props.currentCard.word.trim().toLowerCase()\r\n\r\n// ---------------- Auto-focus typing input (variant OFF) ----------------\r\nconst typingInput = ref<HTMLInputElement | null>(null)\r\n\r\nconst focusTypingInput = async () => {\r\n  await nextTick()\r\n  try {\r\n    typingInput.value?.focus({ preventScroll: true })\r\n  } catch {\r\n    typingInput.value?.focus()\r\n  }\r\n}\r\n\r\nconst ensureTypingFocus = () => {\r\n  if (!props.typingQuizEnabled && !props.typingAnswered) {\r\n    if (document.activeElement !== typingInput.value) {\r\n      focusTypingInput()\r\n    }\r\n  }\r\n}\r\n\r\nconst onTypingBlur = () => {\r\n  // Refocus if still eligible\r\n  ensureTypingFocus()\r\n}\r\n\r\nonMounted(() => {\r\n  ensureTypingFocus()\r\n})\r\n\r\n// Focus when toggling back to typing mode\r\nwatch(() => props.typingQuizEnabled, (val) => {\r\n  if (!val) ensureTypingFocus()\r\n})\r\n\r\n// Focus when answer resets (e.g., next card)\r\nwatch(() => props.typingAnswered, (answered) => {\r\n  if (!answered) ensureTypingFocus()\r\n})\r\n\r\n// Focus on card change\r\nwatch(() => props.currentCard, () => {\r\n  ensureTypingFocus()\r\n})\r\n</script>\r\n"],"file":"assets/FlashcardTyping-DNw9Inc9.js"}