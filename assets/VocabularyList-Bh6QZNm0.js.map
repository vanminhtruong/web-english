{"version":3,"mappings":"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","names":["_createElementBlock","_createElementVNode","_toDisplayString","_unref","totalCount","_openBlock","_Fragment","_renderList","_createTextVNode","useGrouping","_createBlock","hoverToExpandEnabled","globalMoveMode","$emit","_normalizeClass","paginatedWords","currentPage","totalPages","startIndex","endIndex","visiblePages"],"ignoreList":[],"sources":["../../src/views/vocabulary/components/VocabularyList.vue"],"sourcesContent":["<template>\n  <div \n    class=\"bg-white dark:bg-[#0a0a0a] shadow rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\"\n    @mouseleave=\"handleVocabularyListMouseLeave\"\n    @mouseenter=\"handleVocabularyListMouseEnter\"\n  >\n    <div class=\"px-3 py-3 sm:px-4 sm:py-4 md:px-6 md:py-4 border-b border-gray-200 dark:border-gray-700\">\n      <div class=\"flex items-center justify-between\">\n        <h3 class=\"text-base sm:text-lg font-semibold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent\">\n          {{ t('vocabulary.vocabularyList', 'Vocabulary List') }} ({{ totalCount }})\n        </h3>\n        <!-- Info tooltip for missing images by date/category -->\n        <div \n          class=\"relative ml-2 select-none\"\n          aria-hidden=\"false\"\n          @mouseenter=\"handleMissingTooltipEnter\"\n          @mouseleave=\"handleMissingTooltipLeave\"\n        >\n          <button\n            type=\"button\"\n            class=\"inline-flex items-center justify-center w-6 h-6 sm:w-7 sm:h-7 rounded-full border border-blue-200 text-blue-600 bg-blue-50 hover:bg-blue-100 dark:text-blue-300 dark:bg-dark-bg-soft dark:border-dark-bg-mute dark:hover:bg-dark-bg-mute transition\"\n            :aria-label=\"t('vocabulary.imageInfo.aria', 'Show dates/categories missing images')\"\n          >\n            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"w-4 h-4 sm:w-5 sm:h-5\">\n              <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm.75 15h-1.5v-6h1.5v6zm0-8h-1.5V7h1.5v2z\"/>\n            </svg>\n          </button>\n          <!-- Tooltip Panel -->\n          <div\n            v-if=\"showMissingTooltip\"\n            class=\"transition-opacity duration-150 absolute right-0 mt-2 w-72 sm:w-80 rounded-lg shadow-xl ring-1 ring-black/5 bg-white text-gray-800 p-3 z-30 border border-gray-200 dark:bg-[#0a0a0a] dark:text-white dark:border dark:border-dark-bg-mute\"\n            @mouseenter=\"handleMissingTooltipEnter\"\n            @mouseleave=\"handleMissingTooltipLeave\"\n          >\n            <!-- Mask top border under the arrow to avoid double line -->\n            <div \n              class=\"absolute -top-[2px] right-7 w-4 h-[4px] bg-white dark:bg-[#0a0a0a] pointer-events-none z-10\"\n              aria-hidden=\"true\"\n            />\n            <!-- Arrow pointer (no ring to avoid square edges) -->\n            <div \n              class=\"absolute -top-1.5 right-[29.5px] w-3 h-3 rotate-45 bg-white pointer-events-none z-20 dark:bg-[#0a0a0a] border-t border-l border-gray-200 dark:border-[#0f0f0f]\"\n              aria-hidden=\"true\"\n            />\n            <div class=\"text-sm font-semibold mb-2\">\n              {{ t('vocabulary.imageInfo.title', 'Missing images by date') }}\n            </div>\n            <div v-if=\"missingImagesByDate.length === 0\" class=\"text-sm text-gray-600 dark:text-white/70\">\n              {{ t('vocabulary.imageInfo.none', 'All categories have images for the current list') }}\n            </div>\n            <div v-else class=\"max-h-64 overflow-y-auto space-y-2 pr-1\">\n              <div v-for=\"item in missingImagesByDate\" :key=\"item.date\" class=\"border border-gray-200 rounded-md p-2 dark:border-dark-bg-mute\">\n                <div class=\"text-xs font-medium text-gray-700 mb-1 dark:text-white/80\">\n                  {{ t('vocabulary.imageInfo.date', 'Date') }}: <span class=\"font-semibold\">{{ item.date }}</span>\n                </div>\n                <ul class=\"text-xs pl-0 space-y-0.5\">\n                  <li \n                    v-for=\"cat in item.categories\" \n                    :key=\"cat.key\"\n                    class=\"flex items-center justify-between rounded px-2 py-1 cursor-pointer hover:bg-gray-custom dark:hover:bg-gray-custom\"\n                    @click=\"handleMissingNavigate(item.date, cat.key)\"\n                  >\n                    <div class=\"min-w-0 pr-2\">\n                    <span class=\"font-medium\">{{ t('vocabulary.imageInfo.category', 'Category') }}:</span>\n                      <span class=\"truncate\"> {{ cat.name }}</span>\n                    </div>\n                    <span class=\"text-gray-500 whitespace-nowrap\">{{ t('vocabulary.imageInfo.missingCount', { count: cat.count }) || `${cat.count} without image` }}</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Grouped vocabulary display with accordion -->\n    <div v-if=\"useGrouping && groupedWords.length > 0\">\n      <DateGroupAccordion\n        v-for=\"group in paginatedDateGroups\" \n        :key=\"group.date\"\n        :group=\"group\"\n        :default-expanded=\"false\"\n        :accordion-state=\"accordionState\"\n        :hover-to-expand-enabled=\"hoverToExpandEnabled\"\n        :global-move-mode=\"globalMoveMode\"\n        @play-audio=\"$emit('play-audio', $event)\"\n        @edit-word=\"$emit('edit-word', $event)\"\n        @delete-word=\"$emit('delete-word', $event)\"\n        @toggle-favorite=\"$emit('toggle-favorite', $event)\"\n        @view-details=\"$emit('view-details', $event)\"\n        @date-group-previous=\"$emit('date-group-previous', $event)\"\n        @date-group-next=\"$emit('date-group-next', $event)\"\n        @accordion-toggle=\"handleAccordionToggle\"\n        @note-saved=\"handleNoteSaved\"\n        @open-note-dialog=\"$emit('open-note-dialog', $event.date, $event.words)\"\n        @open-add-vocabulary-dialog=\"$emit('open-add-vocabulary-dialog', $event)\"\n        @open-grammar-manager=\"$emit('open-grammar-manager', $event)\"\n        @move-vocabulary=\"handleMoveVocabulary\"\n        @request-available-dates=\"handleRequestAvailableDates\"\n        @navigate-to-date-topic=\"handleNavigateToDateTopic\"\n        @batch-move-category=\"$emit('batch-move-category', $event)\"\n      />\n      \n      <!-- Date Group Pagination -->\n      <div v-if=\"dateGroupPaginationInfo.totalPages > 1\" class=\"bg-white dark:bg-[#0a0a0a] px-4 py-3 border-t border-gray-200 dark:border-gray-700 sm:px-6\">\n        <div class=\"flex items-center justify-between\">\n          <!-- Mobile pagination -->\n          <div class=\"flex-1 flex justify-between sm:hidden\">\n            <button \n              @click=\"previousDateGroupPage\" \n              :disabled=\"!dateGroupPaginationInfo.hasPrevious\" \n              class=\"relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-[#0a0a0a] hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {{ t('common.previous', 'Previous') }}\n            </button>\n            <button \n              @click=\"nextDateGroupPage\" \n              :disabled=\"!dateGroupPaginationInfo.hasNext\" \n              class=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-[#0a0a0a] hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {{ t('common.next', 'Next') }}\n            </button>\n          </div>\n          \n          <!-- Desktop pagination -->\n          <div class=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n            <div>\n              <p class=\"text-sm text-gray-700 dark:text-gray-300\">\n                {{ t('vocabulary.showingDateGroups', { \n                  start: dateGroupPaginationInfo.startIndex, \n                  end: dateGroupPaginationInfo.endIndex, \n                  total: dateGroupPaginationInfo.totalGroups \n                }, `Showing ${dateGroupPaginationInfo.startIndex} to ${dateGroupPaginationInfo.endIndex} of ${dateGroupPaginationInfo.totalGroups} date groups`) }}\n              </p>\n            </div>\n            <div>\n              <nav class=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\">\n                <!-- Previous button -->\n                <button \n                  @click=\"previousDateGroupPage\" \n                  :disabled=\"!dateGroupPaginationInfo.hasPrevious\" \n                  class=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-[#0a0a0a] text-sm font-medium text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  <span class=\"sr-only\">{{ t('common.previous', 'Previous') }}</span>\n                  <svg class=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\"/>\n                  </svg>\n                </button>\n                \n                <!-- Page numbers -->\n                <button\n                  v-for=\"page in visibleDateGroupPages\"\n                  :key=\"page\"\n                  @click=\"page > 0 ? goToDateGroupPage(page) : null\"\n                  :disabled=\"page === -1\"\n                  :class=\"[\n                    page === dateGroupPaginationInfo.currentPage\n                      ? 'z-10 bg-blue-50 dark:bg-blue-900 border-blue-500 dark:border-blue-400 text-blue-600 dark:text-blue-300'\n                      : page === -1\n                      ? 'bg-white dark:bg-[#0a0a0a] border-gray-300 dark:border-gray-600 text-gray-500 dark:text-gray-400 cursor-default'\n                      : 'bg-white dark:bg-[#0a0a0a] border-gray-300 dark:border-gray-600 text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600',\n                    'relative inline-flex items-center px-4 py-2 border text-sm font-medium'\n                  ]\"\n                >\n                  {{ page === -1 ? '...' : page }}\n                </button>\n                \n                <!-- Next button -->\n                <button \n                  @click=\"nextDateGroupPage\" \n                  :disabled=\"!dateGroupPaginationInfo.hasNext\" \n                  class=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-[#0a0a0a] text-sm font-medium text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  <span class=\"sr-only\">{{ t('common.next', 'Next') }}</span>\n                  <svg class=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\n                  </svg>\n                </button>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Regular list display (when grouping is disabled) -->\n    <div v-else class=\"divide-y divide-gray-200 dark:divide-gray-700\">\n      <VocabularyCard\n        v-for=\"word in paginatedWords\"\n        :key=\"word.id\"\n        :word=\"word\"\n        @play-audio=\"$emit('play-audio', $event)\"\n        @edit-word=\"$emit('edit-word', $event)\"\n        @delete-word=\"$emit('delete-word', $event)\"\n        @toggle-favorite=\"$emit('toggle-favorite', $event)\"\n        @view-details=\"$emit('view-details', $event)\"\n      />\n    </div>\n    \n    <!-- Pagination (hidden when grouping is enabled) -->\n    <div v-if=\"!useGrouping\" class=\"bg-white dark:bg-[#0a0a0a] px-4 py-3 border-t border-gray-200 dark:border-gray-700 sm:px-6\">\n      <div class=\"flex items-center justify-between\">\n        <div class=\"flex-1 flex justify-between sm:hidden\">\n          <button @click=\"$emit('previous-page')\" :disabled=\"currentPage === 1\" class=\"relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-[#0a0a0a] hover:bg-gray-50 dark:hover:bg-gray-600\">\n            {{ t('common.previous', 'Previous') }}\n          </button>\n          <button @click=\"$emit('next-page')\" :disabled=\"currentPage === totalPages\" class=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-[#0a0a0a] hover:bg-gray-50 dark:hover:bg-gray-600\">\n            {{ t('common.next', 'Next') }}\n          </button>\n        </div>\n        <div class=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n          <div>\n            <p class=\"text-sm text-gray-700 dark:text-gray-300\">\n              {{ t('vocabulary.showingResults', { start: startIndex, end: endIndex, total: totalCount }, `Showing ${startIndex} to ${endIndex} of ${totalCount} results`) }}\n            </p>\n          </div>\n          <div>\n            <nav class=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\">\n              <button @click=\"$emit('previous-page')\" :disabled=\"currentPage === 1\" class=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-[#0a0a0a] text-sm font-medium text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\">\n                <span class=\"sr-only\">{{ t('common.previous', 'Previous') }}</span>\n                <svg class=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\"/>\n                </svg>\n              </button>\n              <button \n                v-for=\"page in visiblePages\" \n                :key=\"page\" \n                @click=\"$emit('go-to-page', page)\" \n                :class=\"page === currentPage \n                  ? 'bg-blue-50 dark:bg-blue-900 border-blue-500 dark:border-blue-400 text-blue-600 dark:text-blue-300' \n                  : 'bg-white dark:bg-[#0a0a0a] border-gray-300 dark:border-gray-600 text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600'\" \n                class=\"relative inline-flex items-center px-4 py-2 border text-sm font-medium\"\n              >\n                {{ page }}\n              </button>\n              <button @click=\"$emit('next-page')\" :disabled=\"currentPage === totalPages\" class=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-[#0a0a0a] text-sm font-medium text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\">\n                <span class=\"sr-only\">{{ t('common.next', 'Next') }}</span>\n                <svg class=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\n                </svg>\n              </button>\n            </nav>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, nextTick, defineAsyncComponent } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { loadComponentSafely } from '../../../utils/import-helper'\nimport { groupVocabulariesByDateAndTopic, type GroupedVocabulary } from '../../../utils/dateUtils'\nimport { getTopicName } from '../../../utils/topicUtils'\nimport { useToast } from 'vue-toastification'\n\nconst { t, locale } = useI18n()\nconst toast = useToast()\n// Hover state control for Missing Images tooltip (to prevent flicker)\nconst showMissingTooltip = ref(false)\nlet missingTooltipHideTimer: number | null = null\n\nconst handleMissingTooltipEnter = () => {\n  if (missingTooltipHideTimer) {\n    clearTimeout(missingTooltipHideTimer)\n    missingTooltipHideTimer = null\n  }\n  showMissingTooltip.value = true\n}\n\nconst handleMissingTooltipLeave = () => {\n  // small delay so user can move between button and panel\n  missingTooltipHideTimer = setTimeout(() => {\n    showMissingTooltip.value = false\n    missingTooltipHideTimer = null\n  }, 120)\n}\n\n\n// Sử dụng defineAsyncComponent để import components an toàn\nconst VocabularyCard = defineAsyncComponent(\n  loadComponentSafely(() => import('./VocabularyCard.vue'))\n)\n\nconst DateGroupAccordion = defineAsyncComponent(\n  loadComponentSafely(() => import('./DateGroupAccordion.vue'))\n)\n\n// Accordion state management with localStorage persistence\nconst accordionState = ref<Record<string, boolean>>({})\n\n// Local storage key for accordion state\nconst ACCORDION_STATE_STORAGE_KEY = 'vocabulary-accordion-state'\n// Cross-page open pending key (session scoped)\nconst PENDING_OPEN_KEY = 'open-date-topic-pending'\n\n// Load accordion state from localStorage\nconst getStoredAccordionState = (): Record<string, boolean> => {\n  try {\n    const stored = localStorage.getItem(ACCORDION_STATE_STORAGE_KEY)\n    return stored ? JSON.parse(stored) : {}\n  } catch (error) {\n    console.warn('Failed to load accordion state from localStorage:', error)\n    return {}\n  }\n}\n\n// Save accordion state to localStorage\nconst setStoredAccordionState = (state: Record<string, boolean>) => {\n  try {\n    localStorage.setItem(ACCORDION_STATE_STORAGE_KEY, JSON.stringify(state))\n  } catch (error) {\n    console.warn('Failed to save accordion state to localStorage:', error)\n  }\n}\n\n// Initialize accordion state from localStorage\nonMounted(() => {\n  accordionState.value = getStoredAccordionState()\n})\n\n// Get group topics for save functionality\nconst getGroupTopicsForSave = (): Record<string, string> => {\n  try {\n    const stored = localStorage.getItem('vocabulary-group-topics')\n    return stored ? JSON.parse(stored) : {}\n  } catch (error) {\n    console.warn('Failed to load group topics for save:', error)\n    return {}\n  }\n}\n\n// Restore group topics from loaded data\nconst restoreGroupTopics = (topics: Record<string, string>) => {\n  try {\n    localStorage.setItem('vocabulary-group-topics', JSON.stringify(topics))\n  } catch (error) {\n    console.warn('Failed to restore group topics:', error)\n  }\n}\n\nimport type { Vocabulary } from '../../../composables/useVocabularyStore'\n\ntype Word = Vocabulary & { categoryName?: string }\n\ninterface Props {\n  paginatedWords: Word[]\n  currentPage: number\n  totalPages: number\n  totalCount: number\n  startIndex: number\n  endIndex: number\n  visiblePages: number[]\n  useGrouping?: boolean\n  allWords?: Word[] // Used for grouping when pagination is disabled\n  dateGroupPages?: Record<string, number>\n  itemsPerPageGrouped?: number\n  hoverToExpandEnabled?: boolean\n  globalMoveMode?: boolean\n  recentlyAddedCategory?: string | null // Category to show at the top\n}\n\nconst props = defineProps<Props>()\n\n// Tooltip data: group words missing images by date and category\nconst missingImagesByDate = computed(() => {\n  // Decide source words\n  const source: Word[] = (props.useGrouping ? (props.allWords || []) : (props.paginatedWords || []))\n  if (!Array.isArray(source) || source.length === 0) return [] as Array<{ date: string; categories: { key: string; name: string; count: number }[] }>\n\n  // Helper to normalize date to yyyy-mm-dd\n  const normalizeDate = (d?: string) => {\n    if (!d) return 'Unknown'\n    const dt = new Date(d)\n    return isNaN(dt.getTime()) ? 'Unknown' : dt.toISOString().slice(0, 10)\n  }\n\n  // Build map: date -> topicKey -> { name, count }\n  const map = new Map<string, Map<string, { name: string; count: number }>>()\n  for (const w of source) {\n    const img = (w.image ?? '').trim()\n    if (img) continue // has image\n    const dateKey = normalizeDate(w.createdAt)\n    // Prefer human-readable categoryName if available (imported data), otherwise translate built-in key\n    const catKey = w.category || 'uncategorized'\n    // Resolve display name via categoryName -> built-in translation\n    const displayName = (w as any).categoryName || getTopicName(catKey, w)\n\n    if (!map.has(dateKey)) map.set(dateKey, new Map<string, { name: string; count: number }>())\n    const catMap = map.get(dateKey)!\n    const prev = catMap.get(catKey) || { name: displayName, count: 0 }\n    prev.count += 1\n    // Keep the first non-empty name\n    if (!prev.name && displayName) {\n      prev.name = displayName\n    }\n    catMap.set(catKey, prev)\n  }\n\n  // Convert to sorted array by date desc (Unknown last)\n  const result: { date: string; categories: { key: string; name: string; count: number }[] }[] = []\n  for (const [date, catMap] of map.entries()) {\n    const categories = Array.from(catMap.entries()).map(([key, value]) => ({ key, name: value.name, count: value.count }))\n    result.push({ date, categories })\n  }\n\n  result.sort((a, b) => {\n    if (a.date === 'Unknown') return 1\n    if (b.date === 'Unknown') return -1\n    return new Date(b.date).getTime() - new Date(a.date).getTime()\n  })\n\n  return result\n})\n\n// Date group pagination state\nconst dateGroupCurrentPage = ref(1)\nconst dateGroupsPerPage = 7\n\n// Computed for grouped words with pagination\nconst groupedWords = computed((): GroupedVocabulary[] => {\n  if (!props.useGrouping) return []\n\n  // Use allWords for grouping if provided, otherwise use paginatedWords\n  const wordsToGroup = props.allWords || props.paginatedWords\n  let allGroups = groupVocabulariesByDateAndTopic(wordsToGroup, locale.value, t)\n\n  // Sort topics to put recently added category at the top\n  if (props.recentlyAddedCategory) {\n    allGroups = allGroups.map(group => {\n      if (!group.topics) return group\n      \n      // Find the recently added category in topics\n      const recentCategoryIndex = group.topics.findIndex(\n        topic => topic.topic === props.recentlyAddedCategory\n      )\n      \n      // If found, move it to the beginning\n      if (recentCategoryIndex > -1) {\n        const sortedTopics = [...group.topics]\n        const [recentCategory] = sortedTopics.splice(recentCategoryIndex, 1)\n        sortedTopics.unshift(recentCategory)\n        \n        return {\n          ...group,\n          topics: sortedTopics\n        }\n      }\n      \n      return group\n    })\n  }\n\n  // Phân trang theo số lượng topic group (categories) cho mỗi group date\n  if (props.dateGroupPages && props.itemsPerPageGrouped) {\n    return allGroups.map(group => {\n      const currentPage = props.dateGroupPages![group.date] || 1\n      const itemsPerPage = props.itemsPerPageGrouped!\n      const totalTopics = group.topics ? group.topics.length : 0\n      const startIndex = (currentPage - 1) * itemsPerPage\n      const endIndex = startIndex + itemsPerPage\n      return {\n        ...group,\n        topics: group.topics ? group.topics.slice(startIndex, endIndex) : [],\n        currentPage,\n        totalPages: Math.ceil(totalTopics / itemsPerPage),\n        topicsTotal: totalTopics,\n        totalItems: group.vocabularies.length, // giữ lại số lượng từ vựng gốc\n      }\n    })\n  }\n\n  return allGroups\n})\n\n// Computed for paginated date groups (7 groups per page)\nconst paginatedDateGroups = computed(() => {\n  if (!props.useGrouping) return []\n  \n  const allGroups = groupedWords.value\n  const startIndex = (dateGroupCurrentPage.value - 1) * dateGroupsPerPage\n  const endIndex = startIndex + dateGroupsPerPage\n  \n  return allGroups.slice(startIndex, endIndex)\n})\n\n// Computed for date group pagination info\nconst dateGroupPaginationInfo = computed(() => {\n  const totalGroups = groupedWords.value.length\n  const totalPages = Math.ceil(totalGroups / dateGroupsPerPage)\n  const startIndex = (dateGroupCurrentPage.value - 1) * dateGroupsPerPage + 1\n  const endIndex = Math.min(startIndex + dateGroupsPerPage - 1, totalGroups)\n  \n  return {\n    totalGroups,\n    totalPages,\n    currentPage: dateGroupCurrentPage.value,\n    startIndex,\n    endIndex,\n    hasNext: dateGroupCurrentPage.value < totalPages,\n    hasPrevious: dateGroupCurrentPage.value > 1\n  }\n})\n\n// Date group pagination functions\nconst goToDateGroupPage = (page: number) => {\n  if (page >= 1 && page <= dateGroupPaginationInfo.value.totalPages) {\n    dateGroupCurrentPage.value = page\n  }\n}\n\nconst nextDateGroupPage = () => {\n  if (dateGroupPaginationInfo.value.hasNext) {\n    dateGroupCurrentPage.value++\n  }\n}\n\nconst previousDateGroupPage = () => {\n  if (dateGroupPaginationInfo.value.hasPrevious) {\n    dateGroupCurrentPage.value--\n  }\n}\n\n// Generate visible page numbers for date group pagination (simple windowed pagination)\nconst visibleDateGroupPages = computed(() => {\n  const totalPages = dateGroupPaginationInfo.value.totalPages\n  const currentPage = dateGroupCurrentPage.value\n\n  if (totalPages <= 0) return []\n\n  const pages: number[] = []\n  const maxVisible = 5\n  let start = Math.max(1, currentPage - Math.floor(maxVisible / 2))\n  let end = Math.min(totalPages, start + maxVisible - 1)\n  start = Math.max(1, end - maxVisible + 1)\n\n  for (let i = start; i <= end; i++) {\n    pages.push(i)\n  }\n  return pages\n})\n\n// Handle accordion toggle with localStorage persistence\nconst handleAccordionToggle = (date: string, expanded: boolean) => {\n  accordionState.value[date] = expanded\n  // Save updated state to localStorage\n  setStoredAccordionState(accordionState.value)\n  console.log(`Accordion for ${date} toggled to:`, expanded)\n}\n\n// Handle note saved event\nconst handleNoteSaved = (date: string, note: string, markedWords: string[]) => {\n  toast.success(t('vocabulary.notes.saveSuccess', 'Notes saved successfully'), {\n    timeout: 2000,\n  });\n  \n  // Check if auto-save is enabled\n  const autoSaveEnabled = localStorage.getItem('vocabulary-auto-save-enabled');\n  if (autoSaveEnabled === 'true') {\n    toast.info(t('vocabulary.notes.autoSaveNotice', 'Notes will be included in auto-save'), {\n      timeout: 3000,\n    });\n  }\n  \n  // You can emit an event to the parent component if needed\n  console.log(`Note saved for ${date} with ${markedWords.length} marked words`);\n};\n\n// Handle mouse leave from entire vocabulary list\nconst handleVocabularyListMouseLeave = () => {\n  if (props.hoverToExpandEnabled) {\n    // Emit event to close all expanded topics when mouse leaves vocabulary area\n    window.dispatchEvent(new CustomEvent('vocabulary-list-mouse-leave'))\n  }\n}\n\n// Handle mouse enter to vocabulary list\nconst handleVocabularyListMouseEnter = () => {\n  if (props.hoverToExpandEnabled) {\n    // Emit event when mouse enters vocabulary area\n    window.dispatchEvent(new CustomEvent('vocabulary-list-mouse-enter'))\n  }\n}\n\nconst emit = defineEmits<{\n  'play-audio': [word: string]\n  'edit-word': [word: Word]\n  'delete-word': [word: Word]\n  'toggle-favorite': [word: Word]\n  'view-details': [word: Word]\n  'previous-page': []\n  'next-page': []\n  'go-to-page': [page: number]\n  'date-group-previous': [date: string]\n  'date-group-next': [date: string]\n  'date-group-go-to-page': [date: string, page: number]\n  'accordion-toggle': [date: string, expanded: boolean]\n  'open-note-dialog': [date: string, words: any[]]\n  'open-add-vocabulary-dialog': [date: string]\n  'open-grammar-manager': [date: string]\n  'move-vocabulary': [data: { word: any, targetDate: string, sourceDate?: string }]\n  'batch-move-category': [data: { topic: string, words: any[], sourceDate: string }]\n}>()\n\n// Handle move vocabulary request\nconst handleMoveVocabulary = (data: { word: any, targetDate: string }) => {\n  // Find the source date group for this word\n  const sourceDate = groupedWords.value.find(group => \n    group.vocabularies.some(word => word.id === data.word.id)\n  )?.date\n  \n  // Pass through to parent with source date info\n  emit('move-vocabulary', {\n    ...data,\n    sourceDate\n  })\n}\n\n// Handle request for available dates with same topic\nconst handleRequestAvailableDates = (data: { topic: string, currentDate: string }) => {\n  // Find all date groups that have the same topic and are not the current date\n  const availableDates = groupedWords.value\n    .filter(group => {\n      // Check if this group has words with the same topic\n      const hasSameTopic = group.vocabularies.some(word => word.category === data.topic)\n      return hasSameTopic && group.date !== data.currentDate\n    })\n    .map(group => ({\n      date: group.date,\n      count: group.vocabularies.filter(word => word.category === data.topic).length\n    }))\n    .filter(item => item.count > 0) // Only include dates that actually have words with this topic\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()) // Sort by date descending\n  \n  // Send available dates back to the DateGroupAccordion component\n  // We'll use a custom event since Vue doesn't support direct child-to-parent communication in this case\n  nextTick(() => {\n    const event = new CustomEvent('available-dates-response', {\n      detail: {\n        topic: data.topic,\n        currentDate: data.currentDate,\n        availableDates\n      }\n    })\n    window.dispatchEvent(event)\n  })\n}\n\n// Navigate to a specific date/topic (may require changing date-group page)\nconst handleNavigateToDateTopic = (payload: { date: string; topic: string }) => {\n  // Find the index of the date group globally\n  const allGroups = groupedWords.value\n  const targetIndex = allGroups.findIndex(g => g.date === payload.date)\n  if (targetIndex === -1) return\n  const targetPage = Math.floor(targetIndex / dateGroupsPerPage) + 1\n\n  const dispatchOpenEvent = () => {\n    const ev = new CustomEvent('open-date-topic', {\n      detail: { date: payload.date, topic: payload.topic }\n    })\n    window.dispatchEvent(ev)\n  }\n\n  if (dateGroupCurrentPage.value !== targetPage) {\n    // Persist pending intent so destination accordion can apply it on mount\n    try {\n      sessionStorage.setItem(PENDING_OPEN_KEY, JSON.stringify({ date: payload.date, topic: payload.topic }))\n    } catch {}\n\n    dateGroupCurrentPage.value = targetPage\n\n    // Ensure DOM has rendered the new page groups before dispatching\n    nextTick(() => {\n      // One more frame after paint\n      requestAnimationFrame(() => {\n        setTimeout(() => {\n          dispatchOpenEvent()\n        }, 50)\n      })\n    })\n  } else {\n    // Same page: no need to persist pending state\n    nextTick(() => {\n      dispatchOpenEvent()\n    })\n  }\n}\n\n// Handle navigate from Missing Images tooltip\nconst handleMissingNavigate = (date: string, topicKey: string) => {\n  // Reuse navigation flow used by category tooltip\n  handleNavigateToDateTopic({ date, topic: topicKey })\n}\n</script>\n"],"file":"assets/VocabularyList-Bh6QZNm0.js"}