{"version":3,"mappings":"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","names":["_openBlock","_createElementBlock","_hoisted_1","_createVNode","_unref","_createElementVNode","_hoisted_2","_vShow","levels","vocabularies","LazyLoadComponent","router","categories","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_toDisplayString","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_Fragment","_renderList","_hoisted_23","_normalizeClass","_hoisted_24","_hoisted_25","_hoisted_26","voice","customTopics","_Transition","showModal","wordToMove","_createTextVNode","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","VoiceSelector","ConfirmToast","playAudio","_withDirectives","_createBlock","_normalizeStyle","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","saveSettings","grammarId","newExercise","settings","_resolveDynamicComponent","_vModelSelect","_vModelText","_vModelCheckbox","options","formatDate","defaultSettings","loadSettings","getVoiceTypeOptions","themeStore","DashboardView","VocabularyListView","GrammarPracticeView","QuizView","TailwindTest","NotFoundView","App","Toast"],"ignoreList":[],"sources":["../../src/utils/import-helper.ts","../../src/stores/modalStore.ts","../../src/App.vue","../../src/composables/useVocabularyStore.ts","../../src/utils/dateUtils.ts","../../src/views/dashboard/DashboardView.vue","../../src/stores/voiceStore.ts","../../src/utils/topicUtils.ts","../../src/views/vocabulary/components/move/MoveModal.vue","../../src/views/vocabulary/composables/useVocabularyFilters.ts","../../src/views/vocabulary/composables/useVocabularyPagination.ts","../../src/views/vocabulary/composables/useVocabularyGrouping.ts","../../src/views/vocabulary/composables/useVocabularyDialogs.ts","../../src/views/vocabulary/composables/useTopicManager.ts","../../src/views/vocabulary/composables/useVocabularySaving.ts","../../src/views/vocabulary/composables/useMoveMode.ts","../../src/views/vocabulary/VocabularyListView.vue","../../src/composables/useGrammarStore.ts","../../src/views/grammar/GrammarListView.vue","../../src/views/grammar/GrammarDetailView.vue","../../src/views/grammar/GrammarPracticeView.vue","../../src/views/practice/composables/asyncComponents.ts","../../src/views/practice/composables/useFlashcardGame.ts","../../src/views/practice/composables/useFlashcardModes.ts","../../src/views/practice/composables/useFlashcardHistory.ts","../../src/views/practice/composables/useFlashcardSettings.ts","../../src/views/practice/composables/useFlashcardStats.ts","../../src/views/practice/composables/usePracticeSessionDetails.ts","../../src/views/practice/FlashcardView.vue","../../src/views/practice/QuizView.vue","../../src/stores/theme.ts","../../src/components/TailwindTest.vue","../../src/views/NotFoundView.vue","../../src/router/index.ts","../../src/i18n/index.ts","../../src/main.ts"],"sourcesContent":["// Import Helper Utility - Giải quyết lỗi \"module has no default export\"\r\n// Dành riêng cho Vue 3 components sử dụng <script setup>\r\n\r\nimport type { DefineComponent } from 'vue'\r\n\r\n/**\r\n * Import Vue component một cách an toàn\r\n * Giải quyết lỗi \"module has no default export\" với Vue 3 script setup\r\n */\r\nexport async function safeImportComponent(path: string): Promise<DefineComponent> {\r\n  try {\r\n    const module = await import(path)\r\n    return module.default || module\r\n  } catch (error) {\r\n    console.error(`Failed to import component from ${path}:`, error)\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Import module với fallback\r\n */\r\nexport async function safeImportModule(path: string, fallbackKey?: string): Promise<any> {\r\n  try {\r\n    const module = await import(path)\r\n    if (module.default) {\r\n      return module.default\r\n    }\r\n    if (fallbackKey && module[fallbackKey]) {\r\n      return module[fallbackKey]\r\n    }\r\n    return module\r\n  } catch (error) {\r\n    console.error(`Failed to import module from ${path}:`, error)\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Load component với error handling\r\n */\r\nexport function loadComponentSafely(importFn: () => Promise<any>) {\r\n  return async () => {\r\n    try {\r\n      const module = await importFn()\r\n      return module.default || module\r\n    } catch (error) {\r\n      console.error('Component loading failed:', error)\r\n      // Return fallback component\r\n      return {\r\n        template: '<div class=\"error-component\">Component failed to load</div>'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Batch import components\r\n */\r\nexport async function importComponents(paths: Record<string, string>): Promise<Record<string, DefineComponent>> {\r\n  const components: Record<string, DefineComponent> = {}\r\n  \r\n  for (const [name, path] of Object.entries(paths)) {\r\n    try {\r\n      components[name] = await safeImportComponent(path)\r\n    } catch (error) {\r\n      console.error(`Failed to import component ${name} from ${path}:`, error)\r\n    }\r\n  }\r\n  \r\n  return components\r\n}\r\n\r\n/**\r\n * Import với fallback mechanism cho các trường hợp đặc biệt\r\n */\r\nexport function withImportFallback<T = any>(\r\n  importFn: () => Promise<any>,\r\n  fallback?: T\r\n): () => Promise<T> {\r\n  return async () => {\r\n    try {\r\n      const module = await importFn()\r\n      return module.default || module || fallback\r\n    } catch (error) {\r\n      console.warn('Import failed, using fallback:', error)\r\n      if (fallback !== undefined) {\r\n        return fallback\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\n// Debug utilities\r\nexport const ImportDebug = {\r\n  logImport: (path: string, success: boolean, error?: any) => {\r\n    if (success) {\r\n      console.log(`✅ Successfully imported: ${path}`)\r\n    } else {\r\n      console.error(`❌ Failed to import: ${path}`, error)\r\n    }\r\n  },\r\n  \r\n  inspectModule: async (path: string) => {\r\n    try {\r\n      const module = await import(path)\r\n      console.log(`📦 Module structure for ${path}:`, {\r\n        hasDefault: !!module.default,\r\n        keys: Object.keys(module),\r\n        module\r\n      })\r\n      return module\r\n    } catch (error) {\r\n      console.error(`❌ Failed to inspect module ${path}:`, error)\r\n    }\r\n  }\r\n}\r\n","import { ref, computed } from 'vue'\nimport { defineStore } from 'pinia'\n\nexport const useModalStore = defineStore('modal', () => {\n  // Modal states\n  const showVocabularyForm = ref(false)\n  const showTopicManager = ref(false) \n  const showNoteDialog = ref(false)\n  const showVocabularyDetail = ref(false)\n  const showGrammarManager = ref(false)\n  const showCompletionModal = ref(false)\n\n  // Computed properties to determine what should be hidden\n  const shouldHideBackToTop = computed(() => {\n    return showVocabularyForm.value || showTopicManager.value || showNoteDialog.value || showGrammarManager.value || showVocabularyDetail.value || showCompletionModal.value\n  })\n\n  const shouldHideAddNewWord = computed(() => {\n    return showTopicManager.value || showNoteDialog.value || showGrammarManager.value || showVocabularyDetail.value\n  })\n\n  // Actions to update modal states\n  const setVocabularyForm = (show: boolean) => {\n    showVocabularyForm.value = show\n  }\n\n  const setTopicManager = (show: boolean) => {\n    showTopicManager.value = show\n  }\n\n  const setNoteDialog = (show: boolean) => {\n    showNoteDialog.value = show\n  }\n\n  const setVocabularyDetail = (show: boolean) => {\n    showVocabularyDetail.value = show\n  }\n\n  const setGrammarManager = (show: boolean) => {\n    showGrammarManager.value = show\n  }\n\n  const setCompletionModal = (show: boolean) => {\n    showCompletionModal.value = show\n    // Control body scroll when completion modal is open\n    if (show) {\n      document.body.classList.add('modal-open')\n    } else {\n      document.body.classList.remove('modal-open')\n    }\n  }\n\n  return {\n    // States\n    showVocabularyForm,\n    showTopicManager,\n    showNoteDialog,\n    showVocabularyDetail,\n    showGrammarManager,\n    showCompletionModal,\n    \n    // Computed\n    shouldHideBackToTop,\n    shouldHideAddNewWord,\n    \n    // Actions\n    setVocabularyForm,\n    setTopicManager,\n    setNoteDialog,\n    setVocabularyDetail,\n    setGrammarManager,\n    setCompletionModal\n  }\n})\n","<script setup lang=\"ts\">\r\nimport { RouterView } from 'vue-router'\r\nimport { defineAsyncComponent } from 'vue'\r\nimport { loadComponentSafely } from './utils/import-helper'\r\nimport { useModalStore } from './stores/modalStore'\r\n\r\n// Import components - use direct import for header to ensure proper positioning\r\nconst AppHeader = defineAsyncComponent(\r\n  () => import('./components/common/AppHeader.vue')\r\n)\r\n\r\n// Import\r\nconst BackToTop = defineAsyncComponent(\r\n  () => import('./components/common/BackToTop.vue')\r\n)\r\nconst LazyLoadComponent = defineAsyncComponent(() => import('./components/LazyLoadComponent.vue'))\r\n\r\n// Modal store for managing button visibility\r\nconst modalStore = useModalStore()\r\n</script>\r\n\r\n<template>\r\n  <div id=\"app\" class=\"min-h-screen\">\r\n    <!-- Fixed header - positioned outside container constraints -->\r\n    <AppHeader />\r\n\r\n    <!-- Main content with proper padding for fixed header -->\r\n    <main class=\"flex-1 pt-16\">\r\n      <RouterView />\r\n    </main>\r\n\r\n    <!-- Back to Top Button - Fixed position -->\r\n    <BackToTop v-show=\"!modalStore.shouldHideBackToTop\" />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","import { ref, computed } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\n\r\n// Define vocabulary interface\r\nexport interface Vocabulary {\r\n  id: number\r\n  word: string\r\n  pronunciation: string\r\n  partOfSpeech: string\r\n  meaning: string\r\n  example?: string\r\n  category: string\r\n  level: string\r\n  synonyms?: string[]\r\n  antonyms?: string[]\r\n  notes?: string\r\n  favorite?: boolean\r\n  image?: string // Base64 encoded image or URL\r\n  createdAt?: string\r\n  updatedAt?: string\r\n}\r\n\r\n// Global vocabulary store\r\nconst vocabularies = ref<Vocabulary[]>([])\r\nlet nextId = 1\r\nlet isInitialized = false\r\n\r\n// Reactive flag to track initialization status\r\nconst isStoreReady = ref(false)\r\n\r\n// Reactive custom topics to fix category update issue\r\nconst customTopics = ref<{key: string, vi: string, en: string}[]>([])\r\n\r\n// Load custom topics from localStorage into reactive ref\r\nconst loadCustomTopics = () => {\r\n  try {\r\n    const saved = localStorage.getItem('customTopics')\r\n    if (saved) {\r\n      const parsedTopics = JSON.parse(saved)\r\n      if (Array.isArray(parsedTopics)) {\r\n        customTopics.value = parsedTopics\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading custom topics:', error)\r\n    customTopics.value = []\r\n  }\r\n}\r\n\r\n// Load from localStorage immediately when module is imported\r\nconst loadFromLocalStorage = () => {\r\n  try {\r\n    const saved = localStorage.getItem('vocabularies')\r\n    const savedNextId = localStorage.getItem('nextVocabId')\r\n    \r\n    if (saved) {\r\n      const parsedVocabs = JSON.parse(saved)\r\n      if (Array.isArray(parsedVocabs)) {\r\n        vocabularies.value = parsedVocabs\r\n      }\r\n    }\r\n    \r\n    if (savedNextId) {\r\n      nextId = parseInt(savedNextId, 10) || 1\r\n    }\r\n    \r\n    // Load custom topics as well\r\n    loadCustomTopics()\r\n    \r\n    isInitialized = true\r\n    isStoreReady.value = true\r\n  } catch (error) {\r\n    console.error('Error loading vocabularies from localStorage:', error)\r\n    isInitialized = true\r\n    isStoreReady.value = true\r\n  }\r\n}\r\n\r\n// Save to localStorage\r\nconst saveToLocalStorage = () => {\r\n  try {\r\n    localStorage.setItem('vocabularies', JSON.stringify(vocabularies.value))\r\n    localStorage.setItem('nextVocabId', nextId.toString())\r\n    // Also save custom topics\r\n    localStorage.setItem('customTopics', JSON.stringify(customTopics.value))\r\n  } catch (error) {\r\n    console.error('Error saving data to localStorage:', error)\r\n  }\r\n}\r\n\r\nfunction normalizeCategoryKeys() {\r\n  const categoryKeys = [\r\n    'technology', 'business', 'travel', 'food', 'health', 'education', 'sports', 'entertainment',\r\n    'science', 'art', 'music', 'literature', 'politics', 'environment', 'fashion', 'finance'\r\n  ];\r\n  // Danh sách các bản dịch tiếng Anh/Việt cho từng key\r\n  const translationMap: { [key: string]: string[] } = {\r\n    technology: ['Technology', 'Công nghệ'],\r\n    business: ['Business', 'Kinh doanh'],\r\n    travel: ['Travel', 'Du lịch'],\r\n    food: ['Food', 'Ẩm thực'],\r\n    health: ['Health', 'Sức khỏe'],\r\n    education: ['Education', 'Giáo dục'],\r\n    sports: ['Sports', 'Thể thao'],\r\n    entertainment: ['Entertainment', 'Giải trí'],\r\n    science: ['Science', 'Khoa học'],\r\n    art: ['Art', 'Nghệ thuật'],\r\n    music: ['Music', 'Âm nhạc'],\r\n    literature: ['Literature', 'Văn học'],\r\n    politics: ['Politics', 'Chính trị'],\r\n    environment: ['Environment', 'Môi trường'],\r\n    fashion: ['Fashion', 'Thời trang'],\r\n    finance: ['Finance', 'Tài chính']\r\n  };\r\n  vocabularies.value.forEach(vocab => {\r\n    for (const key of categoryKeys) {\r\n      if (\r\n        vocab.category === key ||\r\n        translationMap[key].includes(vocab.category)\r\n      ) {\r\n        vocab.category = key;\r\n        break;\r\n      }\r\n    }\r\n  });\r\n  saveToLocalStorage();\r\n}\r\n\r\n// Initialize immediately if in browser environment\r\nif (typeof window !== 'undefined') {\r\n  loadFromLocalStorage()\r\n  normalizeCategoryKeys()\r\n}\r\n\r\nexport function useVocabularyStore() {\r\n  // Computed properties\r\n  const allVocabularies = computed(() => vocabularies.value)\r\n  const totalCount = computed(() => vocabularies.value.length)\r\n  \r\n  // Get vocabulary by ID\r\n  const getVocabularyById = (id: number | string): Vocabulary | undefined => {\r\n    return vocabularies.value.find(vocab => vocab.id === Number(id))\r\n  }\r\n  \r\n  // Add new vocabulary\r\n  const addVocabulary = (vocabularyData: Omit<Vocabulary, 'id'> & { createdAt?: string }): Vocabulary => {\r\n    const newVocabulary: Vocabulary = {\r\n      ...vocabularyData,\r\n      id: nextId++,\r\n      createdAt: vocabularyData.createdAt || new Date().toISOString()\r\n    }\r\n    \r\n    vocabularies.value.unshift(newVocabulary) // Add to beginning of array\r\n    \r\n    // Save to localStorage for persistence\r\n    saveToLocalStorage()\r\n    \r\n    return newVocabulary\r\n  }\r\n  \r\n  // Update vocabulary\r\n  const updateVocabulary = (id: number, updates: Partial<Vocabulary>): boolean => {\r\n    const index = vocabularies.value.findIndex(vocab => vocab.id === id)\r\n    if (index !== -1) {\r\n      const existingVocab = vocabularies.value[index];\r\n      vocabularies.value[index] = {\r\n        ...existingVocab,\r\n        ...updates,\r\n        synonyms: updates.synonyms !== undefined ? updates.synonyms : existingVocab.synonyms,\r\n        antonyms: updates.antonyms !== undefined ? updates.antonyms : existingVocab.antonyms,\r\n        updatedAt: new Date().toISOString()\r\n      }\r\n      \r\n      saveToLocalStorage()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  \r\n  // Delete vocabulary\r\n  const deleteVocabulary = (id: number): boolean => {\r\n    const index = vocabularies.value.findIndex(vocab => vocab.id === id)\r\n    if (index !== -1) {\r\n      vocabularies.value.splice(index, 1)\r\n      saveToLocalStorage()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  \r\n  // Import vocabularies (merge with existing)\r\n  const importVocabularies = (newVocabularies: Vocabulary[]): boolean => {\r\n    try {\r\n      let importedCount = 0\r\n      let updatedCount = 0\r\n      \r\n      newVocabularies.forEach((importedVocab) => {\r\n        // Check if vocabulary already exists (by word, case-insensitive)\r\n        const existingIndex = vocabularies.value.findIndex(\r\n          vocab => vocab.word.toLowerCase() === importedVocab.word.toLowerCase()\r\n        )\r\n        \r\n        if (existingIndex !== -1) {\r\n          // Update existing vocabulary\r\n          const existingVocab = vocabularies.value[existingIndex]\r\n          vocabularies.value[existingIndex] = {\r\n            ...existingVocab, // Keep original id and createdAt\r\n            ...importedVocab, // Override with imported data\r\n            id: existingVocab.id, // Preserve original ID\r\n            createdAt: existingVocab.createdAt, // Preserve original creation date\r\n            updatedAt: new Date().toISOString() // Update modification time\r\n          }\r\n          updatedCount++\r\n        } else {\r\n          // Add new vocabulary\r\n          const newVocab = {\r\n            ...importedVocab,\r\n            id: nextId++,\r\n            createdAt: importedVocab.createdAt || new Date().toISOString(),\r\n            updatedAt: new Date().toISOString()\r\n          }\r\n          vocabularies.value.unshift(newVocab) // Add to beginning\r\n          importedCount++\r\n        }\r\n      })\r\n      \r\n      // Save to localStorage\r\n      saveToLocalStorage()\r\n      \r\n      console.log(`Import completed: ${importedCount} new vocabularies added, ${updatedCount} existing vocabularies updated`)\r\n      return true\r\n    } catch (error) {\r\n      console.error('Error importing vocabularies:', error)\r\n      return false\r\n    }\r\n  }\r\n  \r\n  // Filter vocabularies\r\n  const filterVocabularies = (filters: {\r\n    search?: string\r\n    category?: string\r\n    level?: string\r\n  }) => {\r\n    return computed(() => {\r\n      return vocabularies.value.filter(vocab => {\r\n        const matchesSearch = !filters.search || \r\n          vocab.word.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n          vocab.meaning.toLowerCase().includes(filters.search.toLowerCase())\r\n        \r\n        const matchesCategory = !filters.category || vocab.category === filters.category\r\n        const matchesLevel = !filters.level || vocab.level === filters.level\r\n        \r\n        return matchesSearch && matchesCategory && matchesLevel\r\n      })\r\n    })\r\n  }\r\n  \r\n  // Get categories (including custom topics)\r\n  const getCategories = computed(() => {\r\n    // Define the standard category keys - ALWAYS include all 16 built-in topics\r\n    const standardCategories = [\r\n      'technology', 'business', 'travel', 'food', 'health', 'education', 'sports', 'entertainment',\r\n      'science', 'art', 'music', 'literature', 'politics', 'environment', 'fashion', 'finance'\r\n    ]\r\n    \r\n    // Use reactive custom topics - this will trigger reactivity when topics change\r\n    const customTopicKeys = customTopics.value.map(topic => topic.key)\r\n    \r\n    // Get unique categories from vocabularies that are not in standard or custom\r\n    const usedCategories = new Set(vocabularies.value.map(vocab => vocab.category))\r\n    const additionalCategories = Array.from(usedCategories).filter(cat => \r\n      !standardCategories.includes(cat) && !customTopicKeys.includes(cat)\r\n    )\r\n    \r\n    // Always return ALL standard categories + custom topics + any additional ones\r\n    return [...standardCategories, ...customTopicKeys, ...additionalCategories].sort()\r\n  })\r\n  \r\n  // Get category usage count for topic manager\r\n  const getCategoryUsage = computed(() => {\r\n    const usage: Record<string, number> = {}\r\n    vocabularies.value.forEach(vocab => {\r\n      usage[vocab.category] = (usage[vocab.category] || 0) + 1\r\n    })\r\n    return usage\r\n  })\r\n  \r\n  // Get levels\r\n  const getLevels = computed(() => {\r\n    const levels = new Set(vocabularies.value.map(vocab => vocab.level))\r\n    return Array.from(levels).sort()\r\n  })\r\n  \r\n  // Toggle favorite status\r\n  const toggleFavorite = (id: number): boolean => {\r\n    const index = vocabularies.value.findIndex(vocab => vocab.id === id)\r\n    if (index !== -1) {\r\n      vocabularies.value[index] = {\r\n        ...vocabularies.value[index],\r\n        favorite: !vocabularies.value[index].favorite,\r\n        updatedAt: new Date().toISOString()\r\n      }\r\n      \r\n      saveToLocalStorage()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  \r\n  // Get favorite vocabularies\r\n  const favoriteVocabularies = computed(() => {\r\n    return vocabularies.value.filter(vocab => vocab.favorite)\r\n  })\r\n  \r\n  // Initialize store - ensure data is loaded\r\n  const initializeStore = () => {\r\n    if (!isInitialized) {\r\n      loadFromLocalStorage()\r\n    }\r\n    return isStoreReady\r\n  }\r\n  \r\n  // Functions to manage custom topics reactivity\r\n  const refreshCustomTopics = () => {\r\n    loadCustomTopics()\r\n  }\r\n  \r\n  const addCustomTopic = (topic: {key: string, vi: string, en: string}) => {\r\n    // Check if topic already exists to avoid duplicates\r\n    const existingTopic = customTopics.value.find(t => t.key === topic.key)\r\n    if (!existingTopic) {\r\n      customTopics.value.push(topic)\r\n      saveToLocalStorage()\r\n    }\r\n  }\r\n  \r\n  const updateCustomTopic = (oldKey: string, topic: {key: string, vi: string, en: string}) => {\r\n    const index = customTopics.value.findIndex(t => t.key === oldKey)\r\n    if (index !== -1) {\r\n      customTopics.value[index] = topic\r\n      saveToLocalStorage()\r\n    }\r\n  }\r\n  \r\n  const deleteCustomTopic = (key: string) => {\r\n    const index = customTopics.value.findIndex(t => t.key === key)\r\n    if (index !== -1) {\r\n      customTopics.value.splice(index, 1)\r\n      saveToLocalStorage()\r\n    }\r\n  }\r\n\r\n  return {\r\n    // State\r\n    allVocabularies,\r\n    totalCount,\r\n    favoriteVocabularies,\r\n    isStoreReady,\r\n    \r\n    // Getters\r\n    getVocabularyById,\r\n    getCategories,\r\n    getLevels,\r\n    getCategoryUsage,\r\n    \r\n    // Actions\r\n    addVocabulary,\r\n    updateVocabulary,\r\n    deleteVocabulary,\r\n    importVocabularies,\r\n    toggleFavorite,\r\n    filterVocabularies,\r\n    initializeStore,\r\n    \r\n    // Utils\r\n    saveToLocalStorage,\r\n    \r\n    // Custom topics management\r\n    customTopics,\r\n    refreshCustomTopics,\r\n    addCustomTopic,\r\n    updateCustomTopic,\r\n    deleteCustomTopic\r\n  }\r\n}\r\n","import type { TopicGroup } from '../views/vocabulary/types'\r\n\r\nexport interface GroupedVocabulary {\r\n  date: string\r\n  displayDate: string\r\n  vocabularies: any[]\r\n  topics?: TopicGroup[]\r\n  totalItems?: number\r\n  currentPage?: number\r\n  totalPages?: number\r\n}\r\n\r\n/**\r\n * Format date to readable string\r\n */\r\nexport const formatDate = (dateString: string | undefined, locale: string = 'vi-VN'): string => {\r\n  if (!dateString) return ''\r\n  \r\n  try {\r\n    const date = new Date(dateString)\r\n    return date.toLocaleDateString(locale, {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    })\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Format date and time to readable string\r\n */\r\nexport const formatDateTime = (dateString: string | undefined, locale: string = 'vi-VN'): string => {\r\n  if (!dateString) return ''\r\n  \r\n  try {\r\n    const date = new Date(dateString)\r\n    return date.toLocaleString(locale, {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Get relative time from now (e.g., \"2 hours ago\", \"yesterday\", \"3 days ago\")\r\n */\r\nexport const getRelativeTime = (dateString: string | undefined, t?: (key: string, params?: any) => string): string => {\r\n  if (!dateString) return ''\r\n  \r\n  try {\r\n    const date = new Date(dateString)\r\n    const now = new Date()\r\n    const diffInMs = now.getTime() - date.getTime()\r\n    const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60))\r\n    const diffInDays = Math.floor(diffInHours / 24)\r\n    \r\n    if (diffInHours < 1) {\r\n      const diffInMinutes = Math.floor(diffInMs / (1000 * 60))\r\n      if (diffInMinutes < 1) {\r\n        return t ? t('time.ago.justNow') : 'Just now'\r\n      }\r\n      return t ? t('time.ago.minutesAgo', { minutes: diffInMinutes }) : `${diffInMinutes} minutes ago`\r\n    } else if (diffInHours < 24) {\r\n      return t ? t('time.ago.hoursAgo', { hours: diffInHours }) : `${diffInHours} hours ago`\r\n    } else if (diffInDays === 1) {\r\n      return t ? t('time.ago.yesterday') : 'Yesterday'\r\n    } else if (diffInDays < 7) {\r\n      return t ? t('time.ago.daysAgo', { days: diffInDays }) : `${diffInDays} days ago`\r\n    } else {\r\n      return formatDate(dateString)\r\n    }\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Get date key for grouping (YYYY-MM-DD)\r\n */\r\nexport const getDateKey = (dateString: string | undefined): string => {\r\n  if (!dateString) return ''\r\n  \r\n  try {\r\n    const date = new Date(dateString)\r\n    return date.toISOString().split('T')[0]\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Group vocabularies by topic\r\n */\r\nexport const groupVocabulariesByTopic = (vocabularies: any[]): TopicGroup[] => {\r\n  const grouped = new Map<string, any[]>()\r\n  const uncategorizedKey = 'Uncategorized'\r\n\r\n  vocabularies.forEach(vocab => {\r\n    const topic = vocab.category || uncategorizedKey\r\n    if (!grouped.has(topic)) {\r\n      grouped.set(topic, [])\r\n    }\r\n    grouped.get(topic)!.push(vocab)\r\n  })\r\n\r\n  const result = Array.from(grouped.entries()).map(([topic, vocabs]) => {\r\n    // Get category name from the first vocabulary item in the group (for imported data)\r\n    const firstVocab = vocabs[0]\r\n    // If there's a categoryName from imported data, use it\r\n    // Otherwise, we'll let the component use getTopicName to get the proper translation\r\n    const categoryName = firstVocab?.categoryName || null\r\n    \r\n    return {\r\n      topic,\r\n      categoryName, // Preserve category name from imported data\r\n      vocabularies: vocabs.sort((a, b) => {\r\n          const timeA = new Date(a.createdAt || '').getTime()\r\n          const timeB = new Date(b.createdAt || '').getTime()\r\n          return timeB - timeA\r\n        })\r\n    }\r\n  })\r\n\r\n  return result.sort((a, b) => {\r\n    if (a.topic === uncategorizedKey) return 1;\r\n    if (b.topic === uncategorizedKey) return -1;\r\n    return a.topic.localeCompare(b.topic);\r\n  });\r\n}\r\n\r\n/**\r\n * Group vocabularies by date and then by topic\r\n */\r\nexport const groupVocabulariesByDateAndTopic = (\r\n  vocabularies: any[],\r\n  locale: string = 'vi-VN',\r\n  t?: (key: string) => string\r\n): GroupedVocabulary[] => {\r\n  const groupedByDate = groupVocabulariesByDate(vocabularies, locale, t)\r\n\r\n  return groupedByDate.map(dateGroup => {\r\n    return {\r\n      ...dateGroup,\r\n      topics: groupVocabulariesByTopic(dateGroup.vocabularies)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Group vocabularies by date\r\n */\r\nexport const groupVocabulariesByDate = (\r\n  vocabularies: any[],\r\n  locale: string = 'vi-VN',\r\n  t?: (key: string) => string\r\n): GroupedVocabulary[] => {\r\n  const grouped = new Map<string, any[]>()\r\n  \r\n  // Group by date key\r\n  vocabularies.forEach(vocab => {\r\n    const dateKey = getDateKey(vocab.createdAt)\r\n    if (!dateKey) return\r\n    \r\n    if (!grouped.has(dateKey)) {\r\n      grouped.set(dateKey, [])\r\n    }\r\n    grouped.get(dateKey)!.push(vocab)\r\n  })\r\n  \r\n  // Convert to array and sort by date (newest first)\r\n  const result: GroupedVocabulary[] = Array.from(grouped.entries())\r\n    .map(([dateKey, vocabs]) => ({\r\n      date: dateKey,\r\n      displayDate: getGroupDisplayDate(dateKey, locale, t),\r\n      vocabularies: vocabs.sort((a, b) => {\r\n        // Sort by creation time within the same date (newest first)\r\n        const timeA = new Date(a.createdAt || '').getTime()\r\n        const timeB = new Date(b.createdAt || '').getTime()\r\n        return timeB - timeA\r\n      })\r\n    }))\r\n    .sort((a, b) => {\r\n      // Sort groups by date (newest first)\r\n      return b.date.localeCompare(a.date)\r\n    })\r\n  \r\n  return result\r\n}\r\n\r\n/**\r\n * Get display name for date group\r\n */\r\nexport const getGroupDisplayDate = (dateKey: string, locale: string = 'vi-VN', t?: (key: string) => string): string => {\r\n  try {\r\n    const date = new Date(dateKey + 'T00:00:00')\r\n    const today = new Date()\r\n    const yesterday = new Date(today)\r\n    yesterday.setDate(today.getDate() - 1)\r\n    \r\n    const todayKey = getDateKey(today.toISOString())\r\n    const yesterdayKey = getDateKey(yesterday.toISOString())\r\n    \r\n    if (dateKey === todayKey) {\r\n      // Prefer i18n if provided\r\n      if (t) return t('time.today') || 'Today'\r\n      // Fallback by locale (support vi and ko)\r\n      const l = locale.toLowerCase()\r\n      if (l.startsWith('vi')) return 'Hôm nay'\r\n      if (l.startsWith('ko')) return '오늘'\r\n      return 'Today'\r\n    } else if (dateKey === yesterdayKey) {\r\n      if (t) return t('time.yesterday') || 'Yesterday'\r\n      const l = locale.toLowerCase()\r\n      if (l.startsWith('vi')) return 'Hôm qua'\r\n      if (l.startsWith('ko')) return '어제'\r\n      return 'Yesterday'\r\n    } else {\r\n      return formatDate(date.toISOString(), locale)\r\n    }\r\n  } catch (error) {\r\n    return dateKey\r\n  }\r\n}\r\n","<template>\n  <div class=\"min-h-screen overflow-x-hidden bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-[#0a0a0a] dark:to-[#0f0f0f] relative\">\n    <!-- Animated Background Elements -->\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none z-0\">\n      <div class=\"floating-shapes\">\n        <div class=\"absolute top-20 left-10 w-40 h-40 sm:w-64 sm:h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\n        <div class=\"absolute top-40 right-10 w-48 h-48 sm:w-72 sm:h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\n        <div class=\"absolute -bottom-8 left-20 w-56 h-56 sm:w-80 sm:h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\n      </div>\n    </div>\n    \n    <!-- Header -->\n    <LazyLoadComponent animation-type=\"fade-up\">\n      <DashboardHeader />\n    </LazyLoadComponent>\n\n    <!-- Main Content -->\n    <div class=\"max-w-7xl mx-auto py-3 sm:py-5 px-3 sm:px-6 lg:px-8 relative\">\n      <!-- Stats Overview -->\n      <LazyLoadComponent animation-type=\"slide-up\" :threshold=\"0.2\">\n        <DashboardStats :stats=\"stats\" class=\"mb-8\" />\n      </LazyLoadComponent>\n\n      <!-- Flashcard Practice Stats Section -->\n      <LazyLoadComponent animation-type=\"slide-up\" :threshold=\"0.15\">\n        <div class=\"mb-6 sm:mb-8\">\n          <FlashcardStats />\n        </div>\n      </LazyLoadComponent>\n\n      <!-- Quick Actions & Recent Activity -->\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n        <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.15\">\n          <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-105 hover:-translate-y-2 h-full min-h-[360px] sm:min-h-[420px] flex flex-col\">\n            <div class=\"px-4 py-5 sm:p-8 flex-1 flex flex-col\">\n              <div class=\"flex items-center mb-6\">\n                <div class=\"animate-pulse-slow\">\n                  <div class=\"w-3 h-3 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full mr-3\"></div>\n                </div>\n                <h3 class=\"text-lg sm:text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent\">\n                  {{ t('dashboard.quickActions', 'Quick Actions') }}\n                </h3>\n              </div>\n              \n              <div class=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 flex-1\">\n                <!-- Add Vocabulary Button -->\n                <button @click=\"navigateTo('/vocabulary')\" \n                        class=\"group/btn relative overflow-hidden bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold py-3 px-3 sm:py-4 sm:px-4 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-lg active:scale-95\">\n                  <div class=\"absolute inset-0 bg-gradient-to-r from-blue-400 to-blue-500 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300\"></div>\n                  <div class=\"relative z-10 text-center\">\n                    <svg class=\"w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 mx-auto mb-2 transform group-hover/btn:rotate-180 transition-transform duration-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fill-rule=\"evenodd\" d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\" clip-rule=\"evenodd\"/>\n                    </svg>\n                    <span class=\"text-xs sm:text-sm md:text-base font-medium\">{{ t('dashboard.actions.addVocabulary', 'Add Vocabulary') }}</span>\n                  </div>\n                  <div class=\"absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-20 transition-opacity duration-300\"></div>\n                </button>\n                \n                <!-- Practice Flashcard Button -->\n                <button @click=\"navigateTo('/practice/flashcard')\" \n                        class=\"group/btn relative overflow-hidden bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold py-3 px-3 sm:py-4 sm:px-4 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-lg active:scale-95\">\n                  <div class=\"absolute inset-0 bg-gradient-to-r from-green-400 to-green-500 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300\"></div>\n                  <div class=\"relative z-10 text-center\">\n                    <svg class=\"w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 mx-auto mb-2 transform group-hover/btn:scale-110 transition-transform duration-300\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path d=\"M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z\"/>\n                    </svg>\n                    <span class=\"text-xs sm:text-sm md:text-base font-medium\">{{ t('dashboard.actions.practiceFlashcard', 'Practice Flashcard') }}</span>\n                  </div>\n                  <div class=\"absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-20 transition-opacity duration-300\"></div>\n                </button>\n                \n                <!-- Take Quiz Button -->\n                <button @click=\"navigateTo('/practice/quiz')\" \n                        class=\"group/btn relative overflow-hidden bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-white font-semibold py-3 px-3 sm:py-4 sm:px-4 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-lg active:scale-95\">\n                  <div class=\"absolute inset-0 bg-gradient-to-r from-yellow-400 to-yellow-500 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300\"></div>\n                  <div class=\"relative z-10 text-center\">\n                    <svg class=\"w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 mx-auto mb-2 transform group-hover/btn:bounce\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clip-rule=\"evenodd\"/>\n                    </svg>\n                    <span class=\"text-xs sm:text-sm md:text-base font-medium\">{{ t('dashboard.actions.takeQuiz', 'Take a Quiz') }}</span>\n                  </div>\n                  <div class=\"absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-20 transition-opacity duration-300\"></div>\n                </button>\n                \n                <!-- Learn Grammar Button -->\n                <button @click=\"navigateTo('/grammar')\" \n                        class=\"group/btn relative overflow-hidden bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white font-semibold py-3 px-3 sm:py-4 sm:px-4 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-lg active:scale-95\">\n                  <div class=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-purple-500 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300\"></div>\n                  <div class=\"relative z-10 text-center\">\n                    <svg class=\"w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 mx-auto mb-2 transform group-hover/btn:rotate-12 transition-transform duration-300\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z\"/>\n                    </svg>\n                    <span class=\"text-xs sm:text-sm md:text-base font-medium\">{{ t('dashboard.actions.learnGrammar', 'Learn Grammar') }}</span>\n                  </div>\n                  <div class=\"absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-20 transition-opacity duration-300\"></div>\n                </button>\n              </div>\n            </div>\n          </div>\n        </LazyLoadComponent>\n\n        <!-- Recent Activity -->\n        <LazyLoadComponent animation-type=\"slide-up\" :threshold=\"0.15\">\n          <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-105 hover:-translate-y-2 h-full min-h-[420px] flex flex-col\">\n            <div class=\"px-6 py-8 sm:p-8 flex-1 flex flex-col\">\n              <div class=\"flex items-center mb-6\">\n                <div class=\"animate-pulse-slow\">\n                  <div class=\"w-3 h-3 bg-gradient-to-r from-green-400 to-blue-500 rounded-full mr-3\"></div>\n                </div>\n                <h3 class=\"text-lg sm:text-xl md:text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 dark:from-green-400 dark:to-blue-400 bg-clip-text text-transparent\">\n                  {{ t('dashboard.recentActivity', 'Recent Activity') }}\n                </h3>\n              </div>\n              \n              <div class=\"space-y-4 flex-1\">\n                <div v-for=\"(activity, index) in recentActivities\" \n                     :key=\"activity.id\" \n                     class=\"group/activity flex items-center space-x-4 p-3 rounded-xl hover:bg-white/50 dark:hover:bg-white/5 transition-all duration-300 transform hover:scale-105\"\n                     :style=\"{ animationDelay: `${index * 100}ms` }\">\n                  <div class=\"flex-shrink-0\">\n                    <div class=\"w-10 h-10 rounded-full flex items-center justify-center transform group-hover/activity:rotate-12 group-hover/activity:scale-110 transition-all duration-300\" \n                         :class=\"activity.iconColor\">\n                      <svg class=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"/>\n                      </svg>\n                    </div>\n                  </div>\n                  <div class=\"flex-1 min-w-0\">\n                    <p class=\"text-xs sm:text-sm md:text-base font-semibold text-gray-900 dark:text-white truncate\">{{ activity.title }}</p>\n                    <p class=\"text-xs sm:text-sm text-blue-600 dark:text-blue-400 font-medium\">{{ activity.time }}</p>\n                  </div>\n                  <div class=\"opacity-0 group-hover/activity:opacity-100 transition-opacity duration-300\">\n                    <svg class=\"w-5 h-5 text-blue-500 dark:text-blue-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\"></path>\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </LazyLoadComponent>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, computed, defineAsyncComponent } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useI18n } from 'vue-i18n'\nimport { loadComponentSafely } from '../../utils/import-helper'\nimport { useVocabularyStore } from '../../composables/useVocabularyStore'\nimport { getRelativeTime } from '../../utils/dateUtils'\n// Sử dụng defineAsyncComponent để import components an toàn\nconst LazyLoadComponent = defineAsyncComponent(\n  loadComponentSafely(() => import('../../components/LazyLoadComponent.vue'))\n)\nconst DashboardHeader = defineAsyncComponent(\n  loadComponentSafely(() => import('./components/DashboardHeader.vue'))\n)\nconst DashboardStats = defineAsyncComponent(\n  loadComponentSafely(() => import('./components/DashboardStats.vue'))\n)\nconst FlashcardStats = defineAsyncComponent(\n  loadComponentSafely(() => import('./components/FlashcardStats.vue'))\n)\n\nconst router = useRouter()\nconst { t } = useI18n()\nconst vocabularyStore = useVocabularyStore()\n\n\n\n// Computed stats data based on real vocabulary data\nconst stats = computed(() => {\n  const allVocabs = vocabularyStore.allVocabularies.value\n  const favoriteCount = vocabularyStore.favoriteVocabularies.value.length\n  const categories = vocabularyStore.getCategories.value.length\n  \n  // Calculate learning streak (simplified)\n  const today = new Date()\n  const todayStr = today.toISOString().split('T')[0]\n  const todayVocabs = allVocabs.filter(v => \n    v.createdAt && v.createdAt.split('T')[0] === todayStr\n  ).length\n  \n  return {\n    vocabularyLearned: allVocabs.length,\n    grammarLessons: categories, // Use categories count as grammar lessons\n    currentStreak: Math.max(1, todayVocabs), // At least 1 if there are vocabularies\n    totalTime: favoriteCount * 5 // Estimate 5 minutes per favorite vocabulary\n  }\n})\n\n// Recent activities based on actual vocabulary data\nconst recentActivities = computed(() => {\n  const allVocabs = vocabularyStore.allVocabularies.value\n  const activities: Array<{\n    id: number\n    title: string\n    time: string\n    iconColor: string\n  }> = []\n  \n  // Get recent vocabularies (sorted by creation/update time)\n  const recentVocabs = [...allVocabs]\n    .sort((a, b) => {\n      const aTime = a.updatedAt || a.createdAt || ''\n      const bTime = b.updatedAt || b.createdAt || ''\n      return new Date(bTime).getTime() - new Date(aTime).getTime()\n    })\n    .slice(0, 4)\n  \n  recentVocabs.forEach((vocab, index) => {\n    const isUpdated = vocab.updatedAt && vocab.updatedAt !== vocab.createdAt\n    const timeStr = vocab.updatedAt || vocab.createdAt || ''\n    \n    const categoryTranslated = t(`categories.${vocab.category}`, vocab.category)\n    \n    activities.push({\n      id: index + 1,\n      title: isUpdated \n        ? t('dashboard.activity.updated', { word: vocab.word, category: categoryTranslated }, `Updated '${vocab.word}' in ${categoryTranslated}`)\n        : t('dashboard.activity.added', { word: vocab.word, category: categoryTranslated }, `Added '${vocab.word}' to ${categoryTranslated}`),\n      time: timeStr ? getRelativeTime(timeStr, t) : t('dashboard.activity.justNow', 'Just now'),\n      iconColor: isUpdated ? 'bg-blue-500' : 'bg-green-500'\n    })\n  })\n  \n  // Add practice activity if no vocabulary activities (fallback)\n  if (activities.length === 0) {\n    activities.push({\n      id: 1,\n      title: t('dashboard.activity.noActivity', 'No recent activity'),\n      time: t('dashboard.activity.addFirstVocab', 'Add your first vocabulary to get started!'),\n      iconColor: 'bg-gray-500'\n    })\n  }\n  \n  return activities\n})\n\nconst navigateTo = (path: string) => {\n  router.push(path)\n}\n\nonMounted(() => {\n  // Initialize vocabulary store\n  vocabularyStore.initializeStore()\n  console.log('Dashboard mounted with real data')\n})\n</script>\n","import { ref, watch, onMounted } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\n// Debug function to log available voices\nconst debugAvailableVoices = () => {\n  if ('speechSynthesis' in window) {\n    const voices = speechSynthesis.getVoices()\n    console.log('=== AVAILABLE VOICES DEBUG ====')\n    console.log(`Total voices found: ${voices.length}`)\n    voices.forEach((voice, index) => {\n      console.log(`${index + 1}. Name: \"${voice.name}\" | Lang: ${voice.lang} | Local: ${voice.localService} | Default: ${voice.default}`)\n    })\n    \n    // Special debug for Korean voices\n    const koreanVoices = voices.filter(voice => voice.lang.startsWith('ko'))\n    console.log('\\n=== KOREAN VOICES DETAIL ====')\n    console.log(`Korean voices found: ${koreanVoices.length}`)\n    koreanVoices.forEach((voice, index) => {\n      const name = voice.name.toLowerCase()\n      const genderGuess = name.includes('female') || name.includes('woman') ? '👩 Female' : \n                         name.includes('male') || name.includes('man') ? '👨 Male' : '❓ Unknown'\n      console.log(`🇰🇷 ${index + 1}. \"${voice.name}\" | ${genderGuess} | Lang: ${voice.lang}`)\n    })\n    console.log('===============================')\n    return voices\n  }\n  return []\n}\n\nexport type VoiceType = 'female-sweet' | 'female-clear' | 'male-strong' | 'male-gentle' | 'female-professional' | 'male-deep' | 'korean-female' | 'korean-male'\n\nexport interface VoiceSettings {\n  rate: number\n  pitch: number\n  volume: number\n}\n\nexport type AllVoiceSettings = {\n  [key in VoiceType]: VoiceSettings\n}\n\n// Global reactive state - Optimized for natural human-like speech\nconst defaultSettings: AllVoiceSettings = {\n  'female-sweet': { rate: 0.85, pitch: 1.1, volume: 1.0 },\n  'female-clear': { rate: 1.0, pitch: 0.95, volume: 1.0 },\n  'female-professional': { rate: 0.9, pitch: 0.85, volume: 1.0 },\n  'male-strong': { rate: 0.8, pitch: 0.7, volume: 1.0 },\n  'male-gentle': { rate: 0.9, pitch: 0.9, volume: 1.0 },\n  'male-deep': { rate: 0.75, pitch: 0.6, volume: 1.0 },\n  'korean-female': { rate: 0.95, pitch: 1.15, volume: 1.0 },\n  'korean-male': { rate: 0.85, pitch: 0.5, volume: 1.0 }\n}\n\nconst voiceSettings = ref<AllVoiceSettings>({ ...defaultSettings })\nconst currentVoiceType = ref<VoiceType>('female-sweet')\nconst availableVoices = ref<SpeechSynthesisVoice[]>([])\nconst selectedVoice = ref<SpeechSynthesisVoice | null>(null)\n\n// Load available voices\nconst loadVoices = () => {\n  if ('speechSynthesis' in window) {\n    const voices = speechSynthesis.getVoices()\n    console.log('Loading voices, total found:', voices.length)\n    \n    // Debug: Show all available voices\n    debugAvailableVoices()\n    \n    // Filter for English and Korean voices\n    const englishVoices = voices.filter(voice => voice.lang.startsWith('en'))\n    const koreanVoices = voices.filter(voice => voice.lang.startsWith('ko'))\n    const allSupportedVoices = [...englishVoices, ...koreanVoices]\n    \n    console.log('English voices found:', englishVoices.length)\n    console.log('Korean voices found:', koreanVoices.length)\n    console.log('Total supported voices:', allSupportedVoices.length)\n    \n    availableVoices.value = allSupportedVoices\n    \n    // Only update selected voice if we have voices\n    if (allSupportedVoices.length > 0) {\n      updateSelectedVoice()\n    }\n  }\n}\n\n// Update selected voice based on settings\nconst updateSelectedVoice = () => {\n  const voices = availableVoices.value\n  console.log('Updating voice selection, available voices:', voices.length)\n  console.log('Current voice type:', currentVoiceType.value)\n  \n  if (voices.length === 0) {\n    console.log('No voices available, loading voices...')\n    loadVoices()\n    return\n  }\n\n  // Try to find voice based on specific voice type preference\n  let targetVoice: SpeechSynthesisVoice | null = null\n\n  // Separate voices by language and gender\n  const englishVoices = voices.filter(voice => voice.lang.startsWith('en'))\n  const koreanVoices = voices.filter(voice => voice.lang.startsWith('ko'))\n  \n  const femaleVoices = englishVoices.filter(voice => {\n    const name = voice.name.toLowerCase()\n    return name.includes('female') || name.includes('woman') || name.includes('zira') || \n           name.includes('hazel') || name.includes('cortana') || name.includes('helena') ||\n           name.includes('susan') || name.includes('samantha') || name.includes('karen')\n  })\n  \n  const maleVoices = englishVoices.filter(voice => {\n    const name = voice.name.toLowerCase()\n    return name.includes('male') || name.includes('man') || name.includes('david') || \n           name.includes('mark') || name.includes('daniel') || name.includes('richard') ||\n           name.includes('alex') || name.includes('tom') || name.includes('aaron')\n  })\n  \n  // Better Korean voice gender detection\n  const koreanFemaleVoices = koreanVoices.filter(voice => {\n    const name = voice.name.toLowerCase()\n    // Explicit female markers\n    if (name.includes('female') || name.includes('woman')) return true\n    // Common Korean female voice names\n    if (name.includes('heami') || name.includes('yuna') || name.includes('seoyeon') || \n        name.includes('sora') || name.includes('inha') || name.includes('nayeon') ||\n        name.includes('clara') || name.includes('aria')) return true\n    // Exclude male markers\n    if (name.includes('male') || name.includes('man')) return false\n    // If no clear gender marker, use voice name patterns or index\n    return false\n  })\n  \n  const koreanMaleVoices = koreanVoices.filter(voice => {\n    const name = voice.name.toLowerCase()\n    // Explicit male markers\n    if (name.includes('male') || name.includes('man')) return true\n    // Common Korean male voice names\n    if (name.includes('minho') || name.includes('woojin') || name.includes('taehyun') ||\n        name.includes('jun') || name.includes('alex') || name.includes('david') ||\n        name.includes('injoo')) return true\n    // Exclude female markers\n    if (name.includes('female') || name.includes('woman')) return false\n    // If no clear gender marker, use voice name patterns or index\n    return false\n  })\n  \n  // If no explicit gender voices found, split remaining voices\n  const remainingKoreanVoices = koreanVoices.filter(voice => \n    !koreanFemaleVoices.includes(voice) && !koreanMaleVoices.includes(voice)\n  )\n  \n  if (remainingKoreanVoices.length > 0) {\n    const midPoint = Math.ceil(remainingKoreanVoices.length / 2)\n    koreanFemaleVoices.push(...remainingKoreanVoices.slice(0, midPoint))\n    koreanMaleVoices.push(...remainingKoreanVoices.slice(midPoint))\n  }\n  \n  console.log(`English Female voices found: ${femaleVoices.length}`, femaleVoices.map(v => v.name))\n  console.log(`English Male voices found: ${maleVoices.length}`, maleVoices.map(v => v.name))\n  console.log(`Korean Female voices found: ${koreanFemaleVoices.length}`, koreanFemaleVoices.map(v => v.name))\n  console.log(`Korean Male voices found: ${koreanMaleVoices.length}`, koreanMaleVoices.map(v => v.name))\n  \n  // If no Korean gender-specific voices found, split Korean voices by index\n  if (koreanFemaleVoices.length === 0 && koreanMaleVoices.length === 0 && koreanVoices.length > 0) {\n    const halfPoint = Math.floor(koreanVoices.length / 2)\n    koreanFemaleVoices.push(...koreanVoices.slice(0, halfPoint))\n    koreanMaleVoices.push(...koreanVoices.slice(halfPoint))\n    console.log('No Korean gender-specific voices found, splitting by index')\n  }\n  \n  // If no English gender-specific voices found, split all English voices by index\n  if (femaleVoices.length === 0 && maleVoices.length === 0 && englishVoices.length > 0) {\n    const halfPoint = Math.floor(englishVoices.length / 2)\n    femaleVoices.push(...englishVoices.slice(0, halfPoint))\n    maleVoices.push(...englishVoices.slice(halfPoint))\n    console.log('No English gender-specific voices found, splitting by index')\n  }\n  \n  switch (currentVoiceType.value) {\n    case 'female-sweet':\n      // Use first female voice or first available\n      targetVoice = femaleVoices[0] || voices[0]\n      console.log('Selected female-sweet:', targetVoice?.name)\n      break\n      \n    case 'female-clear':\n      // Use second female voice or second available\n      targetVoice = femaleVoices[1] || femaleVoices[0] || voices[1] || voices[0]\n      console.log('Selected female-clear:', targetVoice?.name)\n      break\n      \n    case 'female-professional':\n      // Use third female voice or cycle back\n      targetVoice = femaleVoices[2] || femaleVoices[0] || voices[2] || voices[0]\n      console.log('Selected female-professional:', targetVoice?.name)\n      break\n      \n    case 'male-strong':\n      // Use first male voice\n      targetVoice = maleVoices[0] || voices[Math.floor(voices.length / 2)] || voices[0]\n      console.log('Selected male-strong:', targetVoice?.name)\n      break\n      \n    case 'male-gentle':\n      // Use second male voice\n      targetVoice = maleVoices[1] || maleVoices[0] || voices[Math.floor(voices.length / 2) + 1] || voices[0]\n      console.log('Selected male-gentle:', targetVoice?.name)\n      break\n      \n    case 'male-deep':\n      // Use third male voice or cycle back\n      targetVoice = maleVoices[2] || maleVoices[0] || voices[Math.floor(voices.length / 2) + 2] || voices[0]\n      console.log('Selected male-deep:', targetVoice?.name)\n      break\n      \n    case 'korean-female':\n      // Always use FIRST Korean voice for female\n      targetVoice = koreanVoices[0] || voices[0]\n      console.log('🇰🇷👩 KOREAN FEMALE - Selected voice:', targetVoice?.name, 'Lang:', targetVoice?.lang)\n      break\n      \n    case 'korean-male':\n      // Ensure we always have a valid voice\n      if (koreanVoices.length >= 2) {\n        // Use second Korean voice if available\n        targetVoice = koreanVoices[1]\n        console.log('🇰🇷👨 KOREAN MALE - Using second Korean voice:', targetVoice?.name)\n      } else if (koreanVoices.length === 1) {\n        // Use same Korean voice but settings will make it sound deeper\n        targetVoice = koreanVoices[0]\n        console.log('🇰🇷👨 KOREAN MALE - Using same Korean voice with deep pitch (0.5):', targetVoice?.name)\n      } else {\n        // No Korean voices, use first male voice or fallback\n        targetVoice = maleVoices[0] || voices[0]\n        console.log('🇰🇷👨 KOREAN MALE - No Korean voices, using male voice:', targetVoice?.name)\n      }\n      \n      // Ensure we have a voice\n      if (!targetVoice) {\n        targetVoice = voices[0]\n        console.log('⚠️ FALLBACK: Using first available voice:', targetVoice?.name)\n      }\n      \n      console.log('🇰🇷 Total Korean voices:', koreanVoices.length, koreanVoices.map(v => v.name))\n      console.log('🎯 Final selected voice for Korean Male:', targetVoice?.name, 'Lang:', targetVoice?.lang)\n      break\n  }\n\n  console.log(`Looking for ${currentVoiceType.value} voice, found:`, targetVoice?.name)\n\n  // Fallback: use first available voice or default system voice\n  const previousVoice = selectedVoice.value?.name\n  selectedVoice.value = targetVoice || voices[0] || null\n  \n  console.log('Voice changed from', previousVoice, 'to', selectedVoice.value?.name)\n}\n\n// Load settings from localStorage\nconst loadSettings = () => {\n  const saved = localStorage.getItem('voice-settings')\n  const savedType = localStorage.getItem('voice-type')\n  \n  if (saved) {\n    try {\n      const parsedSettings = JSON.parse(saved)\n      // Deep merge with defaults to ensure all keys exist\n      voiceSettings.value = {\n        ...defaultSettings,\n        ...Object.keys(parsedSettings).reduce((acc, key) => {\n          const voiceType = key as VoiceType\n          if (defaultSettings[voiceType]) {\n            acc[voiceType] = { ...defaultSettings[voiceType], ...parsedSettings[voiceType] }\n          }\n          return acc\n        }, {} as AllVoiceSettings)\n      }\n    } catch (error) {\n      console.error('Error loading voice settings:', error)\n      voiceSettings.value = { ...defaultSettings }\n    }\n  }\n  \n  if (savedType) {\n    currentVoiceType.value = savedType as VoiceType\n  }\n}\n\n// Save settings to localStorage\nconst saveSettings = () => {\n  localStorage.setItem('voice-settings', JSON.stringify(voiceSettings.value))\n  localStorage.setItem('voice-type', currentVoiceType.value)\n}\n\n// Create and configure speech utterance with voice-specific settings\nconst createUtterance = (text: string): SpeechSynthesisUtterance => {\n  // Force update selected voice to ensure we have the latest\n  updateSelectedVoice()\n  \n  const utterance = new SpeechSynthesisUtterance(text)\n  utterance.lang = 'en-US'\n  \n  // Get settings for the current voice type\n  const settings = voiceSettings.value[currentVoiceType.value]\n  \n  utterance.rate = Math.max(0.1, Math.min(10, settings.rate))\n  utterance.pitch = Math.max(0, Math.min(2, settings.pitch))\n  utterance.volume = Math.max(0, Math.min(1, settings.volume))\n  \n  console.log('Creating utterance with voice type:', currentVoiceType.value)\n  console.log('Selected voice for utterance:', selectedVoice.value?.name)\n  \n  if (selectedVoice.value) {\n    utterance.voice = selectedVoice.value\n  }\n  \n  return utterance\n}\n\n// Play audio with current voice settings\nconst playAudio = (text: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (!('speechSynthesis' in window)) {\n      console.warn('Speech synthesis not supported')\n      reject(new Error('Speech synthesis not supported'))\n      return\n    }\n\n    const utterance = createUtterance(text)\n    \n    utterance.onend = () => resolve()\n    utterance.onerror = (event) => reject(event.error)\n    \n    speechSynthesis.speak(utterance)\n  })\n}\n\n// Update voice type\nconst setVoiceType = (type: VoiceType) => {\n  console.log('Setting voice type to:', type)\n  currentVoiceType.value = type\n  \n  // Force reload voices if not available\n  if (availableVoices.value.length === 0) {\n    loadVoices()\n  }\n  \n  // Update selected voice immediately\n  updateSelectedVoice()\n  \n  // Save settings\n  saveSettings()\n  \n  console.log('Voice updated to:', selectedVoice.value?.name)\n}\n\n// Update settings for a specific voice\nconst updateVoiceSettings = (type: VoiceType, newSettings: Partial<VoiceSettings>) => {\n  if (voiceSettings.value[type]) {\n    voiceSettings.value[type] = { ...voiceSettings.value[type], ...newSettings }\n    saveSettings()\n  }\n}\n\n// Reset settings for a specific voice\nconst resetVoiceSettings = (type: VoiceType) => {\n  if (defaultSettings[type]) {\n    voiceSettings.value[type] = { ...defaultSettings[type] }\n    saveSettings()\n  }\n}\n\n// Get voice type options for UI\nconst getVoiceTypeOptions = (): Array<{value: VoiceType, label: string, icon: string}> => {\n  const { t } = useI18n()\n  \n  return [\n    { value: 'female-sweet', label: t('voice.types.female_sweet', 'Female Sweet'), icon: '👩💖' },\n    { value: 'female-clear', label: t('voice.types.female_clear', 'Female Clear'), icon: '👩💼' },\n    { value: 'female-professional', label: t('voice.types.female_professional', 'Female Professional'), icon: '👩🎯' },\n    { value: 'male-strong', label: t('voice.types.male_strong', 'Male Strong'), icon: '👨💪' },\n    { value: 'male-gentle', label: t('voice.types.male_gentle', 'Male Gentle'), icon: '👨😊' },\n    { value: 'male-deep', label: t('voice.types.male_deep', 'Male Deep'), icon: '👨🎭' },\n    { value: 'korean-female', label: t('voice.types.korean_female', 'Korean Female'), icon: '🇰🇷👩' },\n    { value: 'korean-male', label: t('voice.types.korean_male', 'Korean Male'), icon: '🇰🇷👨' }\n  ]\n}\n\n// Get current voice info\nconst getCurrentVoiceInfo = () => {\n  if (!selectedVoice.value) return null\n  \n  // Extract gender from voice type\n  const gender = currentVoiceType.value.includes('female') ? 'female' : 'male'\n  \n  return {\n    name: selectedVoice.value.name,\n    lang: selectedVoice.value.lang,\n    gender: gender\n  }\n}\n\n// Watch for settings changes\nwatch(voiceSettings, () => {\n  saveSettings()\n}, { deep: true })\n\n// Watch specifically for voice type changes\nwatch(currentVoiceType, (newType, oldType) => {\n  if (newType !== oldType) {\n    console.log('Voice type changed from', oldType, 'to', newType)\n    updateSelectedVoice()\n    saveSettings()\n  }\n})\n\n// Initialize voices when available\nif ('speechSynthesis' in window) {\n  speechSynthesis.onvoiceschanged = () => {\n    loadVoices()\n  }\n}\n\n// Load settings on module initialization\nloadSettings()\nloadVoices()\n\n// Force reload and debug voices\nconst forceReloadVoices = () => {\n  console.log('🔄 Force reloading voices...')\n  if ('speechSynthesis' in window) {\n    // Cancel any ongoing speech\n    speechSynthesis.cancel()\n    \n    // Force reload voices\n    speechSynthesis.getVoices()\n    loadVoices()\n    \n    // Debug Korean voices\n    debugAvailableVoices()\n  }\n}\n\n// Export the composable\nexport function useVoiceStore() {\n  return {\n    voiceSettings,\n    currentVoiceType,\n    availableVoices,\n    selectedVoice,\n    setVoiceType,\n    updateVoiceSettings,\n    resetVoiceSettings,\n    playAudio,\n    createUtterance,\n    getVoiceTypeOptions,\n    getCurrentVoiceInfo,\n    loadVoices,\n    forceReloadVoices,\n    debugAvailableVoices\n  }\n}\n","import { useI18n } from 'vue-i18n'\r\n\r\nexport interface CustomTopic {\r\n  key: string\r\n  vi: string\r\n  en: string\r\n}\r\n\r\n/**\r\n * Get the translated name of a topic/category based on current locale\r\n * Also accepts a vocabulary object with categoryName for imported data\r\n */\r\nexport function getTopicName(categoryKey: string, vocabularyItem?: any): string {\r\n  const { t, locale } = useI18n()\r\n  \r\n  // If vocabulary item has categoryName from imported data, use it first\r\n  if (vocabularyItem && vocabularyItem.categoryName) {\r\n    return vocabularyItem.categoryName\r\n  }\r\n  \r\n  // First check if it's a custom topic\r\n  const customTopics = getCustomTopics()\r\n  const customTopic = customTopics.find(topic => topic.key === categoryKey)\r\n  \r\n  if (customTopic) {\r\n    // Return the name based on current locale\r\n    return locale.value === 'vi' ? customTopic.vi : customTopic.en\r\n  }\r\n  \r\n  // Check if it's a built-in category with translation\r\n  // Correct translation path for categories\r\n  const translationKey = `vocabulary.categories.${categoryKey}`\r\n  const translatedName = t(translationKey)\r\n  \r\n  // If translation exists and is not the same as the key, return it\r\n  if (translatedName && translatedName !== translationKey) {\r\n    return translatedName\r\n  }\r\n  \r\n  // For built-in categories, use hardcoded fallback if translation fails\r\n  const builtInCategories: { [key: string]: { vi: string, en: string } } = {\r\n    'technology': { vi: 'Công nghệ', en: 'Technology' },\r\n    'business': { vi: 'Kinh doanh', en: 'Business' },\r\n    'travel': { vi: 'Du lịch', en: 'Travel' },\r\n    'food': { vi: 'Ẩm thực', en: 'Food' },\r\n    'health': { vi: 'Sức khỏe', en: 'Health' },\r\n    'education': { vi: 'Giáo dục', en: 'Education' },\r\n    'sports': { vi: 'Thể thao', en: 'Sports' },\r\n    'entertainment': { vi: 'Giải trí', en: 'Entertainment' },\r\n    'science': { vi: 'Khoa học', en: 'Science' },\r\n    'art': { vi: 'Nghệ thuật', en: 'Art' },\r\n    'music': { vi: 'Âm nhạc', en: 'Music' },\r\n    'literature': { vi: 'Văn học', en: 'Literature' },\r\n    'politics': { vi: 'Chính trị', en: 'Politics' },\r\n    'environment': { vi: 'Môi trường', en: 'Environment' },\r\n    'fashion': { vi: 'Thời trang', en: 'Fashion' },\r\n    'finance': { vi: 'Tài chính', en: 'Finance' }\r\n  }\r\n  \r\n  if (builtInCategories[categoryKey]) {\r\n    return locale.value === 'vi' ? builtInCategories[categoryKey].vi : builtInCategories[categoryKey].en\r\n  }\r\n  \r\n  // Fallback to the category key itself (capitalized)\r\n  return categoryKey.charAt(0).toUpperCase() + categoryKey.slice(1)\r\n}\r\n\r\n/**\r\n * Get all available topics (built-in + custom) with their translated names\r\n */\r\nexport function getAllTopicsWithNames(): Array<{ key: string; name: string }> {\r\n  const { t } = useI18n()\r\n  \r\n  // Built-in categories\r\n  const builtInCategories = [\r\n    'technology', 'business', 'travel', 'food', 'health', 'education', \r\n    'sports', 'entertainment', 'science', 'art', 'music', 'literature', \r\n    'politics', 'environment', 'fashion', 'finance'\r\n  ]\r\n  \r\n  const result: Array<{ key: string; name: string }> = []\r\n  \r\n  // Add built-in categories\r\n  builtInCategories.forEach(key => {\r\n    result.push({\r\n      key,\r\n      name: getTopicName(key)\r\n    })\r\n  })\r\n  \r\n  // Add custom topics\r\n  const customTopics = getCustomTopics()\r\n  customTopics.forEach(topic => {\r\n    result.push({\r\n      key: topic.key,\r\n      name: getTopicName(topic.key)\r\n    })\r\n  })\r\n  \r\n  return result.sort((a, b) => a.name.localeCompare(b.name))\r\n}\r\n\r\n/**\r\n * Load custom topics from localStorage\r\n */\r\nexport function getCustomTopics(): CustomTopic[] {\r\n  try {\r\n    const saved = localStorage.getItem('customTopics')\r\n    if (saved) {\r\n      const topics = JSON.parse(saved)\r\n      return Array.isArray(topics) ? topics : []\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading custom topics:', error)\r\n  }\r\n  return []\r\n}\r\n\r\n/**\r\n * Save custom topics to localStorage\r\n */\r\nexport function saveCustomTopics(topics: CustomTopic[]): void {\r\n  try {\r\n    localStorage.setItem('customTopics', JSON.stringify(topics))\r\n  } catch (error) {\r\n    console.error('Error saving custom topics:', error)\r\n  }\r\n}\r\n\r\n/**\r\n * Check if a topic key is built-in or custom\r\n */\r\nexport function isBuiltInTopic(categoryKey: string): boolean {\r\n  const builtInCategories = [\r\n    'technology', 'business', 'travel', 'food', 'health', 'education', \r\n    'sports', 'entertainment', 'science', 'art', 'music', 'literature', \r\n    'politics', 'environment', 'fashion', 'finance'\r\n  ]\r\n  \r\n  return builtInCategories.includes(categoryKey)\r\n}\r\n\r\n/**\r\n * Get topic name for display in forms and lists\r\n * This function is reactive to locale changes\r\n */\r\nexport function useTopicName() {\r\n  const { locale } = useI18n()\r\n  \r\n  return {\r\n    getTopicName: (categoryKey: string) => {\r\n      // Re-compute when locale changes\r\n      return getTopicName(categoryKey)\r\n    },\r\n    getAllTopicsWithNames: () => {\r\n      // Re-compute when locale changes\r\n      return getAllTopicsWithNames()\r\n    },\r\n    currentLocale: locale\r\n  }\r\n}\r\n","<template>\r\n  <div>\r\n    <!-- Backdrop -->\r\n    <Transition\r\n      enter-active-class=\"transition-all duration-500 ease-out\"\r\n      enter-from-class=\"opacity-0\"\r\n      enter-to-class=\"opacity-100\"\r\n      leave-active-class=\"transition-all duration-300 ease-in\"\r\n      leave-from-class=\"opacity-100\"\r\n      leave-to-class=\"opacity-0\"\r\n    >\r\n      <div \r\n        v-if=\"showModal\" \r\n        class=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50 backdrop-blur-sm\"\r\n      >\r\n        <!-- Dialog Container -->\r\n        <Transition\r\n          enter-active-class=\"transition-all duration-500 ease-out\"\r\n          enter-from-class=\"opacity-0 scale-90 translate-y-8 rotate-1\"\r\n          enter-to-class=\"opacity-100 scale-100 translate-y-0 rotate-0\"\r\n          leave-active-class=\"transition-all duration-300 ease-in\"\r\n          leave-from-class=\"opacity-100 scale-100 translate-y-0 rotate-0\"\r\n          leave-to-class=\"opacity-0 scale-90 translate-y-8 rotate-1\"\r\n        >\r\n          <div class=\"w-full max-w-md mx-4\">\r\n            <!-- Modal Content -->\r\n            <div \r\n              class=\"bg-white dark:bg-[#0a0a0a] shadow-2xl rounded-xl border border-gray-200 dark:border-white/10 overflow-hidden transform\"\r\n              @click.stop\r\n            >\r\n              <!-- Modal Header -->\r\n              <div class=\"bg-white dark:bg-[#0a0a0a] p-4 border-b border-gray-200 dark:border-white/10\">\r\n                <div class=\"flex items-center justify-between\">\r\n                  <div class=\"flex items-center space-x-2\">\r\n                    <div class=\"w-2 h-2 bg-green-500 rounded-full\"></div>\r\n                    <h3 class=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n                      {{ t('vocabulary.moveVocabulary', 'Move Vocabulary') }}\r\n                    </h3>\r\n                  </div>\r\n                  <button \r\n                    @click=\"closeModal\"\r\n                    class=\"text-gray-400 dark:text-white/60 hover:text-gray-600 dark:hover:text-white transition-all duration-300 hover:scale-110 hover:rotate-90 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-black/20\"\r\n                  >\r\n                    <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                      <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"/>\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Modal Body -->\r\n              <div class=\"p-4\">\r\n                <div v-if=\"wordToMove\" class=\"mb-4\">\r\n                  <!-- Batch Move Display -->\r\n                  <div v-if=\"wordToMove.isBatchMove\" class=\"mb-4\">\r\n                    <p class=\"text-sm text-gray-500 dark:text-white/60 mb-1\">\r\n                      {{ t('vocabulary.movingCategory', 'Moving all words in category') }}:\r\n                    </p>\r\n                    <div class=\"mb-2\">\r\n                      <span class=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n                        {{ getTopicName(wordToMove.categoryName || wordToMove.category) }}\r\n                      </span>\r\n                    </div>\r\n                    <p class=\"text-sm text-gray-600 dark:text-white/70 bg-gray-50 dark:bg-black/20 px-3 py-2 rounded-md\">\r\n                      <span class=\"font-medium\">{{ wordToMove.batchWords?.length || 0 }}</span> \r\n                      {{ t('vocabulary.wordsWillBeMoved', 'words will be moved to the selected date') }}\r\n                    </p>\r\n                  </div>\r\n                  <!-- Single Move Display -->\r\n                  <div v-else>\r\n                    <p class=\"text-sm text-gray-500 dark:text-white/60 mb-1\">\r\n                      {{ t('vocabulary.movingWord', 'Moving word') }}:\r\n                    </p>\r\n                    <div class=\"mb-1\">\r\n                      <span class=\"text-lg font-medium text-gray-900 dark:text-white\">{{ wordToMove.word }}</span>\r\n                      <span class=\"text-gray-500 dark:text-white/60 ml-2\">- {{ wordToMove.meaning }}</span>\r\n                    </div>\r\n                    <p class=\"text-sm text-gray-500 dark:text-white/60\">\r\n                      Topic: {{ getTopicName(wordToMove.category) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Filter Toggle -->\r\n                <div class=\"mb-4\">\r\n                  <div class=\"flex items-center justify-between\">\r\n                    <label for=\"filterByTopic\" class=\"text-sm font-medium text-gray-700 dark:text-white\">\r\n                      {{ t('vocabulary.filterBySameTopic', 'Filter by same topic') }}\r\n                    </label>\r\n                    <label class=\"relative inline-flex items-center cursor-pointer\">\r\n                      <input \r\n                        id=\"filterByTopic\"\r\n                        v-model=\"filterBySameTopic\"\r\n                        type=\"checkbox\" \r\n                        class=\"sr-only peer\"\r\n                      />\r\n                      <div class=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-1 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"></div>\r\n                    </label>\r\n                  </div>\r\n                  <p v-if=\"filterBySameTopic\" class=\"text-xs text-gray-500 dark:text-white/60 mt-1\">\r\n                    {{ t('vocabulary.showingDatesWithSameTopic', 'Showing only dates with same topic') }}: \r\n                    <span class=\"font-medium\">{{ getTopicName(wordToMove?.categoryName || wordToMove?.category || '') }}</span>\r\n                  </p>\r\n                </div>\r\n\r\n                <div class=\"mb-4\">\r\n                  <label for=\"targetDate\" class=\"block text-sm font-medium text-gray-700 dark:text-white mb-2\">\r\n                    {{ t('vocabulary.selectTargetDateGroup', 'Select target date group') }}:\r\n                  </label>\r\n                  <select \r\n                    id=\"targetDate\"\r\n                    v-model=\"selectedTargetDate\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-white/20 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white\"\r\n                  >\r\n                    <option value=\"\">\r\n                      {{ t('vocabulary.selectDate', 'Select a date') }}\r\n                    </option>\r\n                    <option \r\n                      v-for=\"dateGroup in filteredDateGroups\" \r\n                      :key=\"dateGroup.date\" \r\n                      :value=\"dateGroup.date\"\r\n                    >\r\n                      {{ formatDateForDisplay(dateGroup.date) }} ({{ dateGroup.count }} words)\r\n                    </option>\r\n                  </select>\r\n                  <p v-if=\"filteredDateGroups.length === 0\" class=\"text-sm text-gray-500 dark:text-white/60 mt-2\">\r\n                    {{ t('vocabulary.noMatchingDates', 'No dates found with this topic. Try disabling the filter.') }}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Modal Footer -->\r\n              <div class=\"px-4 py-4 bg-white dark:bg-[#0a0a0a] border-t border-gray-200 dark:border-white/10 flex justify-end space-x-3\">\r\n                <button\r\n                  @click=\"closeModal\"\r\n                  class=\"px-4 py-2 text-sm font-medium text-gray-700 dark:text-white bg-gray-100 dark:bg-black/40 rounded-md hover:bg-gray-200 dark:hover:bg-black/60 transition-all duration-200 hover:scale-105 hover:shadow-md active:scale-95\"\r\n                >\r\n                  {{ t('common.cancel', 'Cancel') }}\r\n                </button>\r\n                <button\r\n                  @click=\"confirmMove\"\r\n                  :disabled=\"!selectedTargetDate\"\r\n                  class=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 hover:scale-105 hover:shadow-md hover:-translate-y-0.5 active:scale-95\"\r\n                >\r\n                  {{ wordToMove?.isBatchMove ? t('vocabulary.moveAll', 'Move All') : t('vocabulary.moveWord', 'Move Word') }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Transition>\r\n      </div>\r\n    </Transition>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, watch, onUnmounted } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { getTopicName } from '../../../../utils/topicUtils'\r\n\r\nconst { t, locale } = useI18n()\r\n\r\ninterface Word {\r\n  id: number\r\n  word: string\r\n  pronunciation: string\r\n  partOfSpeech: string\r\n  meaning: string\r\n  example?: string\r\n  level: string\r\n  category: string\r\n  favorite?: boolean\r\n  image?: string\r\n  createdAt?: string\r\n  updatedAt?: string\r\n  isBatchMove?: boolean\r\n  batchWords?: Word[]\r\n  categoryName?: string\r\n}\r\n\r\ninterface DateGroup {\r\n  date: string\r\n  count: number\r\n}\r\n\r\ninterface Props {\r\n  showModal: boolean\r\n  wordToMove: Word | null\r\n  availableDateGroups: DateGroup[]\r\n  sourceDate?: string\r\n  allVocabularies?: Word[]\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst emit = defineEmits<{\r\n  'close': []\r\n  'confirm-move': [data: { word: Word, targetDate: string }]\r\n}>()\r\n\r\nconst selectedTargetDate = ref('')\r\n\r\n// Load filterBySameTopic state from localStorage\r\nconst getStoredFilterState = (): boolean => {\r\n  try {\r\n    const stored = localStorage.getItem('vocabulary-move-filter-by-topic')\r\n    return stored ? JSON.parse(stored) : false\r\n  } catch (error) {\r\n    console.warn('Failed to parse stored filter state:', error)\r\n    return false\r\n  }\r\n}\r\n\r\n// Save filterBySameTopic state to localStorage\r\nconst setStoredFilterState = (value: boolean) => {\r\n  try {\r\n    localStorage.setItem('vocabulary-move-filter-by-topic', JSON.stringify(value))\r\n  } catch (error) {\r\n    console.warn('Failed to store filter state:', error)\r\n  }\r\n}\r\n\r\nconst filterBySameTopic = ref(getStoredFilterState())\r\n\r\n// Watch for changes and save to localStorage\r\nwatch(filterBySameTopic, (newValue) => {\r\n  setStoredFilterState(newValue)\r\n})\r\n\r\n// Computed property to filter date groups based on toggle\r\nconst filteredDateGroups = computed(() => {\r\n  console.log('Filter state:', {\r\n    filterBySameTopic: filterBySameTopic.value,\r\n    hasWordToMove: !!props.wordToMove,\r\n    hasAllVocabularies: !!props.allVocabularies,\r\n    allVocabulariesLength: props.allVocabularies?.length\r\n  })\r\n  \r\n  // If toggle is off or no data, return all date groups\r\n  if (!filterBySameTopic.value || !props.wordToMove || !props.allVocabularies) {\r\n    return props.availableDateGroups\r\n  }\r\n\r\n  // Get the category of the word to move\r\n  const currentCategory = props.wordToMove.categoryName || props.wordToMove.category\r\n  console.log('Current category:', currentCategory)\r\n  console.log('Word to move:', props.wordToMove)\r\n  \r\n  // If no category, return all date groups\r\n  if (!currentCategory) {\r\n    return props.availableDateGroups\r\n  }\r\n\r\n  // Log first few vocabularies to check structure\r\n  console.log('Sample vocabularies:', props.allVocabularies.slice(0, 3))\r\n\r\n  // Filter date groups to only show those containing words with the same category\r\n  const filtered = props.availableDateGroups.filter(dateGroup => {\r\n    // Parse the date group date\r\n    const groupDate = new Date(dateGroup.date)\r\n    const groupDateStr = groupDate.toISOString().split('T')[0]\r\n    \r\n    // Check if any vocabulary in allVocabularies matches this date and category\r\n    const hasMatch = props.allVocabularies!.some(vocab => {\r\n      // Skip if no date or different category\r\n      if (vocab.category !== currentCategory) return false\r\n      \r\n      // Check date match\r\n      const vocabDateStr = vocab.createdAt ? new Date(vocab.createdAt).toISOString().split('T')[0] : null\r\n      const vocabUpdateDateStr = vocab.updatedAt ? new Date(vocab.updatedAt).toISOString().split('T')[0] : null\r\n      \r\n      // Match if either created or updated date matches the group date\r\n      const matches = vocabDateStr === groupDateStr || vocabUpdateDateStr === groupDateStr\r\n      \r\n      if (matches) {\r\n        console.log('Found match:', {\r\n          vocab: vocab.word,\r\n          category: vocab.category,\r\n          vocabDate: vocabDateStr,\r\n          groupDate: groupDateStr\r\n        })\r\n      }\r\n      \r\n      return matches\r\n    })\r\n    \r\n    return hasMatch\r\n  })\r\n  \r\n  console.log('Filtered result:', filtered.length, 'groups')\r\n  return filtered\r\n})\r\n\r\n// Format date for display\r\nconst formatDateForDisplay = (dateStr: string) => {\r\n  const date = new Date(dateStr)\r\n  return date.toLocaleDateString(locale.value, {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\n// Close modal and reset state\r\nconst closeModal = () => {\r\n  selectedTargetDate.value = ''\r\n  // Don't reset filterBySameTopic - keep the user's preference\r\n  emit('close')\r\n}\r\n\r\n// Confirm move action\r\nconst confirmMove = () => {\r\n  if (props.wordToMove && selectedTargetDate.value) {\r\n    emit('confirm-move', {\r\n      word: props.wordToMove,\r\n      targetDate: selectedTargetDate.value\r\n    })\r\n    closeModal()\r\n  }\r\n}\r\n\r\n// Watch for modal open/close to manage body scroll\r\nwatch(() => props.showModal, (newValue) => {\r\n  if (newValue) {\r\n    document.body.classList.add('modal-open')\r\n  } else {\r\n    document.body.classList.remove('modal-open')\r\n    selectedTargetDate.value = '' // Reset selection\r\n    // Don't reset filterBySameTopic - keep the user's preference\r\n  }\r\n})\r\n\r\n// Cleanup on component unmount\r\nonUnmounted(() => {\r\n  document.body.classList.remove('modal-open')\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n/* Animation keyframes */\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.animate-fade-in-up {\r\n  animation: fadeInUp 0.6s ease-out forwards;\r\n  opacity: 0;\r\n}\r\n\r\n/* Global styles for modal scroll lock */\r\n:deep(body.modal-open) {\r\n  overflow: hidden !important;\r\n}\r\n</style>\r\n","import { ref, watch } from 'vue';\r\n\r\nexport function useVocabularyFilters() {\r\n  const searchQuery = ref('');\r\n  const selectedCategory = ref('');\r\n  const selectedLevel = ref('');\r\n  const showFavoritesOnly = ref(false);\r\n  const currentPage = ref(1);\r\n  const dateGroupPages = ref<Record<string, number>>({});\r\n\r\n  function getStoredValue(key: string, defaultValue: any) {\r\n    try {\r\n      const stored = localStorage.getItem(key);\r\n      return stored !== null ? JSON.parse(stored) : defaultValue;\r\n    } catch {\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  function setStoredValue(key: string, value: any) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n\r\n  showFavoritesOnly.value = getStoredValue('vocabulary-show-favorites-only', false);\r\n  searchQuery.value = getStoredValue('vocabulary-search-query', '');\r\n  selectedCategory.value = getStoredValue('vocabulary-selected-category', '');\r\n  selectedLevel.value = getStoredValue('vocabulary-selected-level', '');\r\n\r\n  const updateShowFavoritesOnly = (value: boolean) => {\r\n    showFavoritesOnly.value = value;\r\n    setStoredValue('vocabulary-show-favorites-only', value);\r\n    currentPage.value = 1;\r\n    dateGroupPages.value = {};\r\n  };\r\n\r\n  const updateSearchQuery = (value: string) => {\r\n    searchQuery.value = value;\r\n    setStoredValue('vocabulary-search-query', value);\r\n    currentPage.value = 1;\r\n    dateGroupPages.value = {};\r\n  };\r\n\r\n  const updateSelectedCategory = (value: string) => {\r\n    selectedCategory.value = value;\r\n    setStoredValue('vocabulary-selected-category', value);\r\n    currentPage.value = 1;\r\n    dateGroupPages.value = {};\r\n  };\r\n\r\n  const updateSelectedLevel = (value: string) => {\r\n    selectedLevel.value = value;\r\n    setStoredValue('vocabulary-selected-level', value);\r\n    currentPage.value = 1;\r\n    dateGroupPages.value = {};\r\n  };\r\n\r\n  return {\r\n    searchQuery,\r\n    selectedCategory,\r\n    selectedLevel,\r\n    showFavoritesOnly,\r\n    currentPage,\r\n    dateGroupPages,\r\n    updateShowFavoritesOnly,\r\n    updateSearchQuery,\r\n    updateSelectedCategory,\r\n    updateSelectedLevel,\r\n  };\r\n} ","import { ref, computed } from 'vue';\r\n\r\nexport function useVocabularyPagination(filteredVocabulary: any, useGrouping: any, itemsPerPage: any) {\r\n  const currentPage = ref(1);\r\n\r\n  const totalPages = computed(() => {\r\n    if (useGrouping.value) return 1;\r\n    return Math.ceil(filteredVocabulary.value.length / itemsPerPage.value);\r\n  });\r\n\r\n  const paginatedVocabulary = computed(() => {\r\n    if (useGrouping.value) return filteredVocabulary.value;\r\n    const start = (currentPage.value - 1) * itemsPerPage.value;\r\n    const end = start + itemsPerPage.value;\r\n    return filteredVocabulary.value.slice(start, end);\r\n  });\r\n\r\n  const startIndex = computed(() => (currentPage.value - 1) * itemsPerPage.value + 1);\r\n  const endIndex = computed(() => Math.min(currentPage.value * itemsPerPage.value, filteredVocabulary.value.length));\r\n\r\n  const visiblePages = computed(() => {\r\n    const pages = [];\r\n    const start = Math.max(1, currentPage.value - 2);\r\n    const end = Math.min(totalPages.value, currentPage.value + 2);\r\n    for (let i = start; i <= end; i++) {\r\n      pages.push(i);\r\n    }\r\n    return pages;\r\n  });\r\n\r\n  const previousPage = () => {\r\n    if (currentPage.value > 1) currentPage.value--;\r\n  };\r\n\r\n  const nextPage = () => {\r\n    if (currentPage.value < totalPages.value) currentPage.value++;\r\n  };\r\n\r\n  const goToPage = (page: number) => {\r\n    currentPage.value = page;\r\n  };\r\n\r\n  return {\r\n    currentPage,\r\n    totalPages,\r\n    paginatedVocabulary,\r\n    startIndex,\r\n    endIndex,\r\n    visiblePages,\r\n    previousPage,\r\n    nextPage,\r\n    goToPage,\r\n  };\r\n} ","import { ref } from 'vue';\r\nimport { getDateKey } from '../../../utils/dateUtils';\r\n\r\nexport function useVocabularyGrouping() {\r\n  const useGrouping = ref(false);\r\n  const itemsPerPageGrouped = ref(5);\r\n  const dateGroupPages = ref<Record<string, number>>({});\r\n\r\n  const getStoredUseGrouping = (): boolean => {\r\n    const stored = localStorage.getItem('vocabulary-use-grouping');\r\n    return stored ? JSON.parse(stored) : false;\r\n  };\r\n\r\n  const setStoredUseGrouping = (value: boolean) => {\r\n    localStorage.setItem('vocabulary-use-grouping', JSON.stringify(value));\r\n  };\r\n\r\n  useGrouping.value = getStoredUseGrouping();\r\n\r\n  const toggleGrouping = () => {\r\n    useGrouping.value = !useGrouping.value;\r\n    setStoredUseGrouping(useGrouping.value);\r\n    // Resetting page state is handled in the main component\r\n  };\r\n  \r\n  const reloadGroupingState = () => {\r\n    useGrouping.value = getStoredUseGrouping();\r\n  };\r\n  \r\n  const dateGroupPrevious = (date: string, filteredVocabulary: any[]) => {\r\n    const currentPage = dateGroupPages.value[date] || 1;\r\n    if (currentPage > 1) {\r\n      dateGroupPages.value[date] = currentPage - 1;\r\n    }\r\n  };\r\n\r\n  const dateGroupNext = (date: string, filteredVocabulary: any[]) => {\r\n    const currentPage = dateGroupPages.value[date] || 1;\r\n    const dateGroup = filteredVocabulary.filter(word => getDateKey(word.createdAt) === date);\r\n    const totalPages = Math.ceil(dateGroup.length / itemsPerPageGrouped.value);\r\n    if (currentPage < totalPages) {\r\n      dateGroupPages.value[date] = currentPage + 1;\r\n    }\r\n  };\r\n\r\n  const dateGroupGoToPage = (date: string, page: number) => {\r\n    dateGroupPages.value[date] = page;\r\n  };\r\n\r\n  return {\r\n    useGrouping,\r\n    itemsPerPageGrouped,\r\n    dateGroupPages,\r\n    toggleGrouping,\r\n    reloadGroupingState,\r\n    dateGroupPrevious,\r\n    dateGroupNext,\r\n    dateGroupGoToPage,\r\n  };\r\n} ","import { ref } from 'vue';\r\nimport type { Vocabulary } from '../../../composables/useVocabularyStore';\r\n\r\nexport function useVocabularyDialogs() {\r\n  const showFormDialog = ref(false);\r\n  const selectedVocabulary = ref<Vocabulary | null>(null);\r\n  const showDetailDialog = ref(false);\r\n  const selectedVocabularyForDetail = ref<Vocabulary | null>(null);\r\n\r\n  const openAddDialog = () => {\r\n    selectedVocabulary.value = null;\r\n    showFormDialog.value = true;\r\n    // Dispatch edit word event\r\n    window.dispatchEvent(new CustomEvent('vocabulary-edit-word'));\r\n  };\r\n\r\n  const openEditDialog = (word: Vocabulary) => {\r\n    selectedVocabulary.value = word;\r\n    showFormDialog.value = true;\r\n    // Dispatch edit word event\r\n    window.dispatchEvent(new CustomEvent('vocabulary-edit-word'));\r\n  };\r\n\r\n  const onVocabularySaved = () => {\r\n    showFormDialog.value = false;\r\n    selectedVocabulary.value = null;\r\n  };\r\n\r\n  const openDetailsDialog = (word: Vocabulary) => {\r\n    selectedVocabularyForDetail.value = word;\r\n    showDetailDialog.value = true;\r\n    // Dispatch view details event\r\n    window.dispatchEvent(new CustomEvent('vocabulary-view-details'));\r\n  };\r\n\r\n  const openEditFromDetail = (word: Vocabulary) => {\r\n    showDetailDialog.value = false;\r\n    selectedVocabulary.value = word;\r\n    showFormDialog.value = true;\r\n    // Dispatch edit word event\r\n    window.dispatchEvent(new CustomEvent('vocabulary-edit-word'));\r\n  };\r\n\r\n  return {\r\n    showFormDialog,\r\n    selectedVocabulary,\r\n    showDetailDialog,\r\n    selectedVocabularyForDetail,\r\n    openAddDialog,\r\n    openEditDialog,\r\n    onVocabularySaved,\r\n    openDetailsDialog,\r\n    openEditFromDetail,\r\n  };\r\n} ","import { ref, watch } from 'vue';\nimport { useVocabularyStore } from '../../../composables/useVocabularyStore';\nimport { useModalStore } from '../../../stores/modalStore';\n\nexport function useTopicManager(debounceAutoSave: () => void) {\n  const showTopicManager = ref(false);\n  const vocabularyStore = useVocabularyStore();\n  const modalStore = useModalStore();\n\n  const openTopicManager = () => {\n    showTopicManager.value = true;\n    modalStore.setTopicManager(true);\n  };\n\n  // Watch for changes to sync with modal store\n  watch(showTopicManager, (newValue: boolean) => {\n    modalStore.setTopicManager(newValue);\n  });\n\n  const onTopicAdded = (topic: { key: string; vi: string; en: string }) => {\n    vocabularyStore.addCustomTopic(topic);\n    debounceAutoSave();\n    window.dispatchEvent(new CustomEvent('topics-updated'));\n  };\n\n  const onTopicUpdated = (oldKey: string, topic: { key: string; vi: string; en: string }) => {\n    vocabularyStore.allVocabularies.value.forEach(vocab => {\n      if (vocab.category === oldKey) {\n        vocabularyStore.updateVocabulary(vocab.id, { category: topic.key });\n      }\n    });\n    vocabularyStore.updateCustomTopic(oldKey, topic);\n    debounceAutoSave();\n    window.dispatchEvent(new CustomEvent('topics-updated'));\n  };\n\n  const onTopicDeleted = (key: string) => {\n    vocabularyStore.deleteCustomTopic(key);\n    debounceAutoSave();\n    window.dispatchEvent(new CustomEvent('topics-updated'));\n  };\n\n  return {\n    showTopicManager,\n    openTopicManager,\n    onTopicAdded,\n    onTopicUpdated,\n    onTopicDeleted,\n  };\n} ","import { ref, computed, watch, onMounted, onUnmounted, defineAsyncComponent } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport { useToast, POSITION } from 'vue-toastification';\nimport { useVocabularyStore } from '../../../composables/useVocabularyStore';\nimport { getCustomTopics } from '../../../utils/topicUtils';\n\nconst ConfirmToast = defineAsyncComponent(() => import(\"../../../components/common/ConfirmToast.vue\"));\n\nexport function useVocabularySaving() {\n  const { t } = useI18n();\n  const vocabularyStore = useVocabularyStore();\n  const toast = useToast();\n\n  const autoSaveEnabled = ref(true);\n  const isSaving = ref(false);\n  const lastSaveTime = ref('');\n  const saveStatus = ref<'idle' | 'saving' | 'success' | 'error'>('idle');\n  const autoSaveFileHandle = ref<any>(null);\n  const hasAutoSaveFile = ref<boolean>(false);\n  const autoSaveFileName = 'vocabulary-auto-backup.json';\n  let autoSaveTimer: number | null = null;\n  let debounceTimer: number | null = null;\n\n  // Add a new ref to store the file path for debugging\n  const autoSaveFilePath = ref<string>('');\n  \n  // IndexedDB setup for persisting file handles\n  const DB_NAME = 'vocabulary-file-handles';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'file-handles';\n  const FILE_HANDLE_KEY = 'auto-save-file-handle';\n  \n  // IndexedDB operations\n  const openDB = (): Promise<IDBDatabase> => {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          db.createObjectStore(STORE_NAME);\n        }\n      };\n    });\n  };\n  \n  const saveFileHandleToIDB = async (fileHandle: any): Promise<void> => {\n    try {\n      const db = await openDB();\n      const transaction = db.transaction([STORE_NAME], 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      await new Promise<void>((resolve, reject) => {\n        const request = store.put(fileHandle, FILE_HANDLE_KEY);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => resolve();\n      });\n      console.log('File handle saved to IndexedDB');\n    } catch (error) {\n      console.error('Error saving file handle to IndexedDB:', error);\n    }\n  };\n  \n  const loadFileHandleFromIDB = async (): Promise<any | null> => {\n    try {\n      const db = await openDB();\n      const transaction = db.transaction([STORE_NAME], 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      return new Promise<any | null>((resolve, reject) => {\n        const request = store.get(FILE_HANDLE_KEY);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => resolve(request.result || null);\n      });\n    } catch (error) {\n      console.error('Error loading file handle from IndexedDB:', error);\n      return null;\n    }\n  };\n  \n  const clearFileHandleFromIDB = async (): Promise<void> => {\n    try {\n      const db = await openDB();\n      const transaction = db.transaction([STORE_NAME], 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      await new Promise<void>((resolve, reject) => {\n        const request = store.delete(FILE_HANDLE_KEY);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => resolve();\n      });\n      console.log('File handle cleared from IndexedDB');\n    } catch (error) {\n      console.error('Error clearing file handle from IndexedDB:', error);\n    }\n  };\n\n  const getStoredValue = (key: string, defaultValue: any) => {\n    try {\n      const stored = localStorage.getItem(key);\n      return stored !== null ? JSON.parse(stored) : defaultValue;\n    } catch {\n      return defaultValue;\n    }\n  };\n\n  const setStoredValue = (key: string, value: any) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  autoSaveEnabled.value = getStoredValue('vocabulary-auto-save-enabled', true);\n  hasAutoSaveFile.value = getStoredValue('vocabulary-has-auto-save-file', false);\n  lastSaveTime.value = getStoredValue('vocabulary-last-save-time', '');\n  \n  // Restore file handle from IndexedDB on mount\n  const initializeAutoSave = async () => {\n    console.log('🔧 Initializing auto-save, hasAutoSaveFile:', hasAutoSaveFile.value);\n    \n    if (hasAutoSaveFile.value && 'showSaveFilePicker' in window) {\n      try {\n        console.log('🔍 Attempting to restore file handle from IndexedDB...');\n        const savedFileHandle = await loadFileHandleFromIDB();\n        \n        if (savedFileHandle) {\n          console.log('✅ Found saved file handle in IndexedDB');\n          // Verify the file handle is still valid\n          try {\n            const opts = { mode: 'readwrite' as const };\n            const permission = await savedFileHandle.queryPermission(opts);\n            console.log('🔐 File handle permission:', permission);\n            \n            if (permission === 'granted' || permission === 'prompt') {\n              autoSaveFileHandle.value = savedFileHandle;\n              console.log('✅ File handle restored to autoSaveFileHandle');\n              \n              // Try to get file info for display\n              try {\n                const fileProps = await savedFileHandle.getFile();\n                autoSaveFilePath.value = fileProps.name;\n                console.log('📁 File handle restored successfully:', fileProps.name);\n                \n                // If permission is prompt, request it silently\n                if (permission === 'prompt') {\n                  console.log('🔄 Requesting permission for file handle...');\n                  await savedFileHandle.requestPermission(opts);\n                }\n              } catch (e) {\n                console.log('⚠️ Could not get file properties, but handle seems valid:', e);\n              }\n            } else {\n              console.log('❌ File handle permission denied, clearing stored handle');\n              await clearFileHandleFromIDB();\n              hasAutoSaveFile.value = false;\n              setStoredValue('vocabulary-has-auto-save-file', false);\n            }\n          } catch (error) {\n            console.log('❌ Saved file handle is invalid, clearing:', error);\n            await clearFileHandleFromIDB();\n            hasAutoSaveFile.value = false;\n            setStoredValue('vocabulary-has-auto-save-file', false);\n          }\n        } else {\n          console.log('❌ No file handle found in IndexedDB');\n          hasAutoSaveFile.value = false;\n          setStoredValue('vocabulary-has-auto-save-file', false);\n        }\n      } catch (error) {\n        console.error('❌ Error initializing auto-save:', error);\n        hasAutoSaveFile.value = false;\n        setStoredValue('vocabulary-has-auto-save-file', false);\n      }\n    } else {\n      console.log('ℹ️ Auto-save not enabled or File System API not supported');\n    }\n  };\n\n  const saveToFileSystem = async (data: any) => {\n    try {\n      const fileHandle = await (window as any).showSaveFilePicker({\n        suggestedName: `vocabulary-backup-${new Date().toISOString().split('T')[0]}.json`,\n        types: [{\n          description: 'JSON files',\n          accept: { 'application/json': ['.json'] }\n        }]\n      });\n      const writable = await fileHandle.createWritable();\n      await writable.write(JSON.stringify(data, null, 2));\n      await writable.close();\n      autoSaveFileHandle.value = fileHandle;\n      hasAutoSaveFile.value = true;\n      setStoredValue('vocabulary-has-auto-save-file', true);\n      \n      // Save file handle to IndexedDB for persistence\n      await saveFileHandleToIDB(fileHandle);\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        await downloadJsonFile(data);\n      }\n    }\n  };\n\n  const downloadJsonFile = async (data: any) => {\n    const jsonString = JSON.stringify(data, null, 2);\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `vocabulary-backup-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const getVocabularyData = () => {\n    const getGroupTopics = (): Record<string, string> => {\n        try {\n            const stored = localStorage.getItem('vocabulary-group-topics');\n            return stored ? JSON.parse(stored) : {};\n        } catch (error) {\n            return {};\n        }\n    };\n    \n    // Get vocabulary notes\n    const getVocabularyNotes = (): Record<string, string> => {\n        try {\n            const stored = localStorage.getItem('vocabulary-notes');\n            return stored ? JSON.parse(stored) : {};\n        } catch (error) {\n            return {};\n        }\n    };\n    \n    // Get marked vocabulary words\n    const getMarkedWords = (): Record<string, string[]> => {\n        try {\n            const stored = localStorage.getItem('vocabulary-marked-words');\n            return stored ? JSON.parse(stored) : {};\n        } catch (error) {\n            return {};\n        }\n    };\n    \n    // Helper function to get grammar rules\n    const getGrammarRules = (): any[] => {\n        try {\n            const stored = localStorage.getItem('grammar-rules');\n            return stored ? JSON.parse(stored) : [];\n        } catch (error) {\n            return [];\n        }\n    };\n    \n    // Helper function to get category name without Vue composables\n    const getCategoryName = (categoryKey: string): string => {\n      // Check custom topics first\n      const customTopics = getCustomTopics()\n      const customTopic = customTopics.find(topic => topic.key === categoryKey)\n      \n      if (customTopic) {\n        // Default to English name for export\n        return customTopic.en\n      }\n      \n      // Built-in categories mapping\n      const builtInCategories: { [key: string]: string } = {\n        'technology': 'Technology',\n        'business': 'Business',\n        'travel': 'Travel',\n        'food': 'Food',\n        'health': 'Health',\n        'education': 'Education',\n        'sports': 'Sports',\n        'entertainment': 'Entertainment',\n        'science': 'Science',\n        'art': 'Art',\n        'music': 'Music',\n        'literature': 'Literature',\n        'politics': 'Politics',\n        'environment': 'Environment',\n        'fashion': 'Fashion',\n        'finance': 'Finance'\n      }\n      \n      return builtInCategories[categoryKey] || categoryKey.charAt(0).toUpperCase() + categoryKey.slice(1)\n    }\n    \n    // Enhance vocabularies with category names\n    const enhancedVocabularies = vocabularyStore.allVocabularies.value.map(vocab => ({\n        ...vocab,\n        categoryName: getCategoryName(vocab.category) // Add category name alongside category key\n    }));\n    \n    return {\n        vocabularies: enhancedVocabularies,\n        customTopics: vocabularyStore.customTopics.value,\n        groupTopics: getGroupTopics(),\n        vocabularyNotes: getVocabularyNotes(),\n        markedWords: getMarkedWords(),\n        grammarRules: getGrammarRules(), // Include grammar rules in export\n        accordionState: JSON.parse(localStorage.getItem('vocabulary-accordion-state') || '{}'),\n        useGrouping: JSON.parse(localStorage.getItem('vocabulary-use-grouping') || 'false'), // Save grouping state\n        exportDate: new Date().toISOString(),\n        version: '1.5', // Increment version to indicate grammar rules support\n        totalCount: vocabularyStore.totalCount.value\n    };\n  };\n\n  const manualSave = async () => {\n    if (isSaving.value) return;\n    isSaving.value = true;\n    saveStatus.value = 'saving';\n    try {\n      const vocabularyData = getVocabularyData();\n      if ('showSaveFilePicker' in window) {\n        await saveToFileSystem(vocabularyData);\n      } else {\n        await downloadJsonFile(vocabularyData);\n      }\n      vocabularyStore.saveToLocalStorage();\n      const now = new Date().toLocaleString('vi-VN');\n      lastSaveTime.value = now;\n      setStoredValue('vocabulary-last-save-time', now);\n      saveStatus.value = 'success';\n      setTimeout(() => { if (saveStatus.value === 'success') saveStatus.value = 'idle'; }, 2000);\n    } catch (error) {\n      saveStatus.value = 'error';\n      setTimeout(() => { if (saveStatus.value === 'error') saveStatus.value = 'idle'; }, 3000);\n    } finally {\n      isSaving.value = false;\n    }\n  };\n\n  const performAutoSave = async () => {\n    if (!autoSaveEnabled.value) return;\n    try {\n      saveStatus.value = 'saving';\n      const vocabularyData = getVocabularyData();\n      \n      // First, save to localStorage\n      vocabularyStore.saveToLocalStorage();\n      \n      // Then, try to save to file if a file handle is available\n      let fileSaveSuccess = false;\n      if (hasAutoSaveFile.value) {\n        fileSaveSuccess = await tryAutoSaveToFile(vocabularyData);\n      }\n      \n      // Update timestamps and status\n      const now = new Date().toLocaleString('vi-VN');\n      lastSaveTime.value = now;\n      setStoredValue('vocabulary-last-save-time', now);\n      \n      saveStatus.value = 'success';\n      setTimeout(() => { \n        if (saveStatus.value === 'success') {\n          saveStatus.value = 'idle';\n        }\n      }, 1000);\n      \n      return fileSaveSuccess;\n    } catch (error) {\n      console.error(\"Auto-save error:\", error);\n      saveStatus.value = 'error';\n      setTimeout(() => { \n        if (saveStatus.value === 'error') {\n          saveStatus.value = 'idle';\n        }\n      }, 2000);\n      return false;\n    }\n  };\n\n  const tryAutoSaveToFile = async (data: any) => {\n    if (!('showSaveFilePicker' in window)) {\n      console.log(\"Browser doesn't support File System Access API\");\n      return false;\n    }\n    \n    if (!autoSaveFileHandle.value) {\n      console.log(\"No auto-save file handle available\");\n      return false;\n    }\n    \n    try {\n      console.log(\"Attempting to auto-save to file...\", autoSaveFilePath.value);\n      \n      // Verify the file handle is valid by checking permissions\n      const opts = { mode: 'readwrite' as const };\n      const permission = await autoSaveFileHandle.value.queryPermission(opts);\n      \n      if (permission !== 'granted') {\n        console.log(\"Requesting permission to write to file...\");\n        const newPermission = await autoSaveFileHandle.value.requestPermission(opts);\n        if (newPermission !== 'granted') {\n          console.error(\"Permission to write to file denied\");\n          toast.error(t('vocabulary.save.errors.permissionDenied', 'Permission denied'));\n          return false;\n        }\n      }\n      \n      // Create a writable stream\n      console.log(\"Creating writable stream...\");\n      const writable = await autoSaveFileHandle.value.createWritable();\n      \n      // Convert data to JSON string\n      const jsonString = JSON.stringify(data, null, 2);\n      console.log(`Writing ${jsonString.length} characters to file...`);\n      \n      // Write the data\n      await writable.write(jsonString);\n      \n      // Close the stream\n      console.log(\"Closing writable stream...\");\n      await writable.close();\n      \n      console.log(\"Auto-save to file completed successfully:\", autoSaveFilePath.value);\n      \n      // Update last save time after successful file save\n      const now = new Date().toLocaleString('vi-VN');\n      lastSaveTime.value = now;\n      setStoredValue('vocabulary-last-save-time', now);\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error auto-saving to file:\", error);\n      \n      // Check if it's a permission error\n      if (error instanceof DOMException && error.name === 'NotAllowedError') {\n        toast.error(t('vocabulary.save.errors.permissionDenied', 'Permission denied'));\n      } else {\n        toast.error(t('vocabulary.save.errors.autoSaveFileFailed', 'Auto save file failed'));\n      }\n      \n      // Reset file handle only if it's not a permission error\n      if (!(error instanceof DOMException && error.name === 'NotAllowedError')) {\n        autoSaveFileHandle.value = null;\n        hasAutoSaveFile.value = false;\n        setStoredValue('vocabulary-has-auto-save-file', false);\n        // Clear from IndexedDB as well\n        await clearFileHandleFromIDB();\n      }\n      \n      return false;\n    }\n  };\n\n  const debounceAutoSave = () => {\n    if (!autoSaveEnabled.value) {\n      console.log(\"Auto-save is disabled, skipping debounce\");\n      return;\n    }\n    \n    console.log(\"Setting up debounce auto-save timer...\");\n    \n    // Clear any existing debounce timer\n    if (debounceTimer) {\n      console.log(\"Clearing existing debounce timer\");\n      clearTimeout(debounceTimer);\n      debounceTimer = null;\n    }\n    \n    // Set a new debounce timer\n    console.log(\"Creating new debounce timer\");\n    debounceTimer = setTimeout(async () => {\n      console.log(\"Debounce timer triggered, performing auto-save...\");\n      \n      if (!hasAutoSaveFile.value) {\n        console.log(\"No auto-save file selected, saving to localStorage only\");\n        vocabularyStore.saveToLocalStorage();\n        return;\n      }\n      \n      const result = await performAutoSave();\n      console.log(\"Auto-save result:\", result ? \"Success\" : \"Failed\");\n      \n      if (!result) {\n        // If auto-save failed, try to prompt user to select a new file\n        toast.info(t('vocabulary.save.autoSaveRetry', 'Auto save failed. Click to select a new file.') || 'Auto save failed. Click to select a new file.', {\n          timeout: 5000,\n          onClick: () => {\n            setupAutoSaveFile();\n          }\n        });\n      }\n    }, 500) as unknown as number;\n  };\n\n  const scheduleAutoSave = () => {\n    if (autoSaveTimer) clearTimeout(autoSaveTimer);\n    autoSaveTimer = window.setTimeout(() => {\n      if (autoSaveEnabled.value) {\n        performAutoSave();\n        scheduleAutoSave();\n      }\n    }, 10000);\n  };\n\n  const setupAutoSaveFile = async () => {\n    if ('showSaveFilePicker' in window) {\n      try {\n        console.log(\"Setting up auto-save file...\");\n        const fileHandle = await (window as any).showSaveFilePicker({\n          suggestedName: autoSaveFileName,\n          types: [{ description: 'JSON files', accept: { 'application/json': ['.json'] } }]\n        });\n        \n        // Store the file handle\n        autoSaveFileHandle.value = fileHandle;\n        \n        // Save file handle to IndexedDB for persistence\n        await saveFileHandleToIDB(fileHandle);\n        \n        // Try to get the file name/path for debugging\n        try {\n          const fileProps = await fileHandle.getFile();\n          autoSaveFilePath.value = fileProps.name;\n          console.log(\"Selected auto-save file:\", fileProps.name);\n        } catch (e) {\n          console.log(\"Could not get file properties:\", e);\n        }\n        \n        hasAutoSaveFile.value = true;\n        setStoredValue('vocabulary-has-auto-save-file', true);\n        \n        // Perform an immediate auto-save to verify the file handle works\n        const vocabularyData = getVocabularyData();\n        \n        console.log(\"Testing auto-save with file handle:\", autoSaveFileHandle.value);\n        const saveResult = await tryAutoSaveToFile(vocabularyData);\n        \n        if (saveResult) {\n          toast.success(t('vocabulary.save.autoSaveFileSetup', 'Auto save file setup'));\n          console.log(\"Auto-save file setup successful!\");\n        } else {\n          toast.error(t('vocabulary.save.errors.autoSaveFileFailed', 'Auto save file failed'));\n          console.error(\"Auto-save file setup failed!\");\n        }\n      } catch (error) {\n        if ((error as Error).name !== 'AbortError') {\n          console.error(\"Error setting up auto-save file:\", error);\n          toast.error(t('vocabulary.save.errors.fileSelectError', { error: (error as Error).message }) || `File selection error: ${(error as Error).message}`);\n        }\n      }\n    } else {\n      toast.error(t('vocabulary.save.errors.browserNotSupported', 'Browser not supported'));\n    }\n  };\n\n  const handleFileImport = (file: File) => {\n    if (!file || !file.name.endsWith('.json')) {\n      toast.error(t('vocabulary.save.errors.invalidFile', 'Invalid file'));\n      return;\n    }\n\n    const toastId = toast(\n      {\n        component: ConfirmToast,\n        props: {\n          message: t('vocabulary.save.import.confirmMessage', { filename: file.name }, `Import ${file.name}? This will replace all current vocabulary.`),\n          confirmText: t('common.confirm', 'Confirm'),\n          cancelText: t('common.cancel', 'Cancel'),\n          onConfirm: () => {\n            // Read the file after confirmation\n            const reader = new FileReader();\n            reader.onload = (e) => {\n              isSaving.value = true;\n              try {\n                const text = e.target?.result as string;\n                const data = JSON.parse(text);\n                if (!data.vocabularies || !Array.isArray(data.vocabularies)) {\n                  toast.error(t('vocabulary.save.errors.invalidFile', 'Invalid file'));\n                  isSaving.value = false;\n                  return;\n                }\n                vocabularyStore.importVocabularies(data.vocabularies);\n                            // Import custom topics if they exist\n               if (data.customTopics && Array.isArray(data.customTopics)) {\n                 // Clear existing custom topics and replace with imported ones\n                 localStorage.setItem('customTopics', JSON.stringify(data.customTopics));\n                 // Refresh the vocabulary store's custom topics\n                 vocabularyStore.refreshCustomTopics();\n                 console.log(\"Imported custom topics:\", data.customTopics);\n               }\n               \n               // Also handle legacy 'topics' format for backward compatibility\n               if (data.topics && Array.isArray(data.topics)) {\n                 // Clear existing custom topics and replace with imported ones (legacy format)\n                 localStorage.setItem('customTopics', JSON.stringify(data.topics));\n                 // Refresh the vocabulary store's custom topics\n                 vocabularyStore.refreshCustomTopics();\n                 console.log(\"Imported legacy topics:\", data.topics);\n               }\n              \n              // Import group topics (date group topics)\n              if (data.groupTopics && typeof data.groupTopics === 'object') {\n                localStorage.setItem('vocabulary-group-topics', JSON.stringify(data.groupTopics));\n                console.log(\"Imported group topics:\", data.groupTopics);\n              }\n              \n              // Import accordion state\n              if (data.accordionState && typeof data.accordionState === 'object') {\n                localStorage.setItem('vocabulary-accordion-state', JSON.stringify(data.accordionState));\n                console.log(\"Imported accordion state:\", data.accordionState);\n              }\n              \n              // Import grouping state\n              if (typeof data.useGrouping === 'boolean') {\n                localStorage.setItem('vocabulary-use-grouping', JSON.stringify(data.useGrouping));\n                console.log(\"Imported grouping state:\", data.useGrouping);\n              }\n              \n              // Import vocabulary notes\n              if (data.vocabularyNotes && typeof data.vocabularyNotes === 'object') {\n                localStorage.setItem('vocabulary-notes', JSON.stringify(data.vocabularyNotes));\n                console.log(\"Imported vocabulary notes:\", data.vocabularyNotes);\n              }\n              \n              // Import marked vocabulary words\n              if (data.markedWords && typeof data.markedWords === 'object') {\n                localStorage.setItem('vocabulary-marked-words', JSON.stringify(data.markedWords));\n                console.log(\"Imported marked words:\", data.markedWords);\n              }\n              \n              // Import grammar rules\n              if (data.grammarRules && Array.isArray(data.grammarRules)) {\n                localStorage.setItem('grammar-rules', JSON.stringify(data.grammarRules));\n                console.log(\"Imported grammar rules:\", data.grammarRules);\n              }\n              \n              isSaving.value = false;\n              \n              // Show detailed import success message\n              let importMessage = t('vocabulary.save.import.successMessage', { count: data.vocabularies.length }, `Successfully imported ${data.vocabularies.length} vocabulary words`);\n              if (data.customTopics?.length > 0) {\n                importMessage += ` + ${data.customTopics.length} custom categories`;\n              }\n              if (data.groupTopics && Object.keys(data.groupTopics).length > 0) {\n                importMessage += ` + ${Object.keys(data.groupTopics).length} group topics`;\n              }\n              if (typeof data.useGrouping === 'boolean') {\n                importMessage += ` + grouping preference`;\n              }\n              if (data.vocabularyNotes && Object.keys(data.vocabularyNotes).length > 0) {\n                importMessage += ` + ${Object.keys(data.vocabularyNotes).length} vocabulary notes`;\n              }\n              if (data.markedWords && Object.keys(data.markedWords).length > 0) {\n                let totalMarkedWords = 0;\n                Object.values(data.markedWords).forEach(words => {\n                  if (Array.isArray(words)) {\n                    totalMarkedWords += words.length;\n                  }\n                });\n                importMessage += ` + ${totalMarkedWords} marked words`;\n              }\n              if (data.grammarRules && data.grammarRules.length > 0) {\n                importMessage += ` + ${data.grammarRules.length} grammar rules`;\n              }\n              \n              toast.success(importMessage);\n              \n              // Emit custom event to signal import completion\n              window.dispatchEvent(new CustomEvent('vocabularyImportComplete', {\n                detail: { useGrouping: data.useGrouping }\n              }));\n              \n              if (autoSaveEnabled.value) {\n                debounceAutoSave();\n              }\n              } catch (error) {\n                isSaving.value = false;\n                console.error(t('vocabulary.save.errors.invalidFile'), error);\n                toast.error(t('vocabulary.save.errors.invalidFile', 'Invalid file'));\n              }\n            };\n            reader.onerror = () => {\n              isSaving.value = false;\n              console.error('Error reading file');\n              toast.error(t('vocabulary.save.errors.fileReadError', { error: reader.error?.message || 'Unknown error' }) || `Error reading file: ${reader.error?.message || 'Unknown error'}`);\n            };\n            reader.readAsText(file);\n            toast.dismiss(toastId);\n          },\n          onCancel: () => {\n            isSaving.value = false;\n            toast.dismiss(toastId);\n          },\n        },\n      },\n      {\n        position: POSITION.TOP_CENTER,\n        timeout: false,\n        closeButton: false,\n        draggable: false,\n        icon: false,\n      }\n    );\n  };\n\n  const resetAutoSaveFile = async () => {\n    autoSaveFileHandle.value = null;\n    hasAutoSaveFile.value = false;\n    setStoredValue('vocabulary-has-auto-save-file', false);\n    autoSaveFilePath.value = '';\n    \n    // Clear file handle from IndexedDB\n    await clearFileHandleFromIDB();\n    \n    console.log('Auto-save file reset completed');\n  };\n\n  const getSaveStatusColor = computed(() => {\n    switch (saveStatus.value) {\n      case 'saving': return 'bg-yellow-500';\n      case 'success': return 'bg-green-500';\n      case 'error': return 'bg-red-500';\n      default: return 'bg-gray-400';\n    }\n  });\n\n  const getSaveStatusText = computed(() => {\n    switch (saveStatus.value) {\n      case 'saving': return autoSaveEnabled.value ? t('vocabulary.save.status.autoSaving', 'Auto Saving...') : t('vocabulary.save.status.saving', 'Saving...');\n      case 'success':\n        if (autoSaveEnabled.value) {\n          return hasAutoSaveFile.value ? t('vocabulary.save.status.autoWithFile', 'Auto saved to file') : t('vocabulary.save.status.autoLocalStorage', 'Auto saved locally');\n        }\n        return t('vocabulary.save.status.fileSaved', 'Saved to file');\n      case 'error': return t('vocabulary.save.status.error', 'Save error');\n      default:\n        if (autoSaveEnabled.value) {\n          return hasAutoSaveFile.value ? t('vocabulary.save.status.autoFile', 'Auto save ready') : t('vocabulary.save.status.autoNoFile', 'Auto save (no file)');\n        }\n        return t('vocabulary.save.manual', 'Manual save');\n    }\n  });\n\n  // Initialize auto-save on component mount\n  onMounted(() => {\n    console.log('🚀 Component mounted, initializing auto-save...');\n    initializeAutoSave();\n  });\n\n  onUnmounted(() => {\n    if (autoSaveTimer) clearTimeout(autoSaveTimer);\n    if (debounceTimer) clearTimeout(debounceTimer);\n  });\n\n  return {\n    autoSaveEnabled,\n    isSaving,\n    lastSaveTime,\n    hasAutoSaveFile,\n    autoSaveFilePath,\n    saveStatus,\n    getSaveStatusColor,\n    getSaveStatusText,\n    manualSave,\n    debounceAutoSave,\n    scheduleAutoSave,\n    setupAutoSaveFile,\n    handleFileImport,\n    resetAutoSaveFile,\n  };\n} ","import { ref, computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useToast } from 'vue-toastification'\nimport { useVocabularyStore } from '../../../composables/useVocabularyStore'\nimport { groupVocabulariesByDate } from '../../../utils/dateUtils'\n\ninterface Word {\n  id: number\n  word: string\n  pronunciation: string\n  partOfSpeech: string\n  meaning: string\n  example?: string\n  level: string\n  category: string\n  favorite?: boolean\n  image?: string\n  createdAt?: string\n  updatedAt?: string\n  isBatchMove?: boolean\n  batchWords?: Word[]\n  categoryName?: string\n}\n\ninterface DateGroup {\n  date: string\n  count: number\n}\n\nexport function useMoveMode() {\n  const { t, locale } = useI18n()\n  const vocabularyStore = useVocabularyStore()\n  const toast = useToast()\n\n  // Move Mode State\n  const globalMoveMode = ref(getStoredMoveMode())\n  \n  // Move Modal State\n  const showMoveModal = ref(false)\n  const wordToMove = ref<Word | null>(null)\n  const selectedTargetDate = ref('')\n  const availableDateGroups = ref<DateGroup[]>([])\n  const currentSourceDate = ref('')\n\n  // Local Storage helpers\n  function getStoredMoveMode(): boolean {\n    try {\n      const stored = localStorage.getItem('vocabulary-global-move-mode-enabled')\n      return stored ? JSON.parse(stored) : false\n    } catch (error) {\n      console.warn('Failed to parse stored move mode preference:', error)\n      return false\n    }\n  }\n\n  function setStoredMoveMode(enabled: boolean) {\n    try {\n      localStorage.setItem('vocabulary-global-move-mode-enabled', JSON.stringify(enabled))\n    } catch (error) {\n      console.warn('Failed to store move mode preference:', error)\n    }\n  }\n\n  // Toggle Move Mode\n  const toggleMoveMode = (enabled: boolean) => {\n    globalMoveMode.value = enabled\n    setStoredMoveMode(enabled)\n  }\n\n  // Handle move vocabulary request\n  const handleMoveVocabulary = (data: { word: Word, targetDate: string, sourceDate?: string }) => {\n    // If targetDate is empty, show the modal for date selection\n    if (!data.targetDate) {\n      // Ensure categoryName is set for single word move\n      wordToMove.value = {\n        ...data.word,\n        categoryName: data.word.category,\n        isBatchMove: false\n      }\n      currentSourceDate.value = data.sourceDate || ''\n      loadAvailableDateGroups(data.word.category)\n      showMoveModal.value = true\n    } else {\n      // Direct move with specified date\n      performMoveVocabulary(data)\n    }\n  }\n\n  // Load available date groups with same topic\n  const loadAvailableDateGroups = (topic: string) => {\n    // Get all vocabularies grouped by date (all vocabularies, not just same topic)\n    // This allows moving to any existing date group\n    const allDateGroups = groupVocabulariesByDate(vocabularyStore.allVocabularies.value)\n    \n    // Filter out the current source date and map to count format\n    availableDateGroups.value = allDateGroups\n      .filter(group => group.date !== currentSourceDate.value) // Exclude current word's source date\n      .map(group => ({\n        date: group.date,\n        count: group.vocabularies.length\n      }))\n      .sort((a: DateGroup, b: DateGroup) => new Date(b.date).getTime() - new Date(a.date).getTime()) // Sort by date descending\n  }\n\n  // Perform the actual move operation\n  const performMoveVocabulary = async (data: { word: Word, targetDate: string }) => {\n    try {\n      // Find the word in store\n      const wordIndex = vocabularyStore.allVocabularies.value.findIndex((w: Word) => w.id === data.word.id)\n      if (wordIndex !== -1) {\n        // Update the word's dates\n        const updatedWord = {\n          ...data.word,\n          createdAt: data.targetDate,\n          updatedAt: data.targetDate\n        }\n        \n        // Update in store\n        vocabularyStore.allVocabularies.value[wordIndex] = updatedWord\n        \n        toast.success(\n          t('vocabulary.moveSuccess', \n            { word: data.word.word, date: formatDateForDisplay(data.targetDate) },\n            `Successfully moved \"${data.word.word}\" to ${formatDateForDisplay(data.targetDate)}`\n          ),\n          { timeout: 3000 }\n        )\n        \n        console.log(`Moved vocabulary \"${data.word.word}\" to ${data.targetDate}`)\n      } else {\n        throw new Error('Word not found')\n      }\n    } catch (error) {\n      console.error('Failed to move vocabulary:', error)\n      toast.error(\n        t('vocabulary.moveError', \n          { word: data.word.word, error: (error as Error).message },\n          `Failed to move \"${data.word.word}\": ${(error as Error).message}`\n        ),\n        { timeout: 5000 }\n      )\n    }\n  }\n\n  // Format date for display\n  const formatDateForDisplay = (dateStr: string) => {\n    const date = new Date(dateStr)\n    return date.toLocaleDateString(locale.value, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  // Close move modal\n  const closeMoveModal = () => {\n    showMoveModal.value = false\n    wordToMove.value = null\n    selectedTargetDate.value = ''\n    availableDateGroups.value = []\n    currentSourceDate.value = ''\n  }\n\n  // Confirm move from modal\n  const confirmMove = (data: { word: Word, targetDate: string }) => {\n    if (data.word.isBatchMove) {\n      performBatchMove(data.targetDate)\n    } else {\n      performMoveVocabulary(data)\n    }\n    closeMoveModal()\n  }\n\n  // Handle batch move for all words in a category\n  const handleBatchMoveCategory = (data: { topic: string, words: Word[], sourceDate: string }) => {\n    // Store batch info for move modal\n    const batchWords = data.words\n    const categoryName = data.topic\n    \n    // Use the first word as representative for the modal\n    // But we'll handle all words when confirming\n    wordToMove.value = {\n      ...batchWords[0],\n      isBatchMove: true,\n      batchWords: batchWords,\n      categoryName: categoryName\n    }\n    \n    currentSourceDate.value = data.sourceDate\n    \n    // Load available date groups (excluding source date)\n    const allGroups = groupVocabulariesByDate(vocabularyStore.allVocabularies.value)\n    \n    // Filter out source date and convert to the format needed for the modal\n    availableDateGroups.value = allGroups\n      .filter(group => group.date !== data.sourceDate)\n      .map(group => ({\n        date: group.date,\n        count: group.vocabularies.length\n      }))\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n    \n    // Show move modal\n    showMoveModal.value = true\n  }\n\n  // Perform batch move for category\n  const performBatchMove = async (targetDate: string) => {\n    try {\n      const batchWords = wordToMove.value?.batchWords || []\n      const categoryName = wordToMove.value?.categoryName || ''\n      \n      // Move all words in the batch\n      batchWords.forEach((word: Word) => {\n        const wordIndex = vocabularyStore.allVocabularies.value.findIndex((w: Word) => w.id === word.id)\n        if (wordIndex !== -1) {\n          const updatedWord = {\n            ...word,\n            createdAt: targetDate,\n            updatedAt: targetDate\n          }\n          vocabularyStore.allVocabularies.value[wordIndex] = updatedWord\n        }\n      })\n      \n      // Show success message\n      toast.success(\n        t('vocabulary.batchMoveSuccess', \n          { count: batchWords.length, category: categoryName, date: formatDateForDisplay(targetDate) },\n          `Successfully moved ${batchWords.length} words from \"${categoryName}\" to ${formatDateForDisplay(targetDate)}`\n        ),\n        { timeout: 3000 }\n      )\n      \n      console.log(`Batch moved ${batchWords.length} words from category \"${categoryName}\" to ${targetDate}`)\n    } catch (error) {\n      console.error('Failed to batch move vocabulary:', error)\n      toast.error(\n        t('vocabulary.batchMoveError', \n          { error: (error as Error).message },\n          `Failed to batch move: ${(error as Error).message}`\n        ),\n        { timeout: 5000 }\n      )\n    }\n  }\n\n  return {\n    // State\n    globalMoveMode,\n    showMoveModal,\n    wordToMove,\n    selectedTargetDate,\n    availableDateGroups,\n    currentSourceDate,\n    \n    // Actions\n    toggleMoveMode,\n    handleMoveVocabulary,\n    handleBatchMoveCategory,\n    loadAvailableDateGroups,\n    performMoveVocabulary,\n    performBatchMove,\n    closeMoveModal,\n    confirmMove,\n    formatDateForDisplay,\n    \n    // Helpers\n    getStoredMoveMode,\n    setStoredMoveMode\n  }\n}\n","<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-[#0a0a0a] dark:to-[#0f0f0f] relative overflow-x-hidden\">\r\n    <!-- Animated Background Elements to match Dashboard style -->\r\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none z-0\">\r\n      <div class=\"floating-shapes\">\r\n        <div class=\"absolute top-20 left-10 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\r\n        <div class=\"absolute top-40 right-10 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\r\n        <div class=\"absolute -bottom-8 left-20 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\r\n        <!-- Extra decorative balls (responsive, subtle, non-intrusive) -->\r\n        <div class=\"hidden sm:block absolute top-10 left-1/2 -translate-x-1/2 w-40 h-40 bg-cyan-300 dark:bg-cyan-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-1000\"></div>\r\n        <div class=\"hidden sm:block absolute bottom-24 right-24 w-52 h-52 bg-indigo-300 dark:bg-indigo-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-3000\"></div>\r\n        <div class=\"hidden md:block absolute top-1/3 right-1/3 w-36 h-36 bg-emerald-300 dark:bg-emerald-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-1500\"></div>\r\n        <div class=\"hidden md:block absolute -bottom-20 -right-10 w-96 h-96 bg-blue-200 dark:bg-blue-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-20 animate-blob animation-delay-2500\"></div>\r\n        <div class=\"hidden lg:block absolute top-1/2 -left-16 w-72 h-72 bg-fuchsia-300 dark:bg-fuchsia-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-3500\"></div>\r\n        <div class=\"hidden xl:block absolute top-6 right-1/4 w-44 h-44 bg-teal-300 dark:bg-teal-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-500\"></div>\r\n        <!-- Even more subtle orbs for depth -->\r\n        <div class=\"hidden sm:block absolute top-1/4 left-6 w-24 h-24 bg-sky-300 dark:bg-sky-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-lg opacity-20 animate-blob animation-delay-4500\"></div>\r\n        <div class=\"hidden sm:block absolute bottom-8 left-1/3 w-28 h-28 bg-rose-300 dark:bg-rose-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-lg opacity-20 animate-blob animation-delay-5500\"></div>\r\n        <div class=\"hidden md:block absolute top-16 right-1/3 w-20 h-20 bg-violet-300 dark:bg-violet-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-lg opacity-20 animate-blob animation-delay-6500\"></div>\r\n        <div class=\"hidden md:block absolute bottom-1/3 right-6 w-24 h-24 bg-lime-300 dark:bg-lime-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-lg opacity-20 animate-blob animation-delay-7500\"></div>\r\n        <div class=\"hidden lg:block absolute top-3/4 left-1/4 w-32 h-32 bg-amber-300 dark:bg-amber-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-20 animate-blob animation-delay-8500\"></div>\r\n        <div class=\"hidden lg:block absolute top-8 right-8 w-16 h-16 bg-orange-300 dark:bg-orange-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-md opacity-25 animate-blob animation-delay-1200\"></div>\r\n        <div class=\"hidden xl:block absolute bottom-10 left-1/2 -translate-x-1/2 w-28 h-28 bg-cyan-200 dark:bg-cyan-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-15 animate-blob animation-delay-2200\"></div>\r\n        <div class=\"hidden 2xl:block absolute top-1/5 right-1/5 w-40 h-40 bg-indigo-200 dark:bg-indigo-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-15 animate-blob animation-delay-5200\"></div>\r\n        <!-- Ultra subtle background depth orbs (desktop only) -->\r\n        <div class=\"hidden lg:block absolute -top-24 left-1/3 w-96 h-96 bg-blue-100 dark:bg-blue-700 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-3xl opacity-10 animate-blob animation-delay-900\"></div>\r\n        <div class=\"hidden lg:block absolute bottom-[-120px] left-[-80px] w-[420px] h-[420px] bg-purple-100 dark:bg-purple-700 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-3xl opacity-10 animate-blob animation-delay-1900\"></div>\r\n        <div class=\"hidden xl:block absolute top-1/3 left-[70%] w-48 h-48 bg-pink-200 dark:bg-pink-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-15 animate-blob animation-delay-3300\"></div>\r\n        <div class=\"hidden xl:block absolute bottom-1/4 right-[35%] w-32 h-32 bg-cyan-300 dark:bg-cyan-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-15 animate-blob animation-delay-6100\"></div>\r\n        <div class=\"hidden 2xl:block absolute top-[12%] left-[12%] w-56 h-56 bg-emerald-200 dark:bg-emerald-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-15 animate-blob animation-delay-7100\"></div>\r\n        <div class=\"hidden 2xl:block absolute bottom-[8%] right-[12%] w-64 h-64 bg-teal-200 dark:bg-teal-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-15 animate-blob animation-delay-9100\"></div>\r\n      </div>\r\n    </div>\r\n    <!-- Header -->\r\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto px-2 xs:px-3 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 pt-3 sm:pt-6\">\r\n      <LazyLoadComponent animation-type=\"fade-up\" :threshold=\"0.1\" root-margin=\"0px\">\r\n        <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6 mb-3 xs:mb-4 sm:mb-6\">\r\n          <div class=\"flex items-center mb-4\">\r\n            <div class=\"animate-pulse-slow\">\r\n              <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full mr-2.5\"></div>\r\n            </div>\r\n            <h1 class=\"text-lg sm:text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent\">\r\n              {{ t('vocabulary.header.title', 'Vocabulary') }}\r\n            </h1>\r\n          </div>\r\n          <VocabularyHeader @add-vocabulary=\"openAddDialog\" />\r\n        </div>\r\n      </LazyLoadComponent>\r\n    </div>\r\n\r\n    <!-- Filters and Search -->\r\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto py-3 px-2 xs:py-4 xs:px-3 sm:py-6 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 overflow-x-hidden\">\r\n      <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.1\" root-margin=\"-50px\">\r\n        <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] mb-3 xs:mb-4 sm:mb-6 p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6\">\r\n          <div class=\"flex items-center mb-4\">\r\n            <div class=\"animate-pulse-slow\">\r\n              <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full mr-2.5\"></div>\r\n            </div>\r\n            <h3 class=\"text-base sm:text-lg font-semibold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent\">\r\n              {{ t('vocabulary.filters.title', 'Filters') }}\r\n            </h3>\r\n          </div>\r\n          <VocabularyFilters\r\n            :search-query=\"searchQuery\"\r\n            :selected-category=\"selectedCategory\"\r\n            :selected-level=\"selectedLevel\"\r\n            :categories=\"categories\"\r\n            :show-favorites-only=\"showFavoritesOnly\"\r\n            @update:searchQuery=\"updateSearchQuery\"\r\n            @update:selectedCategory=\"updateSelectedCategory\"\r\n            @update:selectedLevel=\"updateSelectedLevel\"\r\n            @update:showFavoritesOnly=\"updateShowFavoritesOnly\"\r\n          />\r\n        </div>\r\n      </LazyLoadComponent>\r\n      \r\n      <!-- Date Grouping Toggle -->\r\n      <LazyLoadComponent animation-type=\"slide-right\" :threshold=\"0.1\" root-margin=\"-50px\">\r\n        <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] mb-3 xs:mb-4 sm:mb-6 p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6\">\r\n          <div class=\"flex items-center mb-4\">\r\n            <div class=\"animate-pulse-slow\">\r\n              <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-green-400 to-blue-500 rounded-full mr-2.5\"></div>\r\n            </div>\r\n            <h3 class=\"text-base sm:text-lg font-semibold bg-gradient-to-r from-green-600 to-blue-600 dark:from-green-400 dark:to-blue-400 bg-clip-text text-transparent\">\r\n              {{ t('vocabulary.grouping.title', 'Grouping & Move Mode') }}\r\n            </h3>\r\n          </div>\r\n          <GroupingToggle \r\n            :model-value=\"useGrouping\" \r\n            :hover-enabled=\"hoverToExpandEnabled\"\r\n            :move-mode=\"globalMoveMode\"\r\n            @update:model-value=\"toggleGrouping\" \r\n            @update:hover-enabled=\"hoverToExpandEnabled = $event\"\r\n            @update:move-mode=\"globalMoveMode = $event\"\r\n          />\r\n        </div>\r\n      </LazyLoadComponent>\r\n\r\n      <!-- Tools & Settings Accordion -->\r\n      <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.1\" root-margin=\"-50px\">\r\n        <BaseAccordion\r\n          :title=\"t('vocabulary.tools.accordionTitle', 'Tools & Settings')\"\r\n          :description=\"t('vocabulary.tools.accordionDescription', 'Voice settings, topic manager, and save & sync options')\"\r\n          icon=\"settings\"\r\n          :default-open=\"true\"\r\n          persist-key=\"vocabulary-tools\"\r\n          class=\"mb-3 xs:mb-4 sm:mb-6\"\r\n        >\r\n          <div class=\"space-y-4 sm:space-y-6\">\r\n            <!-- Voice Settings Panel -->\r\n            <div class=\"bg-white/60 dark:bg-[#0a0a0a]/60 backdrop-blur-sm rounded-xl border border-white/20 dark:border-white/10 p-3 sm:p-4 md:p-5\">\r\n              <div class=\"flex items-center mb-3 sm:mb-4\">\r\n                <div class=\"animate-pulse-slow\">\r\n                  <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full mr-2.5\"></div>\r\n                </div>\r\n                <h3 class=\"text-sm sm:text-base font-semibold bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400 bg-clip-text text-transparent\">\r\n                  {{ t('voice.settings.title', 'Voice Settings') }}\r\n                </h3>\r\n              </div>\r\n              <VoiceSelector :show-voice-info=\"true\" />\r\n            </div>\r\n\r\n            <!-- Topic Management Panel -->\r\n            <div class=\"bg-white/60 dark:bg-[#0a0a0a]/60 backdrop-blur-sm rounded-xl border border-white/20 dark:border-white/10 p-3 sm:p-4 md:p-5\">\r\n              <div class=\"flex items-center mb-3 sm:mb-4\">\r\n                <div class=\"animate-pulse-slow\">\r\n                  <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full mr-2.5\"></div>\r\n                </div>\r\n                <h3 class=\"text-sm sm:text-base font-semibold bg-gradient-to-r from-yellow-600 to-orange-600 dark:from-yellow-400 dark:to-orange-400 bg-clip-text text-transparent\">\r\n                  {{ t('vocabulary.topicManager.title', 'Topic Manager') }}\r\n                </h3>\r\n              </div>\r\n              <TopicManagerPanel @open=\"openTopicManager\" />\r\n            </div>\r\n\r\n            <!-- Save Control Panel -->\r\n            <div class=\"bg-white/60 dark:bg-[#0a0a0a]/60 backdrop-blur-sm rounded-xl border border-white/20 dark:border-white/10 p-3 sm:p-4 md:p-5\">\r\n              <div class=\"flex items-center mb-3 sm:mb-4\">\r\n                <div class=\"animate-pulse-slow\">\r\n                  <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full mr-2.5\"></div>\r\n                </div>\r\n                <h3 class=\"text-sm sm:text-base font-semibold bg-gradient-to-r from-cyan-600 to-blue-600 dark:from-cyan-400 dark:to-blue-400 bg-clip-text text-transparent\">\r\n                  {{ t('vocabulary.save.title', 'Save & Sync') }}\r\n                </h3>\r\n              </div>\r\n              <SaveControlPanel\r\n                :auto-save-enabled=\"autoSaveEnabled\"\r\n                @update:auto-save-enabled=\"autoSaveEnabled = $event\"\r\n                :is-saving=\"isSaving\"\r\n                :has-auto-save-file=\"hasAutoSaveFile\"\r\n                :auto-save-file-path=\"autoSaveFilePath\"\r\n                :last-save-time=\"lastSaveTime\"\r\n                :save-status-color=\"getSaveStatusColor\"\r\n                :save-status-text=\"getSaveStatusText\"\r\n                @manual-save=\"manualSave\"\r\n                @setup-auto-save=\"setupAutoSaveFile\"\r\n                @reset-auto-save=\"resetAutoSaveFile\"\r\n                @import-file=\"handleFileImportWithReload\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </BaseAccordion>\r\n      </LazyLoadComponent>\r\n\r\n      <!-- Vocabulary List -->\r\n      <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.05\" root-margin=\"-50px\">\r\n        <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.003] p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6\">\r\n          <VocabularyList\r\n            :paginated-words=\"useGrouping ? [] : paginatedVocabulary\"\r\n            :current-page=\"currentPage\"\r\n            :total-pages=\"totalPages\"\r\n            :total-count=\"filteredVocabulary.length\"\r\n            :start-index=\"startIndex\"\r\n            :end-index=\"endIndex\"\r\n            :visible-pages=\"visiblePages\"\r\n            :use-grouping=\"useGrouping\"\r\n            :all-words=\"useGrouping ? filteredVocabulary : undefined\"\r\n            :date-group-pages=\"dateGroupPages\"\r\n            :items-per-page-grouped=\"itemsPerPageGrouped\"\r\n            :hover-to-expand-enabled=\"hoverToExpandEnabled\"\r\n            :global-move-mode=\"globalMoveMode\"\r\n            :recently-added-category=\"recentlyAddedCategory\"\r\n            @play-audio=\"playAudio\"\r\n            @edit-word=\"openEditDialog\"\r\n            @delete-word=\"deleteWord\"\r\n            @toggle-favorite=\"toggleFavorite\"\r\n            @view-details=\"openDetailsDialog\"\r\n            @previous-page=\"previousPage\"\r\n            @next-page=\"nextPage\"\r\n            @go-to-page=\"goToPage\"\r\n            @date-group-previous=\"(date) => dateGroupPrevious(date, filteredVocabulary)\"\r\n            @date-group-next=\"(date) => dateGroupNext(date, filteredVocabulary)\"\r\n            @date-group-go-to-page=\"dateGroupGoToPage\"\r\n            @move-vocabulary=\"handleMoveVocabulary\"\r\n            @open-note-dialog=\"openNoteDialog\"\r\n            @open-add-vocabulary-dialog=\"openAddVocabularyForDate\"\r\n            @open-grammar-manager=\"openGrammarManagerForDate\"\r\n            @batch-move-category=\"handleBatchMoveCategory\"\r\n          />\r\n        </div>\r\n      </LazyLoadComponent>\r\n    </div>\r\n\r\n    <!-- Vocabulary Form Dialog -->\r\n    <VocabularyFormDialog\r\n      v-model=\"showFormDialog\"\r\n      :vocabulary=\"selectedVocabulary\"\r\n      :target-date=\"targetDateForNewVocabulary\"\r\n      @vocabulary-saved=\"onVocabularySaved\"\r\n    />\r\n\r\n    <!-- Vocabulary Detail Dialog -->\r\n    <VocabularyDetailDialog\r\n      v-model=\"showDetailDialog\"\r\n      :vocabulary=\"selectedVocabularyForDetail\"\r\n      @edit-vocabulary=\"openEditFromDetail\"\r\n      @toggle-favorite=\"toggleFavorite\"\r\n    />\r\n\r\n    <!-- Topic Manager Dialog -->\r\n    <TopicManager\r\n      v-model=\"showTopicManager\"\r\n      :vocabulary-usage=\"categoryUsage\"\r\n      @topic-added=\"onTopicAdded\"\r\n      @topic-updated=\"onTopicUpdated\"\r\n      @topic-deleted=\"onTopicDeleted\"\r\n    />\r\n\r\n    <!-- Vocabulary Note Dialog -->\r\n    <VocabularyNoteDialog\r\n      v-model=\"showNoteDialog\"\r\n      :date=\"noteDialogDate\"\r\n      :today-words=\"noteDialogWords\"\r\n      @save-note=\"handleNoteSaved\"\r\n    />\r\n\r\n    <!-- Grammar Manager Modal -->\r\n    <GrammarManagerModal\r\n      v-model=\"showGrammarManagerModal\"\r\n      :selectedDate=\"grammarManagerDate\"\r\n    />\r\n    \r\n    <!-- Sticky Floating Add Button -->\r\n    <Transition name=\"fade-scale\">\r\n      <div \r\n        v-show=\"showStickyButtonVisible\"\r\n        class=\"fixed bottom-6 z-50 left-1/2 translate-x-4 md:translate-x-4 lg:left-auto lg:right-6 lg:translate-x-0\"\r\n      >\r\n        <button \r\n          @click=\"openAddDialog\"\r\n          @mouseenter=\"showStickyTooltip = true\"\r\n          @mouseleave=\"showStickyTooltip = false\"\r\n          class=\"relative bg-blue-500 hover:bg-blue-600 text-white font-medium w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 flex items-center justify-center\"\r\n        >\r\n          <svg \r\n            class=\"w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8\" \r\n            fill=\"currentColor\" \r\n            viewBox=\"0 0 20 20\"\r\n          >\r\n            <path fill-rule=\"evenodd\" d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\" clip-rule=\"evenodd\"/>\r\n          </svg>\r\n          \r\n          <!-- Tooltip -->\r\n          <div\r\n            v-if=\"showStickyTooltip\"\r\n            class=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs font-medium text-white bg-gray-900 dark:bg-black dark:text-white dark:border dark:border-dark-bg-mute rounded shadow-lg whitespace-nowrap z-50\"\r\n          >\r\n            {{ t('vocabulary.addNew', 'Add New Word') }}\r\n            <div class=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900 dark:border-t-black\"></div>\r\n          </div>\r\n        </button>\r\n      </div>\r\n    </Transition>\r\n\r\n    <!-- Move Modal Component -->\r\n    <MoveModal\r\n      :show-modal=\"showMoveModal\"\r\n      :word-to-move=\"wordToMove\"\r\n      :available-date-groups=\"availableDateGroups\"\r\n      :source-date=\"currentSourceDate\"\r\n      :all-vocabularies=\"vocabularyStore.allVocabularies.value\"\r\n      @close=\"closeMoveModal\"\r\n      @confirm-move=\"confirmMove\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, onUnmounted, watch, defineAsyncComponent, nextTick } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useToast, POSITION } from 'vue-toastification';\r\nimport { useVoiceStore } from '../../stores/voiceStore';\r\nimport { useVocabularyStore } from '../../composables/useVocabularyStore';\r\nimport { useModalStore } from '../../stores/modalStore';\r\nimport { groupVocabulariesByDate } from '../../utils/dateUtils';\r\nimport { getTopicName } from '../../utils/topicUtils';\r\nimport type { Vocabulary } from '../../composables/useVocabularyStore';\r\n\r\n// Local components\r\nconst LazyLoadComponent = defineAsyncComponent(() => import('../../components/LazyLoadComponent.vue'));\r\nconst BaseAccordion = defineAsyncComponent(() => import('../../components/BaseAccordion.vue'));\r\nconst GroupingToggle = defineAsyncComponent(() => import('./components/GroupingToggle.vue'));\r\nconst TopicManagerPanel = defineAsyncComponent(() => import('./components/TopicManagerPanel.vue'));\r\nconst SaveControlPanel = defineAsyncComponent(() => import('./components/SaveControlPanel.vue'));\r\nconst VocabularyHeader = defineAsyncComponent(() => import('./components/VocabularyHeader.vue'));\r\nconst VocabularyFilters = defineAsyncComponent(() => import('./components/VocabularyFilters.vue'));\r\nconst VocabularyList = defineAsyncComponent(() => import('./components/VocabularyList.vue'));\r\nconst VocabularyFormDialog = defineAsyncComponent(() => import('./components/VocabularyFormDialog.vue'));\r\nconst VocabularyDetailDialog = defineAsyncComponent(() => import('./components/VocabularyDetailDialog.vue'));\r\nconst VocabularyNoteDialog = defineAsyncComponent(() => import('./components/VocabularyNoteDialog.vue'));\r\nconst GrammarManagerModal = defineAsyncComponent(() => import('./components/GrammarManagerModal.vue'));\r\n// Temporarily use sync import for debugging\r\n// const MoveModal = defineAsyncComponent(() => import('./components/move').then(m => ({ default: m.MoveModal })));\r\nimport { MoveModal } from './components/move';\r\nconst VoiceSelector = defineAsyncComponent(() => import('../../components/VoiceSelector.vue'));\r\nconst TopicManager = defineAsyncComponent(() => import('./components/TopicManager.vue'));\r\nconst ConfirmToast = defineAsyncComponent(() => import('../../components/common/ConfirmToast.vue'));\r\n\r\n// Composables\r\nimport { useVocabularyFilters } from './composables/useVocabularyFilters';\r\nimport { useVocabularyPagination } from './composables/useVocabularyPagination';\r\nimport { useVocabularyGrouping } from './composables/useVocabularyGrouping';\r\nimport { useVocabularyDialogs } from './composables/useVocabularyDialogs';\r\nimport { useTopicManager } from './composables/useTopicManager';\r\nimport { useVocabularySaving } from './composables/useVocabularySaving';\r\nimport { useMoveMode } from './composables/useMoveMode';\r\n\r\nconst { t, locale } = useI18n();\r\nconst toast = useToast();\r\nconst vocabularyStore = useVocabularyStore();\r\nconst voiceStore = useVoiceStore();\r\nconst modalStore = useModalStore();\r\n\r\nconst itemsPerPage = ref(5);\r\n\r\nconst {\r\n  searchQuery,\r\n  selectedCategory,\r\n  selectedLevel,\r\n  showFavoritesOnly,\r\n  updateShowFavoritesOnly,\r\n  updateSearchQuery,\r\n  updateSelectedCategory,\r\n  updateSelectedLevel,\r\n} = useVocabularyFilters();\r\n\r\nconst {\r\n  useGrouping,\r\n  itemsPerPageGrouped,\r\n  dateGroupPages,\r\n  toggleGrouping,\r\n  reloadGroupingState,\r\n  dateGroupPrevious,\r\n  dateGroupNext,\r\n  dateGroupGoToPage,\r\n} = useVocabularyGrouping();\r\n\r\n// Hover to expand functionality with localStorage persistence\r\nconst HOVER_EXPAND_STORAGE_KEY = 'vocabulary-hover-expand-enabled';\r\n\r\nconst getStoredHoverState = (): boolean => {\r\n  try {\r\n    const stored = localStorage.getItem(HOVER_EXPAND_STORAGE_KEY);\r\n    return stored ? JSON.parse(stored) : false;\r\n  } catch (error) {\r\n    console.warn('Failed to load hover expand state from localStorage:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst setStoredHoverState = (enabled: boolean) => {\r\n  try {\r\n    localStorage.setItem(HOVER_EXPAND_STORAGE_KEY, JSON.stringify(enabled));\r\n  } catch (error) {\r\n    console.warn('Failed to save hover expand state to localStorage:', error);\r\n  }\r\n};\r\n\r\nconst hoverToExpandEnabled = ref(getStoredHoverState());\r\n\r\n// Global Move Mode functionality with localStorage persistence\r\n// Move Mode functionality using composable\r\nconst {\r\n  globalMoveMode,\r\n  showMoveModal,\r\n  wordToMove,\r\n  selectedTargetDate,\r\n  availableDateGroups,\r\n  currentSourceDate,\r\n  toggleMoveMode,\r\n  handleMoveVocabulary,\r\n  handleBatchMoveCategory,\r\n  closeMoveModal,\r\n  confirmMove,\r\n  formatDateForDisplay\r\n} = useMoveMode()\r\n\r\n// Note dialog state\r\nconst showNoteDialog = ref(false);\r\nconst noteDialogDate = ref('');\r\nconst noteDialogWords = ref<any[]>([]);\r\n\r\nconst filteredVocabulary = computed(() => {\r\n  return vocabularyStore.allVocabularies.value.filter(word => {\r\n    const matchesSearch = !searchQuery.value ||\r\n      word.word.toLowerCase().includes(searchQuery.value.toLowerCase()) ||\r\n      word.meaning.toLowerCase().includes(searchQuery.value.toLowerCase());\r\n    const matchesCategory = !selectedCategory.value || word.category === selectedCategory.value;\r\n    const matchesLevel = !selectedLevel.value || word.level === selectedLevel.value;\r\n    const matchesFavorite = !showFavoritesOnly.value || word.favorite === true;\r\n    return matchesSearch && matchesCategory && matchesLevel && matchesFavorite;\r\n  });\r\n});\r\n\r\nconst {\r\n  currentPage,\r\n  totalPages,\r\n  paginatedVocabulary,\r\n  startIndex,\r\n  endIndex,\r\n  visiblePages,\r\n  previousPage,\r\n  nextPage,\r\n  goToPage,\r\n} = useVocabularyPagination(filteredVocabulary, useGrouping, itemsPerPage);\r\n\r\nconst {\r\n  showFormDialog,\r\n  selectedVocabulary,\r\n  showDetailDialog,\r\n  selectedVocabularyForDetail,\r\n  openAddDialog,\r\n  openEditDialog,\r\n  onVocabularySaved: originalOnVocabularySaved,\r\n  openDetailsDialog,\r\n  openEditFromDetail,\r\n} = useVocabularyDialogs();\r\n\r\n// Store the category that should be at the top\r\nconst recentlyAddedCategory = ref<string | null>(null);\r\n\r\n// Override onVocabularySaved to reset target date and reload grouping\r\nconst onVocabularySaved = (data?: { category: string }) => {\r\n  originalOnVocabularySaved();\r\n  targetDateForNewVocabulary.value = null;\r\n  \r\n  // Store the category that was just added to move it to the top\r\n  if (data?.category) {\r\n    recentlyAddedCategory.value = data.category;\r\n    console.log('Recently added category:', data.category);\r\n  }\r\n  \r\n  // Trigger auto-save when vocabulary is added/updated\r\n  if (autoSaveEnabled.value) {\r\n    debounceAutoSave();\r\n    console.log('Auto-save triggered from Add Word in date group');\r\n  }\r\n  \r\n  // Reload grouping state to ensure new vocabulary appears in correct date group\r\n  if (useGrouping.value) {\r\n    nextTick(() => {\r\n      reloadGroupingState();\r\n      console.log('Grouping state reloaded after vocabulary saved');\r\n    });\r\n  }\r\n};\r\n\r\nconst {\r\n  autoSaveEnabled,\r\n  isSaving,\r\n  lastSaveTime,\r\n  hasAutoSaveFile,\r\n  saveStatus,\r\n  getSaveStatusColor,\r\n  getSaveStatusText,\r\n  manualSave,\r\n  debounceAutoSave,\r\n  scheduleAutoSave,\r\n  setupAutoSaveFile,\r\n  handleFileImport,\r\n  resetAutoSaveFile,\r\n  autoSaveFilePath,\r\n} = useVocabularySaving();\r\n\r\nconst {\r\n  showTopicManager,\r\n  openTopicManager,\r\n  onTopicAdded,\r\n  onTopicUpdated,\r\n  onTopicDeleted,\r\n} = useTopicManager(debounceAutoSave);\r\n\r\n// Only show categories that are actually used in vocabularies\r\nconst categories = computed(() => {\r\n  const usedCategories = new Set(vocabularyStore.allVocabularies.value.map(vocab => vocab.category));\r\n  return Array.from(usedCategories).sort();\r\n});\r\nconst categoryUsage = computed(() => vocabularyStore.getCategoryUsage.value);\r\n\r\n// Computed property to control sticky button visibility\r\nconst showStickyButtonVisible = computed(() => {\r\n  return showStickyButton.value && !showFormDialog.value && !modalStore.shouldHideAddNewWord;\r\n});\r\n\r\nconst deleteWord = (word: any) => {\r\n  const toastId = toast(\r\n    {\r\n      component: ConfirmToast,\r\n      props: {\r\n        message: t('vocabulary.confirmDelete', { word: word.word }),\r\n        confirmText: t('common.confirm'),\r\n        cancelText: t('common.cancel'),\r\n        onConfirm: () => {\r\n          vocabularyStore.deleteVocabulary(word.id);\r\n          debounceAutoSave();\r\n          toast.dismiss(toastId);\r\n          toast.success(t('vocabulary.deleteSuccess', { word: word.word }) || `Successfully deleted \"${word.word}\"`);\r\n        },\r\n        onCancel: () => {\r\n          toast.dismiss(toastId);\r\n        },\r\n      },\r\n    },\r\n    {\r\n      position: POSITION.TOP_CENTER,\r\n      timeout: false,\r\n      closeButton: false,\r\n      draggable: false,\r\n      icon: false,\r\n    }\r\n  );\r\n};\r\n\r\nconst toggleFavorite = (word: Vocabulary) => {\r\n  vocabularyStore.toggleFavorite(word.id);\r\n\r\n  // Manually toggle the favorite status on the vocabulary object\r\n  // currently displayed in the detail dialog to make the change\r\n  // immediately visible.\r\n  if (selectedVocabularyForDetail.value && selectedVocabularyForDetail.value.id === word.id) {\r\n      selectedVocabularyForDetail.value.favorite = !selectedVocabularyForDetail.value.favorite;\r\n  }\r\n  \r\n  debounceAutoSave();\r\n};\r\n\r\nconst playAudio = async (word: string) => {\r\n  try {\r\n    const utterance = voiceStore.createUtterance(word);\r\n    await new Promise<void>((resolve, reject) => {\r\n      utterance.onend = () => resolve();\r\n      utterance.onerror = (event) => reject(event.error);\r\n      if ('speechSynthesis' in window) {\r\n        speechSynthesis.speak(utterance);\r\n      } else {\r\n        reject(new Error('Speech synthesis not supported'));\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error playing audio:', error);\r\n    if ('speechSynthesis' in window) {\r\n      const utterance = new SpeechSynthesisUtterance(word);\r\n      utterance.lang = 'en-US';\r\n      speechSynthesis.speak(utterance);\r\n    }\r\n  }\r\n};\r\n\r\nwatch(\r\n  () => vocabularyStore.allVocabularies.value,\r\n  (newVocabularies, oldVocabularies) => {\r\n    const newCount = newVocabularies?.length || 0;\r\n    const oldCount = oldVocabularies?.length || 0;\r\n    if (autoSaveEnabled.value && newCount > 0 && oldCount !== undefined && newCount !== oldCount) {\r\n      saveStatus.value = 'saving';\r\n      debounceAutoSave();\r\n    }\r\n    \r\n    // Reload grouping state when vocabulary count changes (new vocabulary added)\r\n    if (useGrouping.value && newCount !== oldCount && newCount > 0) {\r\n      nextTick(() => {\r\n        reloadGroupingState();\r\n        console.log('Grouping state reloaded due to vocabulary count change');\r\n      });\r\n    }\r\n  },\r\n  { deep: true, immediate: false }\r\n);\r\n\r\nwatch(\r\n  () => vocabularyStore.allVocabularies.value.map(v => ({ id: v.id, favorite: v.favorite, word: v.word, meaning: v.meaning })),\r\n  (newData, oldData) => {\r\n    if (autoSaveEnabled.value && newData.length > 0 && oldData && JSON.stringify(newData) !== JSON.stringify(oldData)) {\r\n      debounceAutoSave();\r\n    }\r\n  },\r\n  { deep: true }\r\n);\r\n\r\n// Watch hover expand state and save to localStorage\r\nwatch(\r\n  hoverToExpandEnabled,\r\n  (newValue) => {\r\n    setStoredHoverState(newValue);\r\n  }\r\n);\r\n\r\n// Prevent body scroll when dialogs are open\r\nwatch(showNoteDialog, (newValue) => {\r\n  if (newValue) {\r\n    document.body.classList.add('modal-open');\r\n  } else {\r\n    // Only remove if form dialog is also closed\r\n    if (!showFormDialog.value) {\r\n      document.body.classList.remove('modal-open');\r\n    }\r\n  }\r\n  // Sync with modal store\r\n  modalStore.setNoteDialog(newValue);\r\n});\r\n\r\n// Prevent body scroll when form dialog is open\r\nwatch(showFormDialog, (newValue) => {\r\n  if (newValue) {\r\n    document.body.classList.add('modal-open');\r\n    // Hide sticky tooltip when dialog opens\r\n    showStickyTooltip.value = false;\r\n  } else {\r\n    // Only remove if note dialog is also closed\r\n    if (!showNoteDialog.value) {\r\n      document.body.classList.remove('modal-open');\r\n    }\r\n  }\r\n  // Sync with modal store\r\n  modalStore.setVocabularyForm(newValue);\r\n});\r\n\r\nonMounted(() => {\r\n  vocabularyStore.initializeStore();\r\n  if (autoSaveEnabled.value) {\r\n    scheduleAutoSave();\r\n  }\r\n  \r\n  // Listen for vocabulary notes updates\r\n  window.addEventListener('vocabulary-notes-updated', () => {\r\n    if (autoSaveEnabled.value) {\r\n      debounceAutoSave();\r\n    }\r\n  });\r\n  \r\n  // Listen for grammar rules updates\r\n  window.addEventListener('grammar-rules-updated', () => {\r\n    if (autoSaveEnabled.value) {\r\n      debounceAutoSave();\r\n    }\r\n  });\r\n  \r\n  // Add scroll event listener for sticky button\r\n  window.addEventListener('scroll', handleScroll, { passive: true });\r\n  \r\n  // Initial call to set button state\r\n  handleScroll();\r\n});\r\n\r\nconst handleFileImportWithReload = (file: File) => {\r\n  const handleImportComplete = (event: CustomEvent) => {\r\n    nextTick(() => {\r\n      reloadGroupingState();\r\n      console.log('Grouping state reloaded after import');\r\n    });\r\n    window.removeEventListener('vocabularyImportComplete', handleImportComplete as EventListener);\r\n  };\r\n  \r\n  window.addEventListener('vocabularyImportComplete', handleImportComplete as EventListener);\r\n  \r\n  handleFileImport(file);\r\n};\r\n\r\n// Sticky button state\r\nconst showStickyButton = ref(false);\r\nconst showStickyTooltip = ref(false);\r\nconst headerHeight = ref(0);\r\nconst isScrollingDown = ref(false);\r\nconst lastScrollY = ref(0);\r\nconst accordionState = ref(true); // Track accordion state\r\n\r\n// Scroll handler for sticky button\r\nconst handleScroll = () => {\r\n  const scrollY = window.scrollY;\r\n  const headerElement = document.querySelector('[data-vocabulary-header]') || document.querySelector('header');\r\n  \r\n  // Get header height if not cached\r\n  if (headerHeight.value === 0 && headerElement) {\r\n    headerHeight.value = (headerElement as HTMLElement).offsetHeight;\r\n  }\r\n  \r\n  // Update accordion state from localStorage first\r\n  const currentAccordionState = (() => {\r\n    try {\r\n      const stored = localStorage.getItem('accordion-vocabulary-header');\r\n      return stored !== null ? JSON.parse(stored) : true; // default is true\r\n    } catch {\r\n      return true;\r\n    }\r\n  })();\r\n  accordionState.value = currentAccordionState;\r\n  \r\n  // Find the original add button position\r\n  const originalAddButton = document.querySelector('[data-original-add-button]');\r\n  \r\n  let originalButtonVisible = false;\r\n  if (originalAddButton) {\r\n    const rect = originalAddButton.getBoundingClientRect();\r\n    const computedStyle = window.getComputedStyle(originalAddButton);\r\n    // Button is visible if it has dimensions and is not hidden\r\n    originalButtonVisible = rect.height > 0 && rect.width > 0 && \r\n                           computedStyle.display !== 'none' && \r\n                           computedStyle.visibility !== 'hidden' &&\r\n                           computedStyle.opacity !== '0';\r\n  }\r\n  \r\n  // Show sticky button logic\r\n  const headerBottom = headerHeight.value || 120;\r\n  let shouldShowSticky;\r\n  \r\n  if (!accordionState.value) {\r\n    // Accordion is closed - show sticky button always\r\n    shouldShowSticky = true;\r\n  } else if (originalButtonVisible) {\r\n    // Accordion is open and original button is visible - hide sticky\r\n    shouldShowSticky = false;\r\n  } else {\r\n    // Accordion is open but original button not visible - show sticky based on scroll\r\n    shouldShowSticky = scrollY > headerBottom;\r\n  }\r\n  \r\n  showStickyButton.value = shouldShowSticky;\r\n  \r\n  lastScrollY.value = scrollY;\r\n};\r\n\r\n// Note dialog handlers\r\nconst openNoteDialog = (date: string, words: any[]) => {\r\n  noteDialogDate.value = date;\r\n  noteDialogWords.value = words;\r\n  showNoteDialog.value = true;\r\n};\r\n\r\n// Store the target date for new vocabulary\r\nconst targetDateForNewVocabulary = ref<string | null>(null);\r\n\r\n// Grammar manager modal state\r\nconst showGrammarManagerModal = ref(false);\r\nconst grammarManagerDate = ref<string | null>(null);\r\n\r\n// Open add vocabulary dialog with specific date\r\nconst openAddVocabularyForDate = (date: string) => {\r\n  // Store the target date\r\n  targetDateForNewVocabulary.value = date;\r\n  \r\n  // Use the standard add dialog approach\r\n  selectedVocabulary.value = null;\r\n  showFormDialog.value = true;\r\n  \r\n  // Dispatch edit word event\r\n  window.dispatchEvent(new CustomEvent('vocabulary-edit-word'));\r\n};\r\n\r\n// Open grammar manager modal for specific date\r\nconst openGrammarManagerForDate = (date: string) => {\r\n  console.log('Opening grammar manager for date:', date);\r\n  grammarManagerDate.value = date;\r\n  showGrammarManagerModal.value = true;\r\n  modalStore.setGrammarManager(true);\r\n  console.log('Modal state:', showGrammarManagerModal.value);\r\n};\r\n\r\n// Prevent body scroll when grammar manager modal is open\r\nwatch(showGrammarManagerModal, (newValue) => {\r\n  if (newValue) {\r\n    document.body.classList.add('modal-open');\r\n  } else {\r\n    // Only remove if other dialogs are also closed\r\n    if (!showNoteDialog.value && !showFormDialog.value) {\r\n      document.body.classList.remove('modal-open');\r\n    }\r\n  }\r\n  // Sync with modal store\r\n  modalStore.setGrammarManager(newValue);\r\n});\r\n\r\nconst handleNoteSaved = (note: string, markedWords: string[]) => {\r\n  toast.success(t('vocabulary.notes.saveSuccess', 'Notes saved successfully'), {\r\n    timeout: 2000,\r\n  });\r\n  \r\n  // Check if auto-save is enabled\r\n  if (autoSaveEnabled.value) {\r\n    toast.info(t('vocabulary.notes.autoSaveNotice', 'Notes will be included in auto-save'), {\r\n      timeout: 3000,\r\n    });\r\n    debounceAutoSave();\r\n  }\r\n  \r\n  console.log(`Note saved for ${noteDialogDate.value} with ${markedWords.length} marked words`);\r\n};\r\n\r\n// Perform move vocabulary between date groups  \r\nconst performMoveVocabulary = (data: { word: any, targetDate: string }) => {\r\n  try {\r\n    // Find and update the word's createdAt and updatedAt to match target date\r\n    const wordIndex = vocabularyStore.allVocabularies.value.findIndex(w => w.id === data.word.id)\r\n    \r\n    if (wordIndex !== -1) {\r\n      // Update the vocabulary array using store method\r\n      vocabularyStore.updateVocabulary(data.word.id, {\r\n        createdAt: data.targetDate,\r\n        updatedAt: data.targetDate\r\n      })\r\n      \r\n      // Show success message\r\n      toast.success(\r\n        t('vocabulary.moveSuccess', \r\n          { word: data.word.word, date: new Date(data.targetDate).toLocaleDateString() },\r\n          `Successfully moved \"${data.word.word}\" to ${new Date(data.targetDate).toLocaleDateString()}`\r\n        ),\r\n        { timeout: 3000 }\r\n      )\r\n      \r\n      // Trigger auto-save if enabled\r\n      if (autoSaveEnabled.value) {\r\n        debounceAutoSave()\r\n        toast.info(t('vocabulary.moveAutoSaveNotice', 'Word moved and will be included in auto-save'), {\r\n          timeout: 2000,\r\n        })\r\n      }\r\n      \r\n      console.log(`Moved vocabulary \"${data.word.word}\" to ${data.targetDate}`)\r\n    } else {\r\n      throw new Error('Word not found')\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to move vocabulary:', error)\r\n    toast.error(\r\n      t('vocabulary.moveError', \r\n        { word: data.word.word, error: (error as Error).message },\r\n        `Failed to move \"${data.word.word}\": ${(error as Error).message}`\r\n      ),\r\n      { timeout: 5000 }\r\n    )\r\n  }\r\n};\r\n\r\n\r\n\r\n// Watch for changes and persist to localStorage\r\nwatch(hoverToExpandEnabled, (newValue) => {\r\n  setStoredHoverState(newValue);\r\n});\r\n\r\nwatch(globalMoveMode, (newValue) => {\r\n  toggleMoveMode(newValue);\r\n});\r\n\r\n// Handle localStorage changes for accordion state\r\nconst handleStorageChange = (e: StorageEvent) => {\r\n  if (e.key === 'accordion-vocabulary-header') {\r\n    // Accordion state changed, update sticky button immediately\r\n    setTimeout(() => handleScroll(), 50); // Small delay to ensure DOM is updated\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  document.addEventListener('scroll', handleScroll);\r\n  window.addEventListener('storage', handleStorageChange);\r\n  \r\n  // Listen for clicks on accordion button to immediately update sticky button\r\n  const accordionButton = document.querySelector('[data-vocabulary-header] button');\r\n  if (accordionButton) {\r\n    accordionButton.addEventListener('click', () => {\r\n      setTimeout(() => handleScroll(), 100); // Delay to ensure accordion animation completes\r\n    });\r\n  }\r\n  \r\n  handleScroll(); // Initial check\r\n});\r\n\r\nonUnmounted(() => {\r\n  document.removeEventListener('scroll', handleScroll);\r\n  window.removeEventListener('storage', handleStorageChange);\r\n  // Clean up modal-open class\r\n  document.body.classList.remove('modal-open');\r\n});\r\n\r\n</script>\r\n\r\n<style>\r\n/* Global styles for modal */\r\nbody.modal-open {\r\n  overflow: hidden !important;\r\n}\r\n\r\n/* Sticky button fade-scale transition */\r\n.fade-scale-enter-active,\r\n.fade-scale-leave-active {\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.fade-scale-enter-from,\r\n.fade-scale-leave-to {\r\n  opacity: 0;\r\n  transform: scale(0.8) translateY(10px);\r\n}\r\n\r\n.fade-scale-enter-to,\r\n.fade-scale-leave-from {\r\n  opacity: 1;\r\n  transform: scale(1) translateY(0);\r\n}\r\n\r\n/* XS: Override animation to include Add New Word positioning */\r\n@media (max-width: 639px) {\r\n  .fade-scale-enter-from,\r\n  .fade-scale-leave-to {\r\n    opacity: 0;\r\n    transform: scale(0.8) translateY(10px) translateX(1rem);\r\n  }\r\n  \r\n  .fade-scale-enter-to,\r\n  .fade-scale-leave-from {\r\n    opacity: 1;\r\n    transform: scale(1) translateY(0) translateX(1rem);\r\n  }\r\n}\r\n</style>\r\n","import { ref, computed } from 'vue'\r\n\r\ninterface GrammarExample {\r\n  id: number\r\n  text: string\r\n  translation: string\r\n  note?: string\r\n}\r\n\r\ninterface GrammarRule {\r\n  id: number\r\n  title: string\r\n  description: string\r\n}\r\n\r\ninterface GrammarMistake {\r\n  id: number\r\n  wrong: string\r\n  correct: string\r\n  explanation: string\r\n}\r\n\r\ninterface GrammarLesson {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  level: string\r\n  category: string\r\n  duration: number\r\n  rating: number\r\n  progress: number\r\n  exercises: number\r\n  theory: string\r\n  structure?: string\r\n  examples: GrammarExample[]\r\n  rules: GrammarRule[]\r\n  usageRules?: { title: string; description: string }[]\r\n  commonMistakes?: GrammarMistake[]\r\n}\r\n\r\n// Grammar Store\r\nconst grammarLessons = ref<GrammarLesson[]>([\r\n  {\r\n    id: '1',\r\n    title: 'Present Perfect Tense',\r\n    description: 'Học cách sử dụng thì hiện tại hoàn thành trong tiếng Anh với các ví dụ thực tế và bài tập.',\r\n    level: 'intermediate',\r\n    category: 'Tenses',\r\n    duration: 30,\r\n    rating: 4.8,\r\n    progress: 75,\r\n    exercises: 15,\r\n    theory: `\r\n      <h3>Cấu trúc Present Perfect</h3>\r\n      <p><strong>Khẳng định:</strong> S + have/has + V3/ed</p>\r\n      <p><strong>Phủ định:</strong> S + have/has + not + V3/ed</p>\r\n      <p><strong>Nghi vấn:</strong> Have/Has + S + V3/ed?</p>\r\n      \r\n      <h3>Cách sử dụng</h3>\r\n      <p>Thì hiện tại hoàn thành được sử dụng để:</p>\r\n      <ul>\r\n        <li>Diễn tả hành động đã xảy ra trong quá khứ nhưng không rõ thời gian</li>\r\n        <li>Diễn tả hành động bắt đầu trong quá khứ và tiếp tục đến hiện tại</li>\r\n        <li>Diễn tả kinh nghiệm sống</li>\r\n      </ul>\r\n    `,\r\n    structure: 'Subject + have/has + past participle',\r\n    examples: [\r\n      {\r\n        id: 1,\r\n        text: 'I have lived in this city for 5 years.',\r\n        translation: 'Tôi đã sống ở thành phố này được 5 năm.',\r\n        note: 'Hành động bắt đầu trong quá khứ và tiếp tục đến hiện tại'\r\n      },\r\n      {\r\n        id: 2,\r\n        text: 'She has just finished her homework.',\r\n        translation: 'Cô ấy vừa mới hoàn thành bài tập về nhà.',\r\n        note: 'Hành động vừa mới hoàn thành'\r\n      }\r\n    ],\r\n    rules: [\r\n      {\r\n        id: 1,\r\n        title: \"Sử dụng với 'for' và 'since'\",\r\n        description: \"'For' + khoảng thời gian, 'since' + mốc thời gian\"\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Sử dụng với 'already', 'yet', 'just'\",\r\n        description: \"Các trạng từ này thường đi kèm với thì hiện tại hoàn thành\"\r\n      }\r\n    ],\r\n    usageRules: [\r\n      { title: \"Sử dụng với 'for' và 'since'\", description: \"'For' + khoảng thời gian, 'since' + mốc thời gian\" },\r\n      { title: \"Sử dụng với 'already', 'yet', 'just'\", description: \"Các trạng từ này thường đi kèm với thì hiện tại hoàn thành\" }\r\n    ],\r\n    commonMistakes: [\r\n      {\r\n        id: 1,\r\n        wrong: 'I have seen him yesterday.',\r\n        correct: 'I saw him yesterday.',\r\n        explanation: 'Không dùng Present Perfect với thời gian cụ thể trong quá khứ'\r\n      }\r\n    ]\r\n  }\r\n])\r\n\r\nexport const useGrammarStore = () => {\r\n  // Computed properties\r\n  const allLessons = computed(() => grammarLessons.value)\r\n\r\n  // Methods\r\n  const getLesson = (id: string): GrammarLesson | undefined => {\r\n    return grammarLessons.value.find(lesson => lesson.id === id)\r\n  }\r\n\r\n  const updateLesson = (id: string, updates: Partial<GrammarLesson>) => {\r\n    const index = grammarLessons.value.findIndex(lesson => lesson.id === id)\r\n    if (index !== -1) {\r\n      grammarLessons.value[index] = { ...grammarLessons.value[index], ...updates }\r\n    }\r\n  }\r\n\r\n  const addLesson = (lesson: GrammarLesson) => {\r\n    grammarLessons.value.push(lesson)\r\n  }\r\n\r\n  const deleteLesson = (id: string) => {\r\n    const index = grammarLessons.value.findIndex(lesson => lesson.id === id)\r\n    if (index !== -1) {\r\n      grammarLessons.value.splice(index, 1)\r\n    }\r\n  }\r\n\r\n  const getRelatedLessons = (currentId: string, category: string) => {\r\n    return grammarLessons.value\r\n      .filter(lesson => lesson.id !== currentId && lesson.category === category)\r\n      .slice(0, 3)\r\n      .map(lesson => ({\r\n        id: lesson.id,\r\n        title: lesson.title,\r\n        category: lesson.category\r\n      }))\r\n  }\r\n\r\n  return {\r\n    allLessons,\r\n    getLesson,\r\n    updateLesson,\r\n    addLesson,\r\n    deleteLesson,\r\n    getRelatedLessons\r\n  }\r\n}\r\n","<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-[#0a0a0a] dark:to-[#0f0f0f] relative overflow-x-hidden\">\r\n    <!-- Animated Background Elements to match Dashboard style -->\r\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none z-0\">\r\n      <div class=\"floating-shapes\">\r\n        <div class=\"absolute top-20 left-10 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\r\n        <div class=\"absolute top-40 right-10 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\r\n        <div class=\"absolute -bottom-8 left-20 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\r\n      </div>\r\n    </div>\r\n    <!-- Header -->\r\n    <LazyLoadComponent animation-type=\"fade-up\">\r\n      <GrammarHeader @add-lesson=\"openAddDialog\" />\r\n    </LazyLoadComponent>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"relative z-10 max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n      <!-- Filters -->\r\n      <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.2\" root-margin=\"100px\">\r\n        <GrammarFilters\r\n          :searchQuery=\"searchQuery\"\r\n          :selectedLevel=\"selectedLevel\"\r\n          :selectedCategory=\"selectedCategory\"\r\n          :categories=\"categories\"\r\n          @update:searchQuery=\"searchQuery = $event\"\r\n          @update:selectedLevel=\"selectedLevel = $event\"\r\n          @update:selectedCategory=\"selectedCategory = $event\"\r\n        />\r\n      </LazyLoadComponent>\r\n\r\n      <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.2\" root-margin=\"150px\">\r\n        <!-- Grammar Lessons Grid -->\r\n        <div v-if=\"filteredLessons.length > 0\" class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          <GrammarCard\r\n            v-for=\"lesson in filteredLessons\"\r\n            :key=\"lesson.id\"\r\n            :lesson=\"lesson\"\r\n            @view-lesson=\"viewLesson\"\r\n            @practice-lesson=\"practiceLesson\"\r\n            @edit-lesson=\"openEditDialog\"\r\n            @delete-lesson=\"deleteLesson\"\r\n          />\r\n        </div>\r\n\r\n        <!-- Empty State -->\r\n        <GrammarEmptyState\r\n          v-else\r\n          @add-lesson=\"openAddDialog\"\r\n        />\r\n      </LazyLoadComponent>\r\n    </div>\r\n\r\n    <!-- Grammar Form Dialog -->\r\n    <GrammarFormDialog\r\n      v-model=\"showFormDialog\"\r\n      :edit-id=\"currentEditId\"\r\n      @saved=\"onLessonSaved\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, defineAsyncComponent } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { loadComponentSafely } from '../../utils/import-helper'\r\nimport { useGrammarStore } from '../../composables/useGrammarStore'\r\n\r\n// Sử dụng defineAsyncComponent để import components an toàn\r\nconst LazyLoadComponent = defineAsyncComponent(() => import('../../components/LazyLoadComponent.vue'))\r\nconst GrammarHeader = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/GrammarHeader.vue'))\r\n)\r\nconst GrammarFilters = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/GrammarFilters.vue'))\r\n)\r\nconst GrammarCard = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/GrammarCard.vue'))\r\n)\r\nconst GrammarEmptyState = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/GrammarEmptyState.vue'))\r\n)\r\nconst GrammarFormDialog = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/GrammarFormDialog.vue'))\r\n)\r\n\r\nconst router = useRouter()\r\nconst { t } = useI18n()\r\nconst grammarStore = useGrammarStore()\r\n\r\n// Dialog control\r\nconst showFormDialog = ref(false)\r\nconst currentEditId = ref('')\r\n\r\n// Data\r\nconst searchQuery = ref('')\r\nconst selectedLevel = ref('')\r\nconst selectedCategory = ref('')\r\n\r\nconst categories = ref([\r\n  'Tenses', 'Conditionals', 'Passive Voice', 'Modal Verbs', 'Reported Speech', \r\n  'Articles', 'Prepositions', 'Adjectives & Adverbs', 'Phrasal Verbs', 'Gerunds & Infinitives'\r\n])\r\n\r\n// Computed\r\nconst filteredLessons = computed(() => {\r\n  return grammarStore.allLessons.value.filter(lesson => {\r\n    const matchesSearch = lesson.title.toLowerCase().includes(searchQuery.value.toLowerCase()) ||\r\n                         lesson.description.toLowerCase().includes(searchQuery.value.toLowerCase())\r\n    const matchesLevel = !selectedLevel.value || lesson.level === selectedLevel.value\r\n    const matchesCategory = !selectedCategory.value || lesson.category === selectedCategory.value\r\n    \r\n    return matchesSearch && matchesLevel && matchesCategory\r\n  })\r\n})\r\n\r\n// Methods\r\nconst openAddDialog = () => {\r\n  currentEditId.value = ''\r\n  showFormDialog.value = true\r\n}\r\n\r\nconst openEditDialog = (lesson: any) => {\r\n  currentEditId.value = lesson.id\r\n  showFormDialog.value = true\r\n}\r\n\r\nconst onLessonSaved = (lesson: any) => {\r\n  // Optionally do something after lesson is saved\r\n  console.log('Lesson saved:', lesson)\r\n}\r\n\r\nconst viewLesson = (lesson: any) => {\r\n  router.push(`/grammar/${lesson.id}`)\r\n}\r\n\r\nconst practiceLesson = (lesson: any) => {\r\n  router.push(`/grammar/${lesson.id}/practice`)\r\n}\r\n\r\nconst deleteLesson = (lesson: any) => {\r\n  if (confirm(t('grammar.confirmDelete', { title: lesson.title }) || `Delete lesson \"${lesson.title}\"?`)) {\r\n    grammarStore.deleteLesson(lesson.id)\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  // Load grammar lessons data\r\n  console.log('Grammar list mounted')\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.line-clamp-3 {\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 3;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n}\r\n</style>\r\n","<template>\n  <div class=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-[#0a0a0a] dark:to-[#0f0f0f] relative overflow-x-hidden\">\n    <!-- Animated Background Elements to match Dashboard style -->\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none z-0\">\n      <div class=\"floating-shapes\">\n        <div class=\"absolute top-20 left-10 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\n        <div class=\"absolute top-40 right-10 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\n        <div class=\"absolute -bottom-8 left-20 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\n      </div>\n    </div>\n    <!-- Loading State -->\n    <div v-if=\"isLoading\" class=\"relative z-10 max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n      <div class=\"bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl rounded-2xl border border-white/20 dark:border-white/10 p-6\">\n        <div class=\"animate-pulse\">\n          <div class=\"h-8 bg-gray-200 dark:bg-dark-bg-mute rounded w-1/2 mb-4\"></div>\n          <div class=\"space-y-3\">\n            <div class=\"h-4 bg-gray-200 dark:bg-dark-bg-mute rounded\"></div>\n            <div class=\"h-4 bg-gray-200 dark:bg-dark-bg-mute rounded w-5/6\"></div>\n            <div class=\"h-4 bg-gray-200 dark:bg-dark-bg-mute rounded w-3/4\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Content -->\n    <div v-else class=\"relative z-10 max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n      <!-- Header -->\n      <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 p-6 mb-6 transition-all duration-500\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <button @click=\"goBack\" class=\"p-2 rounded-lg text-gray-600 dark:text-white/70 hover:text-gray-800 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-[#0f0f0f] transition-colors\">\n            <svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\"/>\n            </svg>\n          </button>\n          \n          <div class=\"flex space-x-2\">\n            <button @click=\"practiceLesson\" class=\"bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\">\n              <svg class=\"w-5 h-5 inline mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clip-rule=\"evenodd\"/>\n              </svg>\n              {{ t('grammar.practice.title', 'Practice') }}\n            </button>\n            <button @click=\"openEditDialog\" class=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\">\n              <svg class=\"w-5 h-5 inline mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z\"/>\n              </svg>\n              {{ t('common.edit', 'Edit') }}\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"flex items-center justify-between\">\n          <div>\n            <div class=\"flex items-center mb-1\">\n              <div class=\"animate-pulse-slow\"><div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full mr-2.5\"></div></div>\n              <h1 class=\"text-2xl sm:text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent\">{{ lesson.title }}</h1>\n            </div>\n            <p class=\"mt-2 text-gray-700 dark:text-white/80\">{{ lesson.description }}</p>\n          </div>\n          \n          <div class=\"text-right\">\n            <span :class=\"getLevelColor(lesson.level)\" class=\"px-3 py-1 text-sm font-medium rounded-full\">\n              {{ getLevelText(lesson.level) }}\n            </span>\n            <p class=\"text-sm text-gray-500 dark:text-white/60 mt-2\">{{ lesson.duration }} {{ t('grammar.duration', 'mins') }}</p>\n          </div>\n        </div>\n        \n        <!-- Progress Bar -->\n        <div class=\"mt-6\">\n          <div class=\"flex justify-between text-sm text-gray-700 dark:text-white/80 mb-2\">\n            <span>{{ t('grammar.progress', 'Progress') }}</span>\n            <span>{{ lesson.progress }}%</span>\n          </div>\n          <div class=\"w-full bg-gray-200 dark:bg-dark-bg-mute rounded-full h-3\">\n            <div class=\"bg-blue-500 h-3 rounded-full transition-all duration-300\" :style=\"{ width: lesson.progress + '%' }\"></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Lesson Content -->\n      <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <!-- Main Content -->\n        <div class=\"lg:col-span-2 space-y-6\">\n          <!-- Theory Section -->\n          <div class=\"bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl rounded-2xl border border-white/20 dark:border-white/10 p-6\">\n            <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">{{ t('grammar.detail.theory', 'Theory') }}</h2>\n            <div class=\"prose dark:prose-invert max-w-none\">\n              <div v-html=\"lesson.theory\"></div>\n            </div>\n          </div>\n\n          <!-- Examples Section -->\n          <div class=\"bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl rounded-2xl border border-white/20 dark:border-white/10 p-6\">\n            <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">{{ t('grammar.detail.examples', 'Examples') }}</h2>\n            <div class=\"space-y-4\">\n              <div v-for=\"example in lesson.examples\" :key=\"example.id\" class=\"border-l-4 border-blue-500 pl-4\">\n                <p class=\"text-gray-900 dark:text-white font-medium\">{{ example.sentence }}</p>\n                <p class=\"text-gray-600 dark:text-white/80 text-sm mt-1\">{{ example.translation }}</p>\n                <p class=\"text-gray-500 dark:text-white/60 text-xs mt-1\" v-if=\"example.note\">{{ example.note }}</p>\n              </div>\n            </div>\n          </div>\n\n          <!-- Usage Rules -->\n          <div class=\"bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl rounded-2xl border border-white/20 dark:border-white/10 p-6\">\n            <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">{{ t('grammar.detail.usageRules', 'Usage Rules') }}</h2>\n            <div class=\"space-y-3\">\n              <div v-for=\"rule in lesson.rules\" :key=\"rule.id\" class=\"flex items-start space-x-3\">\n                <div class=\"flex-shrink-0 w-6 h-6 bg-blue-100 dark:bg-dark-bg-mute rounded-full flex items-center justify-center\">\n                  <span class=\"text-blue-600 dark:text-blue-400 text-sm font-medium\">{{ rule.id }}</span>\n                </div>\n                <div>\n                  <p class=\"text-gray-900 dark:text-white\">{{ rule.title }}</p>\n                  <p class=\"text-gray-600 dark:text-white/80 text-sm\">{{ rule.description }}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Common Mistakes -->\n          <div v-if=\"lesson.commonMistakes && lesson.commonMistakes.length > 0\" class=\"bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl rounded-2xl border border-white/20 dark:border-white/10 p-6\">\n            <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">{{ t('grammar.detail.commonMistakes', 'Common Mistakes') }}</h2>\n            <div class=\"space-y-4\">\n              <div v-for=\"mistake in lesson.commonMistakes\" :key=\"mistake.id\" class=\"bg-red-50 dark:bg-dark-bg-mute border border-red-200 dark:border-red-900 rounded-lg p-4\">\n                <div class=\"flex items-start space-x-3\">\n                  <svg class=\"w-5 h-5 text-red-500 dark:text-red-400 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clip-rule=\"evenodd\"/>\n                  </svg>\n                  <div>\n                    <p class=\"text-red-800 dark:text-red-400 font-medium\">❌ {{ mistake.wrong }}</p>\n                    <p class=\"text-green-800 dark:text-green-400 font-medium mt-1\">✅ {{ mistake.correct }}</p>\n                    <p class=\"text-gray-600 dark:text-white/80 text-sm mt-1\">{{ mistake.explanation }}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Sidebar -->\n        <div class=\"space-y-6\">\n          <!-- Quick Info -->\n          <div class=\"bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl rounded-2xl border border-white/20 dark:border-white/10 p-6\">\n            <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">{{ t('grammar.detail.info', 'Info') }}</h3>\n            <div class=\"space-y-3\">\n              <div class=\"flex justify-between\">\n                <span class=\"text-gray-600 dark:text-white/60\">{{ t('grammar.detail.topic', 'Topic') }}:</span>\n                <span class=\"text-gray-900 dark:text-white\">{{ lesson.category }}</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-gray-600 dark:text-white/60\">{{ t('grammar.detail.duration', 'Duration') }}:</span>\n                <span class=\"text-gray-900 dark:text-white\">{{ lesson.duration }} {{ t('grammar.duration', 'mins') }}</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-gray-600 dark:text-white/60\">{{ t('grammar.detail.exercises', 'Exercises') }}:</span>\n                <span class=\"text-gray-900 dark:text-white\">{{ lesson.exercises }}</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-gray-600 dark:text-white/60\">{{ t('grammar.detail.rating', 'Rating') }}:</span>\n                <div class=\"flex items-center\">\n                  <svg class=\"w-4 h-4 text-yellow-400 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"/>\n                  </svg>\n                  <span class=\"text-gray-900 dark:text-white\">{{ lesson.rating }}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Related Lessons -->\n          <div class=\"bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl rounded-2xl border border-white/20 dark:border-white/10 p-6\">\n            <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">{{ t('grammar.detail.relatedLessons', 'Related Lessons') }}</h3>\n            <div class=\"space-y-3\">\n              <div v-for=\"related in relatedLessons\" :key=\"related.id\" class=\"border border-white/20 dark:border-white/10 rounded-lg p-3 hover:bg-white/60 dark:hover:bg-[#0f0f0f] transition-colors cursor-pointer\" @click=\"viewRelatedLesson(related)\">\n                <p class=\"text-sm font-medium text-gray-900 dark:text-white\">{{ related.title }}</p>\n                <p class=\"text-xs text-gray-500 dark:text-white/60\">{{ related.category }}</p>\n              </div>\n            </div>\n          </div>\n\n          <!-- Quick Actions -->\n          <div class=\"bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl rounded-2xl border border-white/20 dark:border-white/10 p-6\">\n            <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">{{ t('common.actions', 'Actions') }}</h3>\n            <div class=\"space-y-3\">\n              <button @click=\"markAsCompleted\" class=\"w-full bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\">\n                {{ t('grammar.detail.markCompleted', 'Mark as Completed') }}\n              </button>\n              <button @click=\"addToFavorites\" class=\"w-full bg-yellow-500 hover:bg-yellow-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\">\n                {{ t('grammar.detail.addToFavorites', 'Add to Favorites') }}\n              </button>\n              <button @click=\"shareLesson\" class=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\">\n                {{ t('grammar.detail.shareLesson', 'Share Lesson') }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Grammar Form Dialog -->\n    <GrammarFormDialog\n      v-model=\"showEditDialog\"\n      :edit-id=\"currentLessonId\"\n      @saved=\"onLessonUpdated\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, defineAsyncComponent } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\nimport { useGrammarStore } from '../../composables/useGrammarStore'\nimport { useI18n } from 'vue-i18n'\nimport { loadComponentSafely } from '../../utils/import-helper'\n\nconst GrammarFormDialog = defineAsyncComponent(\n  loadComponentSafely(() => import('./components/GrammarFormDialog.vue'))\n)\n\nconst router = useRouter()\nconst route = useRoute()\nconst grammarStore = useGrammarStore()\nconst { t } = useI18n()\n\n// Dialog control\nconst showEditDialog = ref(false)\nconst currentLessonId = ref('')\n\n// Define interfaces for type safety\ninterface Lesson {\n  id: string | number;\n  title: string;\n  description: string;\n  level: string;\n  category: string;\n  duration: number;\n  rating: number;\n  progress: number;\n  exercises: number;\n  theory: string;\n  examples: Array<{\n    id: number;\n    sentence: string;\n    translation: string;\n    note?: string;\n  }>;\n  rules: Array<{\n    id: number;\n    title: string;\n    description: string;\n  }>;\n  commonMistakes: Array<{\n    id: number;\n    wrong: string;\n    correct: string;\n    explanation: string;\n  }>;\n}\n\ninterface RelatedLesson {\n  id: number;\n  title: string;\n  category: string;\n}\n\n// Data\nconst isLoading = ref(true)\nconst lesson = ref<Lesson>({} as Lesson)\nconst relatedLessons = ref<RelatedLesson[]>([])\n\n// Methods\nconst loadLesson = async () => {\n  const id = route.params.id as string\n  currentLessonId.value = id\n  \n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500))\n    \n    // Get lesson from store\n    const grammarLesson = grammarStore.getLesson(id)\n    \n    if (grammarLesson) {\n      // Map grammar lesson to detail view format\n      lesson.value = {\n        id: grammarLesson.id,\n        title: grammarLesson.title,\n        description: grammarLesson.description,\n        level: grammarLesson.level,\n        category: grammarLesson.category,\n        duration: grammarLesson.duration,\n        rating: grammarLesson.rating,\n        progress: grammarLesson.progress,\n        exercises: grammarLesson.exercises,\n        theory: grammarLesson.theory,\n        examples: grammarLesson.examples.map(ex => ({\n          id: ex.id,\n          sentence: ex.text,\n          translation: ex.translation,\n          note: ex.note\n        })),\n        rules: grammarLesson.rules,\n        commonMistakes: grammarLesson.commonMistakes || []\n      }\n      \n      // Get related lessons\n      const related = grammarStore.getRelatedLessons(id, grammarLesson.category)\n      relatedLessons.value = related.map(rel => ({\n        id: parseInt(rel.id),\n        title: rel.title,\n        category: rel.category\n      }))\n    } else {\n      // Lesson not found\n      console.error('Lesson not found:', id)\n    }\n    \n  } catch (error) {\n    console.error('Error loading lesson:', error)\n  } finally {\n    isLoading.value = false\n  }\n}\n\nconst goBack = () => {\n  router.back()\n}\n\nconst practiceLesson = () => {\n  router.push(`/grammar/${route.params.id}/practice`)\n}\n\nconst openEditDialog = () => {\n  showEditDialog.value = true\n}\n\nconst onLessonUpdated = () => {\n  // Reload the lesson data\n  loadLesson()\n}\n\nconst viewRelatedLesson = (relatedLesson: RelatedLesson) => {\n  router.push(`/grammar/${relatedLesson.id}`)\n}\n\nconst markAsCompleted = () => {\n  lesson.value.progress = 100\n  grammarStore.updateLesson(currentLessonId.value, { progress: 100 })\n}\n\nconst addToFavorites = () => {\n  // Add to favorites\n  alert(t('grammar.detail.addedToFavorites', 'Added to favorites'))\n}\n\nconst shareLesson = () => {\n  // Share functionality\n  if (navigator.share) {\n    navigator.share({\n      title: lesson.value.title,\n      text: lesson.value.description,\n      url: window.location.href\n    })\n  } else {\n    // Fallback\n    navigator.clipboard.writeText(window.location.href)\n    alert(t('grammar.detail.linkCopied', 'Link copied to clipboard'))\n  }\n}\n\nconst getLevelColor = (level: string) => {\n  switch (level) {\n    case 'beginner': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300'\n    case 'intermediate': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300'\n    case 'advanced': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'\n    default: return 'bg-gray-100 text-gray-800 dark:bg-dark-bg-mute dark:text-white/80'\n  }\n}\n\nconst getLevelText = (level: string) => {\n  const fallbackMap: Record<string, string> = {\n    beginner: 'Beginner',\n    intermediate: 'Intermediate',\n    advanced: 'Advanced',\n  }\n  return t(`grammar.levels.${level}`, fallbackMap[level] || 'Level')\n}\n\nonMounted(() => {\n  loadLesson()\n})\n</script>\n\n<style scoped>\n.prose h3 {\n  @apply text-lg font-semibold text-gray-900 dark:text-white mt-4 mb-2;\n}\n\n.prose p {\n  @apply text-gray-700 dark:text-white/80 mb-3;\n}\n\n.prose ul {\n  @apply list-disc list-inside text-gray-700 dark:text-white/80 space-y-1;\n}\n\n.prose strong {\n  @apply font-semibold text-gray-900 dark:text-white;\n}\n</style>\n","<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-[#0a0a0a] dark:to-[#0f0f0f] relative overflow-x-hidden\">\r\n    <!-- Animated Background Elements to match Dashboard style -->\r\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none z-0\">\r\n      <div class=\"floating-shapes\">\r\n        <div class=\"absolute top-16 left-8 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\r\n        <div class=\"absolute top-36 right-8 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\r\n        <div class=\"absolute -bottom-10 left-24 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\r\n      </div>\r\n    </div>\r\n    <!-- Header -->\r\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-3 sm:pt-6\">\r\n      <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] p-3 sm:p-4 md:p-5 lg:p-6\">\r\n        <div class=\"flex items-center justify-between\">\r\n          <div class=\"flex items-center space-x-4\">\r\n            <button\r\n              @click=\"goBackToGrammarDetail\"\r\n              class=\"p-2 rounded-lg text-gray-600 dark:text-white/70 hover:text-gray-800 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-[#0f0f0f] transition-colors\"\r\n            >\r\n              <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n              </svg>\r\n            </button>\r\n            <div>\r\n              <div class=\"flex items-center mb-1\">\r\n                <div class=\"animate-pulse-slow\">\r\n                  <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full mr-2.5\"></div>\r\n                </div>\r\n                <h1 class=\"text-xl sm:text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent\">\r\n                  {{ t('grammar.practice.title', 'Practice') }}\r\n                </h1>\r\n              </div>\r\n              <p class=\"text-sm text-gray-600 dark:text-white/70\">\r\n                {{ t('grammar.practice.subtitle', 'Choose a mode to practice grammar with interactive exercises') }}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Settings and Progress -->\r\n          <div class=\"flex items-center space-x-4\">\r\n            <div class=\"text-sm text-gray-600 dark:text-white/70\">\r\n              {{ t('grammar.practice.score', 'Score') }}: <span class=\"font-medium text-blue-600 dark:text-blue-400\">{{ totalScore }}</span>\r\n            </div>\r\n            \r\n            <!-- Exercise Management Button -->\r\n            <button\r\n              @click=\"showExerciseManager = true\"\r\n              class=\"p-2 rounded-lg text-gray-600 dark:text-white/70 hover:text-gray-800 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-[#0f0f0f] transition-colors\"\r\n              :title=\"t('grammar.practice.exerciseManager.title', 'Manage exercises')\"\r\n            >\r\n              <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\r\n              </svg>\r\n            </button>\r\n            \r\n            <!-- Settings Button -->\r\n            <button\r\n              @click=\"showSettings = true\"\r\n              class=\"p-2 rounded-lg text-gray-600 dark:text-white/70 hover:text-gray-800 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-[#0f0f0f] transition-colors\"\r\n              :title=\"t('grammar.practice.settings.title', 'Settings')\"\r\n            >\r\n              <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n      <!-- Exercise Type Selection -->\r\n      <div v-if=\"!selectedExercise\" class=\"space-y-6\">\r\n        <div class=\"text-center\">\r\n          <h2 class=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent mb-4\">\r\n            {{ t('grammar.practice.chooseExercise', 'Choose an exercise') }}\r\n          </h2>\r\n          <p class=\"text-gray-700 dark:text-white/70 mb-8\">\r\n            {{ t('grammar.practice.chooseDescription', 'Select a practice type below to get started') }}\r\n          </p>\r\n        </div>\r\n\r\n        <!-- Exercise Cards Grid -->\r\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <div\r\n            v-for=\"exercise in exerciseTypes\"\r\n            :key=\"exercise.type\"\r\n            @click=\"startExercise(exercise.type)\"\r\n            class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 dark:border-white/10 p-6 cursor-pointer hover:shadow-2xl hover:scale-[1.03] transition-all duration-300\"\r\n          >\r\n            <div class=\"text-center\">\r\n              <div class=\"w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center\" :class=\"exercise.colorClass\">\r\n                <component :is=\"exercise.icon\" class=\"w-8 h-8 text-white\" />\r\n              </div>\r\n              <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\r\n                {{ tf(`grammar.practice.exercises.${exercise.type}.title`, exercise.title) }}\r\n              </h3>\r\n              <p class=\"text-sm text-gray-600 dark:text-white/70 mb-4\">\r\n                {{ tf(`grammar.practice.exercises.${exercise.type}.description`, exercise.description) }}\r\n              </p>\r\n              <div class=\"flex items-center justify-center space-x-4 text-xs text-gray-500 dark:text-white/60\">\r\n                <span>{{ exercise.duration }}</span>\r\n                <span>•</span>\r\n                <span>{{ exercise.difficulty }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Exercise Content -->\r\n      <div v-else class=\"space-y-6\">\r\n        <!-- Exercise Header -->\r\n        <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-6\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <div class=\"flex items-center space-x-4\">\r\n              <button\r\n                @click=\"goBackToSelection\"\r\n                class=\"p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\r\n              >\r\n                <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n                </svg>\r\n              </button>\r\n              <div>\r\n                <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n                  {{ tf(`grammar.practice.exercises.${selectedExercise}.title`, 'Exercise') }}\r\n                </h2>\r\n                <p class=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  {{ t('grammar.practice.question', 'Question') }} {{ currentQuestionIndex + 1 }} / {{ totalQuestions }}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Progress Bar -->\r\n            <div class=\"flex items-center space-x-4\">\r\n              <div class=\"w-32 bg-gray-200 dark:bg-mute rounded-full h-2\">\r\n                <div \r\n                  class=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                  :style=\"{ width: `${(currentQuestionIndex / totalQuestions) * 100}%` }\"\r\n                ></div>\r\n              </div>\r\n              <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                {{ Math.round((currentQuestionIndex / totalQuestions) * 100) }}%\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Exercise Component -->\r\n        <component \r\n          :is=\"currentExerciseComponent\"\r\n          :question=\"currentQuestion\"\r\n          :question-index=\"currentQuestionIndex\"\r\n          :total-questions=\"totalQuestions\"\r\n          :difficulty=\"settings.difficulty\"\r\n          @answer=\"handleAnswer\"\r\n          @next=\"nextQuestion\"\r\n          @complete=\"completeExercise\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Settings Modal -->\r\n    <Transition\r\n      enter-active-class=\"transition-all duration-500 ease-out\"\r\n      enter-from-class=\"opacity-0\"\r\n      enter-to-class=\"opacity-100\"\r\n      leave-active-class=\"transition-all duration-300 ease-in\"\r\n      leave-from-class=\"opacity-100\"\r\n      leave-to-class=\"opacity-0\"\r\n    >\r\n      <div v-if=\"showSettings\" class=\"fixed inset-0 bg-black/50 dark:bg-black/60 flex items-center justify-center p-4 z-50 backdrop-blur-sm\">\r\n        <Transition\r\n          enter-active-class=\"transition-all duration-500 ease-out\"\r\n          enter-from-class=\"opacity-0 scale-90 translate-y-8 rotate-1\"\r\n          enter-to-class=\"opacity-100 scale-100 translate-y-0 rotate-0\"\r\n          leave-active-class=\"transition-all duration-300 ease-in\"\r\n          leave-from-class=\"opacity-100 scale-100 translate-y-0 rotate-0\"\r\n          leave-to-class=\"opacity-0 scale-90 translate-y-8 rotate-1\"\r\n        >\r\n          <div class=\"w-full max-h-[90vh] flex flex-col max-w-md sm:max-w-md md:max-w-lg\" @click.stop>\r\n            <div class=\"bg-white dark:bg-[#0a0a0a] shadow-2xl rounded-xl border border-gray-200 dark:border-dark-bg-mute flex flex-col h-full overflow-hidden transform\">\r\n              <!-- Header -->\r\n              <div class=\"px-6 py-4 border-b border-gray-200 dark:border-dark-bg-mute flex-shrink-0 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-[#0a0a0a] dark:to-[#0a0a0a]\">\r\n                <div class=\"flex items-center justify-between\">\r\n                  <h3 class=\"text-lg sm:text-xl font-semibold text-gray-900 dark:text-white flex items-center space-x-2\">\r\n                    <span class=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></span>\r\n                    <span>{{ t('grammar.practice.settings.title', 'Settings') }}</span>\r\n                  </h3>\r\n                  <button \r\n                    @click=\"showSettings = false\"\r\n                    class=\"text-gray-400 dark:text-white hover:text-gray-600 dark:hover:text-white transition-all duration-300 hover:scale-110 hover:rotate-90 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-dark-bg-mute\"\r\n                  >\r\n                    <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Body -->\r\n              <div class=\"px-6 py-4 flex-1 overflow-y-auto min-h-0 space-y-4\">\r\n                <!-- Difficulty Level -->\r\n                <div>\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-white mb-2\">\r\n                    {{ t('grammar.practice.settings.difficulty', 'Difficulty') }}\r\n                  </label>\r\n                  <select \r\n                    v-model=\"settings.difficulty\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-bg-mute rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:border-blue-500\"\r\n                  >\r\n                    <option value=\"easy\">{{ t('grammar.practice.settings.levels.easy', 'Easy') }}</option>\r\n                    <option value=\"medium\">{{ t('grammar.practice.settings.levels.medium', 'Medium') }}</option>\r\n                    <option value=\"hard\">{{ t('grammar.practice.settings.levels.hard', 'Hard') }}</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <!-- Auto-play Audio -->\r\n                <div class=\"flex items-center justify-between\">\r\n                  <label class=\"text-sm font-medium text-gray-700 dark:text-white\">\r\n                    {{ t('grammar.practice.settings.autoPlay', 'Auto-play audio') }}\r\n                  </label>\r\n                  <button\r\n                    @click=\"settings.autoPlayAudio = !settings.autoPlayAudio\"\r\n                    :class=\"[\r\n                      'relative inline-flex h-6 w-11 items-center rounded-full transition-colors',\r\n                      settings.autoPlayAudio ? 'bg-blue-600' : 'bg-gray-200 dark:bg-dark-bg-mute'\r\n                    ]\"\r\n                  >\r\n                    <span\r\n                      :class=\"[\r\n                        'inline-block h-4 w-4 transform rounded-full bg-white transition-transform',\r\n                        settings.autoPlayAudio ? 'translate-x-6' : 'translate-x-1'\r\n                      ]\"\r\n                    />\r\n                  </button>\r\n                </div>\r\n\r\n                <!-- Show Explanations -->\r\n                <div class=\"flex items-center justify-between\">\r\n                  <label class=\"text-sm font-medium text-gray-700 dark:text-white\">\r\n                    {{ t('grammar.practice.settings.showExplanations', 'Show explanations') }}\r\n                  </label>\r\n                  <button\r\n                    @click=\"settings.showExplanations = !settings.showExplanations\"\r\n                    :class=\"[\r\n                      'relative inline-flex h-6 w-11 items-center rounded-full transition-colors',\r\n                      settings.showExplanations ? 'bg-blue-600' : 'bg-gray-200 dark:bg-dark-bg-mute'\r\n                    ]\"\r\n                  >\r\n                    <span\r\n                      :class=\"[\r\n                        'inline-block h-4 w-4 transform rounded-full bg-white transition-transform',\r\n                        settings.showExplanations ? 'translate-x-6' : 'translate-x-1'\r\n                      ]\"\r\n                    />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Footer -->\r\n              <div class=\"px-6 py-4 border-t border-gray-200 dark:border-dark-bg-mute flex-shrink-0 bg-gradient-to-r from-gray-50 to-blue-50 dark:from-[#0a0a0a] dark:to-[#0a0a0a]\">\r\n                <div class=\"flex justify-end space-x-3\">\r\n                  <button\r\n                    @click=\"showSettings = false\"\r\n                    class=\"px-6 py-2 text-gray-700 dark:text-white bg-gray-100 dark:bg-dark-bg-mute hover:bg-gray-200 dark:hover:bg-dark-bg-soft rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium\"\r\n                  >\r\n                    {{ t('common.cancel', 'Cancel') }}\r\n                  </button>\r\n                  <button\r\n                    @click=\"saveSettings\"\r\n                    class=\"px-6 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium\"\r\n                  >\r\n                    {{ t('common.save', 'Save') }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Transition>\r\n      </div>\r\n    </Transition>\r\n\r\n    <!-- Results Modal -->\r\n    <div v-if=\"showResults\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700 p-6 max-w-lg w-full mx-4\">\r\n        <div class=\"text-center\">\r\n          <div class=\"w-20 h-20 mx-auto mb-4 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center\">\r\n            <svg class=\"w-10 h-10 text-green-600 dark:text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n          </div>\r\n          \r\n          <h3 class=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\r\n            {{ t('grammar.practice.results.title', 'Great job!') }}\r\n          </h3>\r\n          \r\n          <div class=\"space-y-4 mb-6\">\r\n            <div class=\"grid grid-cols-3 gap-4 text-center\">\r\n              <div class=\"bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4\">\r\n                <div class=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{{ exerciseResults.correct }}</div>\r\n                <div class=\"text-sm text-gray-600 dark:text-gray-400\">{{ t('grammar.practice.results.correct', 'Correct') }}</div>\r\n              </div>\r\n              <div class=\"bg-red-50 dark:bg-red-900/30 rounded-lg p-4\">\r\n                <div class=\"text-2xl font-bold text-red-600 dark:text-red-400\">{{ exerciseResults.incorrect }}</div>\r\n                <div class=\"text-sm text-gray-600 dark:text-gray-400\">{{ t('grammar.practice.results.incorrect', 'Incorrect') }}</div>\r\n              </div>\r\n              <div class=\"bg-green-50 dark:bg-green-900/30 rounded-lg p-4\">\r\n                <div class=\"text-2xl font-bold text-green-600 dark:text-green-400\">{{ exerciseResults.percentage }}%</div>\r\n                <div class=\"text-sm text-gray-600 dark:text-gray-400\">{{ t('grammar.practice.results.accuracy', 'Accuracy') }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"flex justify-center space-x-4\">\r\n            <button\r\n              @click=\"restartExercise\"\r\n              class=\"px-6 py-3 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\r\n            >\r\n              {{ t('grammar.practice.results.tryAgain', 'Try again') }}\r\n            </button>\r\n            <button\r\n              @click=\"goBackToSelection\"\r\n              class=\"px-6 py-3 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors\"\r\n            >\r\n              {{ t('grammar.practice.results.chooseAnother', 'Choose another exercise') }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Exercise Manager Component -->\r\n    <ExerciseManager\r\n      v-model=\"showExerciseManager\"\r\n      :exercise-types=\"exerciseTypes\"\r\n      @add-exercise=\"addExerciseType\"\r\n      @edit-exercise=\"editExerciseType\"\r\n      @delete-exercise=\"deleteExerciseType\"\r\n      @save-exercises=\"saveExerciseTypes\"\r\n      @open-question-manager=\"openQuestionManager\"\r\n    />\r\n\r\n    <!-- Question Manager Modal -->\r\n    <div v-if=\"showQuestionManager\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700 p-6 max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\r\n        <div class=\"flex items-center justify-between mb-6\">\r\n          <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            {{ t('grammar.practice.questionManager.title') }}: {{ t(`grammar.practice.exercises.${selectedExerciseTypeForQuestions}.title`) }}\r\n          </h3>\r\n          <button\r\n            @click=\"closeQuestionManager\"\r\n            class=\"p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\r\n          >\r\n            <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        <!-- Question Management -->\r\n        <div class=\"space-y-6\">\r\n          <!-- Add New Question Form -->\r\n          <div class=\"bg-gray-50 dark:bg-gray-800/30 border border-gray-200 dark:border-gray-600 rounded-lg p-4\">\r\n            <h4 class=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\r\n              {{ editingQuestionIndex >= 0 ? t('grammar.practice.questionManager.editQuestion') : t('grammar.practice.questionManager.addNew') }}\r\n            </h4>\r\n            \r\n            <!-- Writing Exercise Form -->\r\n            <div v-if=\"selectedExerciseTypeForQuestions === 'writing'\" class=\"space-y-4\">\r\n              <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    {{ t('grammar.practice.questionManager.taskType') }}\r\n                  </label>\r\n                  <select\r\n                    v-model=\"newQuestion.taskType\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"essay\">{{ t('grammar.practice.exercises.writing.essay') }}</option>\r\n                    <option value=\"email\">{{ t('grammar.practice.exercises.writing.email') }}</option>\r\n                    <option value=\"letter\">{{ t('grammar.practice.exercises.writing.letter') }}</option>\r\n                    <option value=\"paragraph\">{{ t('grammar.practice.exercises.writing.paragraph') }}</option>\r\n                  </select>\r\n                </div>\r\n                <div class=\"grid grid-cols-2 gap-2\">\r\n                  <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                      {{ t('grammar.practice.questionManager.minWords') }}\r\n                    </label>\r\n                    <input\r\n                      v-model.number=\"newQuestion.minWords\"\r\n                      type=\"number\"\r\n                      min=\"50\"\r\n                      class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    >\r\n                  </div>\r\n                  <div>\r\n                    <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                      {{ t('grammar.practice.questionManager.timeLimit') }}\r\n                    </label>\r\n                    <input\r\n                      v-model.number=\"newQuestion.timeLimit\"\r\n                      type=\"number\"\r\n                      min=\"5\"\r\n                      class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.prompt') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.prompt\"\r\n                  rows=\"3\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.promptPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n              <div>\r\n                <div class=\"flex items-center justify-between mb-2\">\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                    {{ t('grammar.practice.questionManager.requirements') }}\r\n                  </label>\r\n                  <button\r\n                    @click=\"addRequirement\"\r\n                    class=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300\"\r\n                  >\r\n                    + {{ t('grammar.practice.questionManager.addRequirement') }}\r\n                  </button>\r\n                </div>\r\n                <div class=\"space-y-2\">\r\n                  <div \r\n                    v-for=\"(requirement, index) in newQuestion.requirements\" \r\n                    :key=\"index\"\r\n                    class=\"flex items-center space-x-2\"\r\n                  >\r\n                    <input\r\n                      v-model=\"newQuestion.requirements[index]\"\r\n                      type=\"text\"\r\n                      class=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                      :placeholder=\"t('grammar.practice.questionManager.requirementPlaceholder')\"\r\n                    >\r\n                    <button\r\n                      @click=\"removeRequirement(index)\"\r\n                      class=\"p-2 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/30 rounded\"\r\n                      :disabled=\"newQuestion.requirements.length === 1\"\r\n                    >\r\n                      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                      </svg>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Multiple Choice Form -->\r\n            <div v-else-if=\"selectedExerciseTypeForQuestions === 'multiple-choice'\" class=\"space-y-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.question') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.question\"\r\n                  rows=\"2\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.questionPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.options') }}\r\n                </label>\r\n                <div class=\"space-y-2\">\r\n                  <div v-for=\"(option, index) in newQuestion.options\" :key=\"index\" class=\"flex items-center space-x-2\">\r\n                    <span class=\"text-sm font-medium text-gray-500 dark:text-gray-400 w-6\">{{ String.fromCharCode(65 + index) }}.</span>\r\n                    <input\r\n                      v-model=\"newQuestion.options[index]\"\r\n                      type=\"text\"\r\n                      class=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                      :placeholder=\"t('grammar.practice.questionManager.optionPlaceholder')\"\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.correctAnswer') }}\r\n                </label>\r\n                <select\r\n                  v-model=\"newQuestion.correctAnswer\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                >\r\n                  <option v-for=\"(option, index) in newQuestion.options\" :key=\"index\" :value=\"option\">\r\n                    {{ String.fromCharCode(65 + index) }}. {{ option }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.explanation') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.explanation\"\r\n                  rows=\"2\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.explanationPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Listening Exercise Form -->\r\n            <div v-else-if=\"selectedExerciseTypeForQuestions === 'listening'\" class=\"space-y-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.exercises.listening.audioUrl') }}\r\n                </label>\r\n                <div class=\"relative\">\r\n                  <input\r\n                    v-model=\"newQuestion.audioUrl\"\r\n                    type=\"text\"\r\n                    @input=\"handleAudioUrlChange\"\r\n                    @paste=\"handleUrlPaste\"\r\n                    class=\"w-full px-3 py-2 pr-20 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    :placeholder=\"t('grammar.practice.exercises.listening.audioUrlPlaceholder')\"\r\n                  >\r\n                  <!-- Clear button -->\r\n                  <button\r\n                    v-if=\"newQuestion.audioUrl\"\r\n                    @click=\"clearAudioUrl\"\r\n                    type=\"button\"\r\n                    class=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n                  >\r\n                    <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n                <div class=\"mt-2 text-xs text-gray-500 dark:text-gray-400\">\r\n                  {{ t('grammar.practice.exercises.listening.audioUrlHint') }}\r\n                </div>\r\n                <!-- YouTube URL Preview -->\r\n                <div v-if=\"isYouTubeUrl(newQuestion.audioUrl)\" class=\"mt-3 p-3 bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 rounded-lg\">\r\n                  <div class=\"flex items-center space-x-2 text-sm text-blue-800 dark:text-blue-200\">\r\n                    <svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path d=\"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\"/>\r\n                    </svg>\r\n                    <span>{{ t('grammar.practice.exercises.listening.youtubeDetected') }}</span>\r\n                  </div>\r\n                  <div class=\"mt-2 text-xs text-gray-600 dark:text-gray-400\">\r\n                    {{ t('grammar.practice.exercises.listening.youtubeNote') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div>\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    {{ t('grammar.practice.exercises.listening.maxPlays') }}\r\n                  </label>\r\n                  <input\r\n                    v-model.number=\"newQuestion.maxPlays\"\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    max=\"10\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                </div>\r\n                <div>\r\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    {{ t('grammar.practice.settings.difficulty') }}\r\n                  </label>\r\n                  <select\r\n                    v-model=\"newQuestion.difficulty\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"easy\">{{ t('grammar.practice.settings.levels.easy') }}</option>\r\n                    <option value=\"medium\">{{ t('grammar.practice.settings.levels.medium') }}</option>\r\n                    <option value=\"hard\">{{ t('grammar.practice.settings.levels.hard') }}</option>\r\n                  </select>\r\n                </div>\r\n                <div class=\"flex items-center\">\r\n                  <label class=\"flex items-center space-x-2 cursor-pointer\">\r\n                    <input\r\n                      v-model=\"newQuestion.allowNotes\"\r\n                      type=\"checkbox\"\r\n                      class=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                    >\r\n                    <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                      {{ t('grammar.practice.exercises.listening.allowNotes') }}\r\n                    </span>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.exercises.listening.transcript') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.transcript\"\r\n                  rows=\"3\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.exercises.listening.transcriptPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n              \r\n              <!-- Questions about the audio -->\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.exercises.listening.questions') }}\r\n                </label>\r\n                <div class=\"space-y-3\">\r\n                  <div \r\n                    v-for=\"(question, qIndex) in newQuestion.questions\" \r\n                    :key=\"qIndex\"\r\n                    class=\"border border-gray-200 dark:border-gray-600 rounded-lg p-3\"\r\n                  >\r\n                    <div class=\"flex items-center justify-between mb-2\">\r\n                      <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                        {{ t('grammar.practice.exercises.listening.question') }} {{ qIndex + 1 }}\r\n                      </span>\r\n                      <button\r\n                        @click=\"removeListeningQuestion(qIndex)\"\r\n                        class=\"p-1 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/30 rounded\"\r\n                        :disabled=\"newQuestion.questions.length === 1\"\r\n                      >\r\n                        <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                        </svg>\r\n                      </button>\r\n                    </div>\r\n                    \r\n                    <div class=\"space-y-2\">\r\n                      <div>\r\n                        <select\r\n                          v-model=\"question.type\"\r\n                          class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                        >\r\n                          <option value=\"multiple-choice\">{{ t('grammar.practice.exercises.listening.multipleChoice') }}</option>\r\n                          <option value=\"fill-blank\">{{ t('grammar.practice.exercises.listening.fillBlank') }}</option>\r\n                          <option value=\"ordering\">{{ t('grammar.practice.exercises.listening.ordering') }}</option>\r\n                        </select>\r\n                      </div>\r\n                      \r\n                      <div>\r\n                        <textarea\r\n                          v-model=\"question.question\"\r\n                          rows=\"2\"\r\n                          class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                          :placeholder=\"t('grammar.practice.questionManager.questionPlaceholder')\"\r\n                        ></textarea>\r\n                      </div>\r\n                      \r\n                      <!-- Multiple choice options -->\r\n                      <div v-if=\"question.type === 'multiple-choice'\" class=\"space-y-1\">\r\n                        <div v-for=\"(option, oIndex) in question.options\" :key=\"oIndex\" class=\"flex items-center space-x-2\">\r\n                          <span class=\"text-xs font-medium text-gray-500 dark:text-gray-400 w-4\">{{ String.fromCharCode(65 + oIndex) }}.</span>\r\n                          <input\r\n                            v-model=\"question.options[oIndex]\"\r\n                            type=\"text\"\r\n                            class=\"flex-1 px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                            :placeholder=\"t('grammar.practice.questionManager.optionPlaceholder')\"\r\n                          >\r\n                        </div>\r\n                        <div>\r\n                          <select\r\n                            v-model=\"question.correctAnswer\"\r\n                            class=\"w-full px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                          >\r\n                            <option value=\"\">{{ t('grammar.practice.questionManager.selectCorrectAnswer') }}</option>\r\n                            <option v-for=\"(option, oIndex) in question.options\" :key=\"oIndex\" :value=\"oIndex\">\r\n                              {{ String.fromCharCode(65 + oIndex) }}. {{ option }}\r\n                            </option>\r\n                          </select>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <!-- Fill blank answer -->\r\n                      <div v-else-if=\"question.type === 'fill-blank'\">\r\n                        <input\r\n                          v-model=\"question.correctAnswer\"\r\n                          type=\"text\"\r\n                          class=\"w-full px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                          :placeholder=\"t('grammar.practice.exercises.listening.correctAnswerPlaceholder')\"\r\n                        >\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <button\r\n                    @click=\"addListeningQuestion\"\r\n                    class=\"w-full px-3 py-2 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-gray-500 dark:text-gray-400 hover:border-blue-400 hover:text-blue-500 transition-colors text-sm\"\r\n                  >\r\n                    + {{ t('grammar.practice.exercises.listening.addQuestion') }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Generic Form for other exercise types -->\r\n            <div v-else class=\"space-y-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.question') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.question\"\r\n                  rows=\"3\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.questionPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  {{ t('grammar.practice.questionManager.explanation') }}\r\n                </label>\r\n                <textarea\r\n                  v-model=\"newQuestion.explanation\"\r\n                  rows=\"2\"\r\n                  class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  :placeholder=\"t('grammar.practice.questionManager.explanationPlaceholder')\"\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"flex justify-end mt-4\">\r\n              <button\r\n                @click=\"addQuestion\"\r\n                class=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors\"\r\n              >\r\n                {{ editingQuestionIndex >= 0 ? t('common.update') : t('grammar.practice.questionManager.addQuestion') }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Existing Questions List -->\r\n          <div v-if=\"exerciseQuestions[selectedExerciseTypeForQuestions]?.length > 0\">\r\n            <h4 class=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\r\n              {{ t('grammar.practice.questionManager.existingQuestions') }} ({{ exerciseQuestions[selectedExerciseTypeForQuestions].length }})\r\n            </h4>\r\n            <div class=\"space-y-4 max-h-96 overflow-y-auto\">\r\n              <div\r\n                v-for=\"(question, index) in exerciseQuestions[selectedExerciseTypeForQuestions]\"\r\n                :key=\"question.id\"\r\n                class=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4\"\r\n              >\r\n                <div class=\"flex items-start justify-between\">\r\n                  <div class=\"flex-1\">\r\n                    <div class=\"mb-2\">\r\n                      <span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\r\n                        #{{ index + 1 }}\r\n                      </span>\r\n                      <span v-if=\"selectedExerciseTypeForQuestions === 'writing'\" class=\"ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\r\n                        {{ t(`grammar.practice.exercises.writing.${question.taskType}`) }}\r\n                      </span>\r\n                    </div>\r\n                    <div class=\"text-sm text-gray-900 dark:text-white mb-2\">\r\n                      <strong>{{ selectedExerciseTypeForQuestions === 'writing' ? t('grammar.practice.questionManager.prompt') : t('grammar.practice.questionManager.question') }}:</strong>\r\n                      <p class=\"mt-1\">{{ selectedExerciseTypeForQuestions === 'writing' ? question.prompt : question.question }}</p>\r\n                    </div>\r\n                    <div v-if=\"selectedExerciseTypeForQuestions === 'writing' && question.requirements?.length > 0\" class=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                      <strong>{{ t('grammar.practice.questionManager.requirements') }}:</strong>\r\n                      <ul class=\"list-disc list-inside mt-1\">\r\n                        <li v-for=\"req in question.requirements\" :key=\"req\">{{ req }}</li>\r\n                      </ul>\r\n                    </div>\r\n                    <div v-if=\"selectedExerciseTypeForQuestions === 'multiple-choice' && question.options\" class=\"text-xs text-gray-600 dark:text-gray-400 mt-2\">\r\n                      <strong>{{ t('grammar.practice.questionManager.correctAnswer') }}:</strong> {{ question.correctAnswer }}\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"flex items-center space-x-2 ml-4\">\r\n                    <button\r\n                      @click=\"editQuestion(index)\"\r\n                      class=\"p-1 rounded text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors\"\r\n                      :title=\"t('common.edit')\"\r\n                    >\r\n                      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                      </svg>\r\n                    </button>\r\n                    <button\r\n                      @click=\"deleteQuestion(index)\"\r\n                      class=\"p-1 rounded text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/30 transition-colors\"\r\n                      :title=\"t('common.delete')\"\r\n                    >\r\n                      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                      </svg>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- No Questions Message -->\r\n          <div v-else class=\"text-center py-8\">\r\n            <div class=\"text-gray-500 dark:text-gray-400\">\r\n              <svg class=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n              </svg>\r\n              <p>{{ t('grammar.practice.questionManager.noQuestions') }}</p>\r\n              <p class=\"text-sm mt-1\">{{ t('grammar.practice.questionManager.addFirstQuestion') }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"flex justify-end space-x-4 mt-6\">\r\n          <button\r\n            @click=\"closeQuestionManager\"\r\n            class=\"px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-[#0a0a0a] rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\r\n          >\r\n            {{ t('common.close') }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, watch, defineAsyncComponent, h } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport { useVoiceStore } from '../../stores/voiceStore'\r\n\r\nconst { t } = useI18n()\r\n// Helper: i18n with safe fallback and optional params\r\nconst tf = (key: string, fallback: string, params?: Record<string, any>) => {\r\n  const translated = params ? (t as any)(key, params) : (t as any)(key)\r\n  const text = typeof translated === 'string' ? translated : String(translated)\r\n  if (text === key) return fallback\r\n  return text\r\n}\r\nconst route = useRoute()\r\nconst router = useRouter()\r\nconst { playAudio } = useVoiceStore()\r\n\r\n// TypeScript Interfaces\r\ninterface ListeningQuestion {\r\n  question: string\r\n  type: 'multiple-choice' | 'fill-blank' | 'ordering'\r\n  options?: string[]\r\n  correctAnswer: string | number\r\n  explanation?: string\r\n}\r\n\r\ninterface BaseQuestion {\r\n  id: string\r\n  type: string\r\n  question: string\r\n  options: string[]\r\n  correctAnswer: string\r\n  explanation: string\r\n  difficulty: string\r\n}\r\n\r\ninterface ListeningExercise extends BaseQuestion {\r\n  type: 'listening'\r\n  audioUrl: string\r\n  originalUrl: string\r\n  maxPlays: number\r\n  allowNotes: boolean\r\n  transcript: string\r\n  questions: ListeningQuestion[]\r\n  // Include all other properties for compatibility\r\n  taskType: string\r\n  prompt: string\r\n  requirements: string[]\r\n  minWords: number\r\n  timeLimit: number\r\n}\r\n\r\ninterface WritingExercise extends BaseQuestion {\r\n  type: 'writing'\r\n  taskType: string\r\n  prompt: string\r\n  requirements: string[]\r\n  minWords: number\r\n  timeLimit: number\r\n  audioUrl: string\r\n  originalUrl: string\r\n  maxPlays: number\r\n  allowNotes: boolean\r\n  transcript: string\r\n  questions: any[]\r\n}\r\n\r\ninterface OtherExercise extends BaseQuestion {\r\n  taskType: string\r\n  prompt: string\r\n  requirements: string[]\r\n  minWords: number\r\n  timeLimit: number\r\n  audioUrl: string\r\n  originalUrl: string\r\n  maxPlays: number\r\n  allowNotes: boolean\r\n  transcript: string\r\n  questions: any[]\r\n}\r\n\r\ntype QuestionType = ListeningExercise | WritingExercise | OtherExercise\r\n\r\n// Exercise Components (lazy loaded)\r\nconst MultipleChoiceExercise = defineAsyncComponent(() => import('./components/MultipleChoiceExercise.vue'))\r\nconst FillBlankExercise = defineAsyncComponent(() => import('./components/FillBlankExercise.vue'))\r\nconst PronunciationExercise = defineAsyncComponent(() => import('./components/PronunciationExercise.vue'))\r\nconst ReadingExercise = defineAsyncComponent(() => import('./components/ReadingExercise.vue'))\r\nconst ListeningExercise = defineAsyncComponent(() => import('./components/ListeningExercise.vue'))\r\nconst WritingExercise = defineAsyncComponent(() => import('./components/WritingExercise.vue'))\r\nconst ExerciseManager = defineAsyncComponent(() => import('./components/ExerciseManager.vue'))\r\n\r\n// Icons for exercises\r\nconst BookOpenIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.168 18.477 18.582 18 16.5 18c-1.746 0-3.332.477-4.5 1.253' })\r\n])\r\n\r\nconst PencilIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z' })\r\n])\r\n\r\nconst SpeakerWaveIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M19.114 5.636a9 9 0 010 12.728M16.463 8.288a5.25 5.25 0 010 7.424M6.75 8.25l4.72-4.72a.75.75 0 011.28.53v15.88a.75.75 0 01-1.28.53l-4.72-4.72H4.51c-.88 0-1.59-.71-1.59-1.59V9.84c0-.88.71-1.59 1.59-1.59h2.24z' })\r\n])\r\n\r\nconst MicrophoneIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3zM19 10v2a7 7 0 0 1-14 0v-2M12 19v4M8 23h8' })\r\n])\r\n\r\nconst EyeIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M15 12a3 3 0 11-6 0 3 3 0 016 0z' }),\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z' })\r\n])\r\n\r\nconst EditIcon = () => h('svg', { class: 'w-8 h-8 text-white', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' }, [\r\n  h('path', { 'stroke-linecap': 'round', 'stroke-linejoin': 'round', 'stroke-width': '2', d: 'M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z' })\r\n])\r\n\r\n// State\r\nconst grammarId = computed(() => route.params.id as string)\r\nconst selectedExercise = ref<string | null>(null)\r\nconst currentQuestionIndex = ref(0)\r\nconst totalQuestions = ref(10)\r\nconst currentQuestion = ref<any>(null)\r\nconst exerciseResults = ref<{\r\n  correct: number\r\n  incorrect: number\r\n  percentage: number\r\n  answers: any[]\r\n}>({\r\n  correct: 0,\r\n  incorrect: 0,\r\n  percentage: 0,\r\n  answers: []\r\n})\r\nconst showSettings = ref(false)\r\nconst showResults = ref(false)\r\nconst showExerciseManager = ref(false)\r\nconst totalScore = ref(0)\r\n\r\n// Exercise Manager State\r\nconst newExercise = ref({\r\n  type: '',\r\n  title: '',\r\n  description: '',\r\n  difficulty: 'medium',\r\n  duration: ''\r\n})\r\n\r\n// Question Management State\r\nconst exerciseQuestions = ref<Record<string, any[]>>({})\r\nconst showQuestionManager = ref(false)\r\nconst selectedExerciseTypeForQuestions = ref('')\r\nconst newQuestion = ref<QuestionType>({\r\n  id: '',\r\n  type: '',\r\n  question: '',\r\n  options: ['', '', '', ''],\r\n  correctAnswer: '',\r\n  explanation: '',\r\n  difficulty: 'medium',\r\n  // Writing specific fields\r\n  taskType: 'essay',\r\n  prompt: '',\r\n  requirements: [''],\r\n  minWords: 100,\r\n  timeLimit: 20,\r\n  // Listening specific fields\r\n  audioUrl: '',\r\n  originalUrl: '',\r\n  maxPlays: 3,\r\n  allowNotes: false,\r\n  transcript: '',\r\n  questions: []\r\n})\r\nconst editingQuestionIndex = ref(-1)\r\n\r\n// Settings\r\nconst settings = ref({\r\n  difficulty: 'medium',\r\n  autoPlayAudio: true,\r\n  showExplanations: true\r\n})\r\n\r\n// Exercise types with metadata\r\nconst exerciseTypes = ref([\r\n  {\r\n    type: 'multiple-choice',\r\n    title: 'Multiple Choice',\r\n    description: 'Choose the correct answer from multiple options',\r\n    icon: BookOpenIcon,\r\n    colorClass: 'bg-gray-500',\r\n    duration: '10-15 min',\r\n    difficulty: 'Easy'\r\n  },\r\n  {\r\n    type: 'fill-blank',\r\n    title: 'Fill in the Blanks',\r\n    description: 'Complete sentences by filling in missing words',\r\n    icon: PencilIcon,\r\n    colorClass: 'bg-green-500',\r\n    duration: '15-20 min',\r\n    difficulty: 'Medium'\r\n  },\r\n  {\r\n    type: 'pronunciation',\r\n    title: 'Pronunciation Practice',\r\n    description: 'Practice speaking and pronunciation skills',\r\n    icon: MicrophoneIcon,\r\n    colorClass: 'bg-purple-500',\r\n    duration: '10-15 min',\r\n    difficulty: 'Medium'\r\n  },\r\n  {\r\n    type: 'reading',\r\n    title: 'Reading Comprehension',\r\n    description: 'Read passages and answer comprehension questions',\r\n    icon: EyeIcon,\r\n    colorClass: 'bg-orange-500',\r\n    duration: '20-25 min',\r\n    difficulty: 'Hard'\r\n  },\r\n  {\r\n    type: 'listening',\r\n    title: 'Listening Exercise',\r\n    description: 'Listen to audio and answer related questions',\r\n    icon: SpeakerWaveIcon,\r\n    colorClass: 'bg-indigo-500',\r\n    duration: '15-20 min',\r\n    difficulty: 'Medium'\r\n  },\r\n  {\r\n    type: 'writing',\r\n    title: 'Writing Practice',\r\n    description: 'Practice writing skills with various prompts',\r\n    icon: EditIcon,\r\n    colorClass: 'bg-red-500',\r\n    duration: '25-30 min',\r\n    difficulty: 'Hard'\r\n  }\r\n])\r\n\r\n// Computed\r\nconst currentExerciseComponent = computed(() => {\r\n  const componentMap: Record<string, any> = {\r\n    'multiple-choice': MultipleChoiceExercise,\r\n    'fill-blank': FillBlankExercise,\r\n    'pronunciation': PronunciationExercise,\r\n    'reading': ReadingExercise,\r\n    'listening': ListeningExercise,\r\n    'writing': WritingExercise\r\n  }\r\n  return selectedExercise.value ? componentMap[selectedExercise.value] || null : null\r\n})\r\n\r\n// Methods\r\nconst startExercise = (exerciseType: string) => {\r\n  selectedExercise.value = exerciseType\r\n  currentQuestionIndex.value = 0\r\n  exerciseResults.value = {\r\n    correct: 0,\r\n    incorrect: 0,\r\n    percentage: 0,\r\n    answers: []\r\n  }\r\n  generateQuestions()\r\n  \r\n  // Update URL to include selected exercise\r\n  const newQuery = { ...route.query, exercise: exerciseType }\r\n  router.replace({ query: newQuery })\r\n}\r\n\r\nconst generateQuestions = () => {\r\n  // Get questions from localStorage or use default data\r\n  if (!selectedExercise.value) return\r\n  const savedQuestions = exerciseQuestions.value[selectedExercise.value] || []\r\n  \r\n  if (savedQuestions.length > 0) {\r\n    // Use saved questions\r\n    const questionIndex = currentQuestionIndex.value % savedQuestions.length\r\n    currentQuestion.value = savedQuestions[questionIndex]\r\n  } else {\r\n    // Use default mock data if no saved questions\r\n    generateDefaultQuestions()\r\n  }\r\n}\r\n\r\nconst generateDefaultQuestions = () => {\r\n  if (selectedExercise.value === 'writing') {\r\n    // Default writing exercise data\r\n    const writingTasks = [\r\n      {\r\n        id: 1,\r\n        type: 'writing',\r\n        taskType: 'essay',\r\n        prompt: 'Write an essay about the importance of learning English in today\\'s globalized world. Discuss how English proficiency can benefit individuals in their personal and professional lives.',\r\n        requirements: [\r\n          'Write at least 250 words',\r\n          'Include an introduction, body paragraphs, and conclusion',\r\n          'Use specific examples to support your points',\r\n          'Demonstrate proper grammar and vocabulary usage'\r\n        ],\r\n        minWords: 250,\r\n        timeLimit: 30\r\n      },\r\n      {\r\n        id: 2,\r\n        type: 'writing',\r\n        taskType: 'email',\r\n        prompt: 'Write a formal email to your manager requesting time off for a family vacation. Include the dates, reason, and any work arrangements you have made.',\r\n        requirements: [\r\n          'Use formal email format',\r\n          'Include appropriate subject line',\r\n          'Be polite and professional',\r\n          'Provide all necessary details'\r\n        ],\r\n        minWords: 150,\r\n        timeLimit: 20\r\n      },\r\n      {\r\n        id: 3,\r\n        type: 'writing',\r\n        taskType: 'letter',\r\n        prompt: 'Write a letter to a friend describing your recent trip to a new city. Share your experiences, what you liked most, and recommend places to visit.',\r\n        requirements: [\r\n          'Use informal, friendly tone',\r\n          'Include specific details about places visited',\r\n          'Share personal experiences and feelings',\r\n          'Make recommendations'\r\n        ],\r\n        minWords: 200,\r\n        timeLimit: 25\r\n      }\r\n    ]\r\n    \r\n    const taskIndex = currentQuestionIndex.value % writingTasks.length\r\n    currentQuestion.value = writingTasks[taskIndex]\r\n    \r\n  } else if (selectedExercise.value === 'multiple-choice') {\r\n    // Default multiple choice data\r\n    const mcQuestions = [\r\n      {\r\n        id: 1,\r\n        type: 'multiple-choice',\r\n        question: 'Choose the correct form of the verb: \"She _____ to the store yesterday.\"',\r\n        options: ['go', 'goes', 'went', 'going'],\r\n        correctAnswer: 'went',\r\n        explanation: 'Past tense is used for actions completed in the past.'\r\n      },\r\n      {\r\n        id: 2,\r\n        type: 'multiple-choice',\r\n        question: 'Which sentence is grammatically correct?',\r\n        options: [\r\n          'I have been living here since 5 years.',\r\n          'I have been living here for 5 years.',\r\n          'I am living here since 5 years.',\r\n          'I live here since 5 years.'\r\n        ],\r\n        correctAnswer: 'I have been living here for 5 years.',\r\n        explanation: 'Use \"for\" with duration and present perfect continuous for ongoing actions.'\r\n      }\r\n    ]\r\n    \r\n    const questionIndex = currentQuestionIndex.value % mcQuestions.length\r\n    currentQuestion.value = mcQuestions[questionIndex]\r\n    \r\n  } else if (selectedExercise.value === 'fill-blank') {\r\n    // Default fill in the blank data\r\n    const fillBlankQuestions = [\r\n      {\r\n        id: 1,\r\n        type: 'fill-blank',\r\n        question: 'Complete the sentence: \"I _____ been studying English _____ three years.\"',\r\n        blanks: ['have', 'for'],\r\n        sentence: 'I _____ been studying English _____ three years.',\r\n        explanation: 'Present perfect continuous with \"have\" and duration with \"for\".'\r\n      }\r\n    ]\r\n    \r\n    const questionIndex = currentQuestionIndex.value % fillBlankQuestions.length\r\n    currentQuestion.value = fillBlankQuestions[questionIndex]\r\n    \r\n  } else {\r\n    // Default generic question for other exercise types\r\n    currentQuestion.value = {\r\n      id: 1,\r\n      type: selectedExercise.value,\r\n      question: `Sample ${selectedExercise.value} question`,\r\n      options: ['Option A', 'Option B', 'Option C', 'Option D'],\r\n      correctAnswer: 'Option A',\r\n      explanation: 'This is the correct answer because...'\r\n    }\r\n  }\r\n}\r\n\r\nconst handleAnswer = (answer: any) => {\r\n  // Process the answer and update results\r\n  const isCorrect = answer.isCorrect\r\n  if (isCorrect) {\r\n    exerciseResults.value.correct++\r\n  } else {\r\n    exerciseResults.value.incorrect++\r\n  }\r\n  \r\n  exerciseResults.value.answers.push({\r\n    questionIndex: currentQuestionIndex.value,\r\n    userAnswer: answer.userAnswer,\r\n    correctAnswer: answer.correctAnswer,\r\n    isCorrect\r\n  })\r\n}\r\n\r\nconst nextQuestion = () => {\r\n  if (currentQuestionIndex.value < totalQuestions.value - 1) {\r\n    currentQuestionIndex.value++\r\n    generateQuestions()\r\n  } else {\r\n    completeExercise()\r\n  }\r\n}\r\n\r\nconst completeExercise = () => {\r\n  const total = exerciseResults.value.correct + exerciseResults.value.incorrect\r\n  exerciseResults.value.percentage = total > 0 ? Math.round((exerciseResults.value.correct / total) * 100) : 0\r\n  totalScore.value += exerciseResults.value.correct * 10\r\n  showResults.value = true\r\n}\r\n\r\nconst restartExercise = () => {\r\n  showResults.value = false\r\n  currentQuestionIndex.value = 0\r\n  exerciseResults.value = {\r\n    correct: 0,\r\n    incorrect: 0,\r\n    percentage: 0,\r\n    answers: []\r\n  }\r\n  generateQuestions()\r\n}\r\n\r\nconst goBackToSelection = () => {\r\n  selectedExercise.value = null\r\n  showResults.value = false\r\n  currentQuestionIndex.value = 0\r\n  \r\n  // Clear exercise query parameter\r\n  const newQuery = { ...route.query }\r\n  delete newQuery.exercise\r\n  router.replace({ query: newQuery })\r\n}\r\n\r\nconst saveSettings = () => {\r\n  // Save settings to localStorage\r\n  localStorage.setItem('grammarPracticeSettings', JSON.stringify(settings.value))\r\n  showSettings.value = false\r\n}\r\n\r\nconst goBackToGrammarDetail = () => {\r\n  // Navigate back to grammar detail page using the ID from route params\r\n  const grammarId = route.params.id\r\n  if (grammarId) {\r\n    router.push(`/grammar/${grammarId}`)\r\n  } else {\r\n    // Fallback to grammar list if no ID\r\n    router.push('/grammar')\r\n  }\r\n}\r\n\r\n// Exercise Manager Functions\r\nconst addExerciseType = () => {\r\n  if (!newExercise.value.type || !newExercise.value.title) {\r\n    return\r\n  }\r\n  \r\n  const exerciseToAdd = {\r\n    type: newExercise.value.type,\r\n    title: newExercise.value.title,\r\n    description: newExercise.value.description,\r\n    difficulty: newExercise.value.difficulty,\r\n    duration: newExercise.value.duration,\r\n    icon: BookOpenIcon,\r\n    colorClass: 'bg-blue-500'\r\n  }\r\n  \r\n  exerciseTypes.value.push(exerciseToAdd)\r\n  \r\n  // Reset form\r\n  newExercise.value = {\r\n    type: '',\r\n    title: '',\r\n    description: '',\r\n    difficulty: 'medium',\r\n    duration: ''\r\n  }\r\n}\r\n\r\nconst editExerciseType = (index: number) => {\r\n  const exercise = exerciseTypes.value[index]\r\n  newExercise.value = {\r\n    type: exercise.type,\r\n    title: exercise.title,\r\n    description: exercise.description,\r\n    difficulty: exercise.difficulty,\r\n    duration: exercise.duration\r\n  }\r\n  \r\n  // Remove the exercise from list (will be re-added when saved)\r\n  exerciseTypes.value.splice(index, 1)\r\n}\r\n\r\nconst deleteExerciseType = (index: number) => {\r\n  if (confirm(t('common.confirmDelete', 'Are you sure you want to delete this?'))) {\r\n    exerciseTypes.value.splice(index, 1)\r\n  }\r\n}\r\n\r\nconst saveExerciseTypes = () => {\r\n  // Here you could save to localStorage or API\r\n  localStorage.setItem('grammarExerciseTypes', JSON.stringify(exerciseTypes.value))\r\n  showExerciseManager.value = false\r\n}\r\n\r\n// Question Management Functions\r\nconst openQuestionManager = (exerciseType: string) => {\r\n  selectedExerciseTypeForQuestions.value = exerciseType\r\n  showQuestionManager.value = true\r\n  resetNewQuestionForm()\r\n}\r\n\r\nconst closeQuestionManager = () => {\r\n  showQuestionManager.value = false\r\n  selectedExerciseTypeForQuestions.value = ''\r\n  resetNewQuestionForm()\r\n  editingQuestionIndex.value = -1\r\n}\r\n\r\nconst resetNewQuestionForm = () => {\r\n  if (selectedExerciseTypeForQuestions.value === 'listening') {\r\n    newQuestion.value = {\r\n      id: '',\r\n      type: 'listening',\r\n      audioUrl: '',\r\n      maxPlays: 3,\r\n      allowNotes: true,\r\n      difficulty: 'medium',\r\n      transcript: '',\r\n      questions: [{\r\n        question: '',\r\n        type: 'multiple-choice',\r\n        options: ['', '', '', ''],\r\n        correctAnswer: ''\r\n      }]\r\n    } as any\r\n  } else if (selectedExerciseTypeForQuestions.value === 'writing') {\r\n    newQuestion.value = {\r\n      id: '',\r\n      type: 'writing',\r\n      question: '',\r\n      options: ['', '', '', ''],\r\n      correctAnswer: '',\r\n      explanation: '',\r\n      difficulty: 'medium',\r\n      // Writing specific fields\r\n      taskType: 'essay',\r\n      prompt: '',\r\n      requirements: [''],\r\n      minWords: 100,\r\n      timeLimit: 20,\r\n      // Listening specific fields (default values)\r\n      audioUrl: '',\r\n      originalUrl: '',\r\n      maxPlays: 3,\r\n      allowNotes: false,\r\n      transcript: '',\r\n      questions: []\r\n    }\r\n  } else {\r\n    newQuestion.value = {\r\n      id: '',\r\n      type: selectedExerciseTypeForQuestions.value || '',\r\n      question: '',\r\n      options: ['', '', '', ''],\r\n      correctAnswer: '',\r\n      explanation: '',\r\n      difficulty: 'medium',\r\n      // Add missing properties to satisfy TypeScript\r\n      taskType: 'essay',\r\n      prompt: '',\r\n      requirements: [''],\r\n      minWords: 100,\r\n      timeLimit: 20,\r\n      // Listening specific fields (default values)\r\n      audioUrl: '',\r\n      originalUrl: '',\r\n      maxPlays: 3,\r\n      allowNotes: false,\r\n      transcript: '',\r\n      questions: []\r\n    }\r\n  }\r\n}\r\n\r\nconst addQuestion = () => {\r\n  const exerciseType = selectedExerciseTypeForQuestions.value\r\n  if (!exerciseType) return\r\n  \r\n  // Generate unique ID\r\n  const id = Date.now().toString()\r\n  \r\n  const questionToAdd = {\r\n    ...newQuestion.value,\r\n    id,\r\n    type: exerciseType\r\n  }\r\n  \r\n  // Clean up empty requirements for writing exercises\r\n  if (exerciseType === 'writing') {\r\n    questionToAdd.requirements = questionToAdd.requirements.filter(req => req.trim() !== '')\r\n  }\r\n  \r\n  // Initialize exercise questions array if it doesn't exist\r\n  if (!exerciseQuestions.value[exerciseType]) {\r\n    exerciseQuestions.value[exerciseType] = []\r\n  }\r\n  \r\n  if (editingQuestionIndex.value >= 0) {\r\n    // Update existing question\r\n    exerciseQuestions.value[exerciseType][editingQuestionIndex.value] = questionToAdd\r\n    editingQuestionIndex.value = -1\r\n  } else {\r\n    // Add new question\r\n    exerciseQuestions.value[exerciseType].push(questionToAdd)\r\n  }\r\n  \r\n  // Save to localStorage\r\n  saveQuestionsToStorage()\r\n  \r\n  // Reset form\r\n  resetNewQuestionForm()\r\n}\r\n\r\nconst editQuestion = (index: number) => {\r\n  const exerciseType = selectedExerciseTypeForQuestions.value\r\n  const question = exerciseQuestions.value[exerciseType][index]\r\n  \r\n  newQuestion.value = { ...question }\r\n  editingQuestionIndex.value = index\r\n}\r\n\r\nconst deleteQuestion = (index: number) => {\r\n  if (confirm(t('common.confirmDelete', 'Are you sure you want to delete this?'))) {\r\n    const exerciseType = selectedExerciseTypeForQuestions.value\r\n    exerciseQuestions.value[exerciseType].splice(index, 1)\r\n    saveQuestionsToStorage()\r\n  }\r\n}\r\n\r\nconst addRequirement = () => {\r\n  newQuestion.value.requirements.push('')\r\n}\r\n\r\nconst removeRequirement = (index: number) => {\r\n  if (newQuestion.value.requirements.length > 1) {\r\n    newQuestion.value.requirements.splice(index, 1)\r\n  }\r\n}\r\n\r\n// Listening question management\r\nconst addListeningQuestion = () => {\r\n  const listeningQuestion = newQuestion.value as any\r\n  if (listeningQuestion.questions) {\r\n    listeningQuestion.questions.push({\r\n      question: '',\r\n      type: 'multiple-choice',\r\n      options: ['', '', '', ''],\r\n      correctAnswer: ''\r\n    })\r\n  }\r\n}\r\n\r\nconst removeListeningQuestion = (index: number) => {\r\n  const listeningQuestion = newQuestion.value as any\r\n  if (listeningQuestion.questions && listeningQuestion.questions.length > 1) {\r\n    listeningQuestion.questions.splice(index, 1)\r\n  }\r\n}\r\n\r\n// YouTube URL handling functions\r\nconst isYouTubeUrl = (url: string): boolean => {\r\n  if (!url) return false\r\n  const youtubeRegex = /^(https?\\:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\/.+/\r\n  return youtubeRegex.test(url)\r\n}\r\n\r\nconst extractYouTubeVideoId = (url: string): string | null => {\r\n  const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/\r\n  const match = url.match(regex)\r\n  return match ? match[1] : null\r\n}\r\n\r\nconst convertYouTubeToAudioUrl = (url: string): string => {\r\n  // For now, we'll store the YouTube URL and handle audio extraction in the ListeningExercise component\r\n  // This allows the Question Manager to accept YouTube URLs while keeping ListeningExercise audio-only\r\n  const videoId = extractYouTubeVideoId(url)\r\n  if (videoId) {\r\n    // Return a special format that the ListeningExercise can recognize and handle\r\n    return `youtube:${videoId}`\r\n  }\r\n  return url\r\n}\r\n\r\nconst handleAudioUrlChange = () => {\r\n  // Auto-convert YouTube URLs to audio format when user inputs them\r\n  if (isYouTubeUrl(newQuestion.value.audioUrl)) {\r\n    const convertedUrl = convertYouTubeToAudioUrl(newQuestion.value.audioUrl)\r\n    newQuestion.value.originalUrl = newQuestion.value.audioUrl\r\n    newQuestion.value.audioUrl = convertedUrl\r\n  }\r\n}\r\n\r\nconst handleUrlPaste = (event: ClipboardEvent) => {\r\n  const pastedText = event.clipboardData?.getData('text') || ''\r\n  if (pastedText) {\r\n    // Clean up common URL issues from share dialogs\r\n    let cleanUrl = pastedText.trim()\r\n    \r\n    // Remove query parameters that might interfere (like si= from YouTube)\r\n    if (cleanUrl.includes('youtube.com') || cleanUrl.includes('youtu.be')) {\r\n      // For YouTube URLs, keep only essential parameters\r\n      const url = new URL(cleanUrl)\r\n      if (url.hostname.includes('youtube.com')) {\r\n        const videoId = url.searchParams.get('v')\r\n        if (videoId) {\r\n          cleanUrl = `https://www.youtube.com/watch?v=${videoId}`\r\n        }\r\n      } else if (url.hostname.includes('youtu.be')) {\r\n        const videoId = url.pathname.slice(1)\r\n        if (videoId) {\r\n          cleanUrl = `https://youtu.be/${videoId}`\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Update the input value\r\n    newQuestion.value.audioUrl = cleanUrl\r\n    \r\n    // Prevent default paste behavior\r\n    event.preventDefault()\r\n    \r\n    // Trigger the change handler\r\n    handleAudioUrlChange()\r\n  }\r\n}\r\n\r\nconst clearAudioUrl = () => {\r\n  newQuestion.value.audioUrl = ''\r\n  newQuestion.value.originalUrl = ''\r\n}\r\n\r\nconst saveQuestionsToStorage = () => {\r\n  localStorage.setItem('grammarExerciseQuestions', JSON.stringify(exerciseQuestions.value))\r\n}\r\n\r\nconst loadQuestionsFromStorage = () => {\r\n  const saved = localStorage.getItem('grammarExerciseQuestions')\r\n  if (saved) {\r\n    exerciseQuestions.value = JSON.parse(saved)\r\n  }\r\n}\r\n\r\n// Initialize from URL\r\nconst initializeFromUrl = () => {\r\n  const exerciseFromUrl = route.query.exercise as string\r\n  if (exerciseFromUrl && exerciseTypes.value.some(ex => ex.type === exerciseFromUrl)) {\r\n    selectedExercise.value = exerciseFromUrl\r\n    generateQuestions()\r\n  } else {\r\n    selectedExercise.value = null\r\n  }\r\n}\r\n\r\n// Watch for route changes\r\nwatch(() => route.query.exercise, (newExercise) => {\r\n  if (newExercise && exerciseTypes.value.some(ex => ex.type === newExercise)) {\r\n    if (selectedExercise.value !== newExercise) {\r\n      selectedExercise.value = newExercise as string\r\n      currentQuestionIndex.value = 0\r\n      exerciseResults.value = {\r\n        correct: 0,\r\n        incorrect: 0,\r\n        percentage: 0,\r\n        answers: []\r\n      }\r\n      generateQuestions()\r\n    }\r\n  } else {\r\n    selectedExercise.value = null\r\n  }\r\n})\r\n\r\n// Watch for modal states to control body scroll\r\nwatch([showQuestionManager, showSettings, showResults, showExerciseManager], ([questionManager, settings, results, exerciseManager]) => {\r\n  const anyModalOpen = questionManager || settings || results || exerciseManager\r\n  if (anyModalOpen) {\r\n    document.body.style.overflow = 'hidden'\r\n  } else {\r\n    document.body.style.overflow = ''\r\n  }\r\n})\r\n\r\n// Lifecycle\r\nonMounted(() => {\r\n  // Load settings from localStorage\r\n  const savedSettings = localStorage.getItem('grammarPracticeSettings')\r\n  if (savedSettings) {\r\n    settings.value = { ...settings.value, ...JSON.parse(savedSettings) }\r\n  }\r\n  \r\n  // Load saved score\r\n  const savedScore = localStorage.getItem('grammarPracticeScore')\r\n  if (savedScore) {\r\n    totalScore.value = parseInt(savedScore)\r\n  }\r\n  \r\n  // Load questions from localStorage\r\n  loadQuestionsFromStorage()\r\n  \r\n  // Initialize from URL parameters\r\n  initializeFromUrl()\r\n})\r\n</script>\r\n","import { defineAsyncComponent } from 'vue'\n\n// Shared components (from src/components)\nexport const LazyLoadComponent = defineAsyncComponent(() => import('../../../components/LazyLoadComponent.vue'))\nexport const VoiceSelector = defineAsyncComponent(() => import('../../../components/VoiceSelector.vue'))\n\n// Practice components (from ../components)\nexport const FlashcardHeader = defineAsyncComponent(() => import('../components/FlashcardHeader.vue'))\nexport const FlashcardProgress = defineAsyncComponent(() => import('../components/FlashcardProgress.vue'))\nexport const FlashcardDateFilter = defineAsyncComponent(() => import('../components/FlashcardDateFilter.vue'))\nexport const FlashcardCard = defineAsyncComponent(() => import('../components/FlashcardCard.vue'))\nexport const FlashcardQuiz = defineAsyncComponent(() => import('../components/FlashcardQuiz.vue'))\nexport const FlashcardTyping = defineAsyncComponent(() => import('../components/FlashcardTyping.vue'))\nexport const FlashcardImage = defineAsyncComponent(() => import('../components/FlashcardImage.vue'))\nexport const FlashcardControls = defineAsyncComponent(() => import('../components/FlashcardControls.vue'))\nexport const PracticeTimer = defineAsyncComponent(() => import('../components/PracticeTimer.vue'))\n\n// Modals and additional features\nexport const ExitWarningModal = defineAsyncComponent(() => import('../components/ExitWarningModal.vue'))\nexport const CompletionModal = defineAsyncComponent(() => import('../components/CompletionModal.vue'))\nexport const HistoryModal = defineAsyncComponent(() => import('../components/HistoryModal.vue'))\nexport const SessionDetailModal = defineAsyncComponent(() => import('../components/SessionDetailModal.vue'))\nexport const SettingsModal = defineAsyncComponent(() => import('../components/SettingsModal.vue'))\nexport const PronunciationMode = defineAsyncComponent(() => import('../components/PronunciationMode.vue'))\nexport const ListeningMode = defineAsyncComponent(() => import('../components/ListeningMode.vue'))\nexport const PracticeStats = defineAsyncComponent(() => import('../components/PracticeStats.vue'))\nexport const FlashcardEmptyState = defineAsyncComponent(() => import('../components/FlashcardEmptyState.vue'))\nexport const PictionaryMode = defineAsyncComponent(() => import('../components/PictionaryMode.vue'))\nexport const BubbleShooterMode = defineAsyncComponent(() => import('../components/BubbleShooterMode.vue'))\nexport const SnakeGameMode = defineAsyncComponent(() => import('../components/SnakeGameMode.vue'))\n\n// Default aggregate export for one-line import convenience\nexport default {\n  LazyLoadComponent,\n  VoiceSelector,\n  FlashcardHeader,\n  FlashcardProgress,\n  FlashcardDateFilter,\n  FlashcardCard,\n  FlashcardQuiz,\n  FlashcardTyping,\n  FlashcardImage,\n  FlashcardControls,\n  PracticeTimer,\n  ExitWarningModal,\n  CompletionModal,\n  HistoryModal,\n  SessionDetailModal,\n  SettingsModal,\n  PronunciationMode,\n  ListeningMode,\n  PracticeStats,\n  FlashcardEmptyState,\n  PictionaryMode,\n  BubbleShooterMode,\n  SnakeGameMode,\n}\n","import { ref, computed, onUnmounted, watch } from 'vue'\r\nimport type { Ref } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport type { Vocabulary } from '../../../composables/useVocabularyStore'\r\nimport type { GameSettings, PracticeMode } from '../types'\r\nimport type { GameStats } from './useFlashcardStats'\r\n\r\nexport function useFlashcardGame(flashcards: Ref<Vocabulary[]>) {\r\n  const router = useRouter()\r\n\r\n  // Practice mode localStorage key\r\n  const PRACTICE_MODE_STORAGE_KEY = 'flashcard-practice-mode'\r\n\r\n  // Load practice mode from localStorage\r\n  const loadPracticeModeFromStorage = (): string => {\r\n    try {\r\n      const saved = localStorage.getItem(PRACTICE_MODE_STORAGE_KEY)\r\n      if (saved && ['flashcard', 'quiz', 'typing', 'image', 'listening', 'pronunciation', 'pictionary', 'bubble-shooter', 'snake-game'].includes(saved)) {\r\n        return saved\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading practice mode from localStorage:', error)\r\n    }\r\n    return 'flashcard' // fallback to default\r\n  }\r\n\r\n  // Save practice mode to localStorage\r\n  const savePracticeModeToStorage = (mode: string) => {\r\n    try {\r\n      localStorage.setItem(PRACTICE_MODE_STORAGE_KEY, mode)\r\n    } catch (error) {\r\n      console.error('Error saving practice mode to localStorage:', error)\r\n    }\r\n  }\r\n\r\n  // Game state\r\n  const currentIndex = ref(0)\r\n  const isFlipped = ref(false)\r\n  const practiceMode = ref<PracticeMode>(loadPracticeModeFromStorage() as PracticeMode)\r\n  const showSettings = ref(false)\r\n  const showCompletionModal = ref(false)\r\n  const isCompleted = ref(false)\r\n\r\n  // Game settings\r\n  const settings = ref<GameSettings>({\r\n    cardCount: 20,\r\n    difficulty: 'all',\r\n    autoFlip: false,\r\n    flipDelay: 3,\r\n    showDefinition: true,\r\n    showExample: true,\r\n    showPronunciation: true,\r\n    shuffleCards: false,\r\n    voiceType: 'female',\r\n    practiceMode: loadPracticeModeFromStorage() as PracticeMode,\r\n  })\r\n\r\n  // Game stats\r\n  const stats = ref<GameStats>({\r\n    easy: 0,\r\n    difficult: 0,\r\n    reviewed: 0,\r\n    correct: 0,\r\n    incorrect: 0,\r\n    total: 0,\r\n    startTime: new Date(),\r\n    endTime: null,\r\n    mode: 'flashcard'\r\n  })\r\n\r\n  // Ensure stats.mode always reflects the current practice mode\r\n  // Initial sync (in case a saved mode is loaded from storage)\r\n  stats.value.mode = practiceMode.value\r\n\r\n  // Keep stats.mode in sync when practice mode changes\r\n  watch(practiceMode, (mode) => {\r\n    stats.value.mode = mode\r\n  })\r\n\r\n  // Current card\r\n  const currentCard = computed(() => {\r\n    if (flashcards.value.length === 0) return null\r\n    return flashcards.value[currentIndex.value]\r\n  })\r\n\r\n  // Game controls\r\n  const nextCard = () => {\r\n    if (currentIndex.value < flashcards.value.length - 1) {\r\n      currentIndex.value++\r\n      resetCurrentCard()\r\n    } else {\r\n      completeSession()\r\n    }\r\n  }\r\n\r\n  const previousCard = () => {\r\n    if (currentIndex.value > 0) {\r\n      currentIndex.value--\r\n      resetCurrentCard()\r\n    }\r\n  }\r\n\r\n  const flipCard = () => {\r\n    isFlipped.value = !isFlipped.value\r\n  }\r\n\r\n  const resetCurrentCard = () => {\r\n    isFlipped.value = false\r\n    // Reset mode-specific states will be handled by mode composables\r\n  }\r\n\r\n  const completeSession = () => {\r\n    isCompleted.value = true\r\n    stats.value.endTime = new Date()\r\n    showCompletionModal.value = true\r\n  }\r\n\r\n  const restartSession = () => {\r\n    currentIndex.value = 0\r\n    isCompleted.value = false\r\n    showCompletionModal.value = false\r\n    stats.value = {\r\n      easy: 0,\r\n      difficult: 0,\r\n      reviewed: 0,\r\n      correct: 0,\r\n      incorrect: 0,\r\n      total: 0,\r\n      startTime: new Date(),\r\n      endTime: null,\r\n      mode: practiceMode.value\r\n    }\r\n    resetCurrentCard()\r\n  }\r\n\r\n  const changePracticeMode = (mode: PracticeMode) => {\r\n    practiceMode.value = mode\r\n    settings.value.practiceMode = mode;\r\n    savePracticeModeToStorage(mode) // Save to localStorage\r\n    resetCurrentCard()\r\n  }\r\n\r\n  const applySettings = () => {\r\n    showSettings.value = false\r\n    // Apply settings logic here\r\n  }\r\n\r\n  const goBack = () => {\r\n    router.push('/')\r\n  }\r\n\r\n  const goToVocabulary = () => {\r\n    router.push('/practice/flashcard')\r\n  }\r\n\r\n  const markEasy = () => {\r\n    // Mark current card as easy - recordAnswer will be called externally\r\n    nextCard()\r\n  }\r\n\r\n  const markDifficult = () => {\r\n    // Mark current card as difficult - recordAnswer will be called externally\r\n    nextCard()\r\n  }\r\n\r\n  // Auto flip functionality\r\n  let autoFlipTimer: number | null = null\r\n\r\n  watch([currentIndex, isFlipped], () => {\r\n    if (autoFlipTimer) {\r\n      clearTimeout(autoFlipTimer)\r\n    }\r\n    \r\n    if (settings.value.autoFlip && !isFlipped.value) {\r\n      autoFlipTimer = window.setTimeout(() => {\r\n        if (!isFlipped.value) {\r\n          flipCard()\r\n        }\r\n      }, settings.value.flipDelay * 1000)\r\n    }\r\n  })\r\n\r\n  // Cleanup\r\n  const cleanup = () => {\r\n    if (autoFlipTimer) {\r\n      clearTimeout(autoFlipTimer)\r\n    }\r\n  }\r\n\r\n  return {\r\n    // State\r\n    currentIndex,\r\n    isFlipped,\r\n    practiceMode,\r\n    showSettings,\r\n    showCompletionModal,\r\n    isCompleted,\r\n    settings,\r\n    stats,\r\n    \r\n    // Computed\r\n    flashcards,\r\n    currentCard,\r\n    \r\n    // Methods\r\n    nextCard,\r\n    previousCard,\r\n    flipCard,\r\n    resetCurrentCard,\r\n    completeSession,\r\n    restartSession,\r\n    changePracticeMode,\r\n    applySettings,\r\n    goBack,\r\n    goToVocabulary,\r\n    markEasy,\r\n    markDifficult,\r\n    cleanup\r\n  }\r\n}\r\n","import { ref, computed, watch } from 'vue'\r\nimport type { Ref } from 'vue'\r\nimport { useVoiceStore } from '../../../stores/voiceStore'\r\n\r\nexport interface VocabularyItem {\r\n  id: number\r\n  word: string\r\n  meaning: string\r\n  pronunciation?: string\r\n  example?: string\r\n  category: string\r\n  level: string\r\n  partOfSpeech?: string\r\n  synonyms?: string[]\r\n  antonyms?: string[]\r\n  notes?: string\r\n  favorite?: boolean\r\n  createdAt?: string\r\n  updatedAt?: string\r\n}\r\n\r\nexport function useFlashcardModes(\r\n  currentCard: Ref<VocabularyItem | null>, \r\n  flashcards: Ref<VocabularyItem[]>, \r\n  allVocabularies: Ref<VocabularyItem[]>,\r\n  onCorrectAnswer?: () => void,\r\n  onIncorrectAnswer?: () => void\r\n) {\r\n  // Voice settings\r\n  const { playAudio: playVoiceAudio } = useVoiceStore()\r\n  \r\n  // Quiz mode states\r\n  const quizOptions = ref<string[]>([])\r\n  const selectedAnswer = ref('')\r\n  const quizAnswered = ref(false)\r\n\r\n  // Typing mode states\r\n  const typingAnswer = ref('')\r\n  const typingAnswered = ref(false)\r\n  const typingCorrect = ref(false)\r\n  // Typing-Quiz (multiple choice within Typing mode)\r\n  const typingQuizEnabled = ref(false)\r\n  const typingQuizOptions = ref<string[]>([])\r\n  const typingQuizSelected = ref('')\r\n  const typingQuizAnswered = ref(false)\r\n\r\n  // Listening mode states\r\n  const listeningAnswer = ref('')\r\n  const listeningAnswered = ref(false)\r\n  const listeningCorrect = ref(false)\r\n  // Listening-Quiz (multiple choice within Listening mode)\r\n  const listeningQuizEnabled = ref(false)\r\n  const listeningQuizOptions = ref<string[]>([])\r\n  const listeningQuizSelected = ref('')\r\n  const listeningQuizAnswered = ref(false)\r\n\r\n  // Image mode states\r\n  const imageAnswer = ref('')\r\n  const imageAnswered = ref(false)\r\n  const imageCorrect = ref(false)\r\n\r\n  // Image-Quiz (multiple choice within Image mode)\r\n  const imageQuizEnabled = ref(false)\r\n  const imageQuizOptions = ref<string[]>([])\r\n  const imageQuizSelected = ref('')\r\n  const imageQuizAnswered = ref(false)\r\n\r\n  // Pictionary mode states\r\n  const pictionaryAnswer = ref('')\r\n  const pictionaryAnswered = ref(false)\r\n  const pictionaryCorrect = ref(false)\r\n\r\n  // Bubble Shooter mode states\r\n  const bubbleShooterVietnameseMode = ref(false)\r\n\r\n  // Persist toggle states in localStorage\r\n  const STORAGE_KEYS = {\r\n    image: 'pe_imageQuizEnabled',\r\n    listening: 'pe_listeningQuizEnabled',\r\n    typing: 'pe_typingQuizEnabled',\r\n    bubbleShooterVietnamese: 'pe_bubbleShooterVietnameseMode',\r\n    imagePos: 'pe_imageQuiz_correct_pos',\r\n    listeningPos: 'pe_listeningQuiz_correct_pos',\r\n    typingPos: 'pe_typingQuiz_correct_pos',\r\n  } as const\r\n\r\n  const readBool = (key: string, def = false) => {\r\n    try {\r\n      const v = localStorage.getItem(key)\r\n      return v === null ? def : v === 'true'\r\n    } catch {\r\n      return def\r\n    }\r\n  }\r\n\r\n  // Initialize from localStorage\r\n  imageQuizEnabled.value = readBool(STORAGE_KEYS.image, false)\r\n  listeningQuizEnabled.value = readBool(STORAGE_KEYS.listening, false)\r\n  typingQuizEnabled.value = readBool(STORAGE_KEYS.typing, false)\r\n  bubbleShooterVietnameseMode.value = readBool(STORAGE_KEYS.bubbleShooterVietnamese, false)\r\n\r\n  const writeBool = (key: string, val: boolean) => {\r\n    try {\r\n      localStorage.setItem(key, String(val))\r\n    } catch {}\r\n  }\r\n\r\n  const readNumber = (key: string, def = 0) => {\r\n    try {\r\n      const v = localStorage.getItem(key)\r\n      const n = v === null ? def : Number(v)\r\n      return Number.isFinite(n) && n >= 0 ? n : def\r\n    } catch {\r\n      return def\r\n    }\r\n  }\r\n\r\n  const writeNumber = (key: string, val: number) => {\r\n    try {\r\n      localStorage.setItem(key, String(val))\r\n    } catch {}\r\n  }\r\n\r\n  watch(imageQuizEnabled, (v) => writeBool(STORAGE_KEYS.image, v))\r\n  watch(listeningQuizEnabled, (v) => writeBool(STORAGE_KEYS.listening, v))\r\n  watch(typingQuizEnabled, (v) => writeBool(STORAGE_KEYS.typing, v))\r\n  watch(bubbleShooterVietnameseMode, (v) => writeBool(STORAGE_KEYS.bubbleShooterVietnamese, v))\r\n\r\n  // Rotating indices for correct-answer position (A,B,C,D => 0..3)\r\n  const imageCorrectPos = ref(readNumber(STORAGE_KEYS.imagePos, Math.floor(Math.random() * 4)))\r\n  const listeningCorrectPos = ref(readNumber(STORAGE_KEYS.listeningPos, Math.floor(Math.random() * 4)))\r\n  const typingCorrectPos = ref(readNumber(STORAGE_KEYS.typingPos, Math.floor(Math.random() * 4)))\r\n\r\n  watch(imageCorrectPos, (n) => writeNumber(STORAGE_KEYS.imagePos, n))\r\n  watch(listeningCorrectPos, (n) => writeNumber(STORAGE_KEYS.listeningPos, n))\r\n  watch(typingCorrectPos, (n) => writeNumber(STORAGE_KEYS.typingPos, n))\r\n\r\n  const placeWithRotation = (correct: string, wrongs: string[], posRef: { value: number }) => {\r\n    const options = new Array<string>(4)\r\n    const idx = posRef.value % 4\r\n    options[idx] = correct\r\n    // Fill remaining slots with shuffled wrongs\r\n    const shuffledWrongs = [...wrongs].sort(() => Math.random() - 0.5)\r\n    let wi = 0\r\n    for (let i = 0; i < 4; i++) {\r\n      if (i === idx) continue\r\n      options[i] = shuffledWrongs[wi++] ?? ''\r\n    }\r\n    // Advance rotation for next time\r\n    posRef.value = (posRef.value + 1) % 4\r\n    return options\r\n  }\r\n\r\n  // Pronunciation mode states\r\n  const isRecording = ref(false)\r\n  const pronunciationResult = ref('')\r\n  const pronunciationAnswered = ref(false)\r\n  const pronunciationCorrect = ref(false)\r\n  let recognition: any = null\r\n\r\n  const SpeechRecognition = window.SpeechRecognition || (window as any).webkitSpeechRecognition\r\n  const isSpeechRecognitionSupported = !!SpeechRecognition\r\n\r\n  if (isSpeechRecognitionSupported) {\r\n    recognition = new SpeechRecognition()\r\n    recognition.continuous = false\r\n    recognition.lang = 'en-US'\r\n    recognition.interimResults = false\r\n    recognition.maxAlternatives = 1\r\n\r\n    recognition.onresult = (event: any) => {\r\n      const transcript = event.results[0][0].transcript\r\n      pronunciationResult.value = transcript\r\n      checkPronunciationAnswer(transcript)\r\n    }\r\n\r\n    recognition.onerror = (event: any) => {\r\n      console.error('Speech recognition error', event.error)\r\n      isRecording.value = false\r\n    }\r\n\r\n    recognition.onend = () => {\r\n      isRecording.value = false\r\n    }\r\n  }\r\n\r\n  const startRecording = () => {\r\n    if (isRecording.value || !isSpeechRecognitionSupported) return\r\n    pronunciationResult.value = ''\r\n    pronunciationAnswered.value = false\r\n    pronunciationCorrect.value = false\r\n    isRecording.value = true\r\n    recognition.start()\r\n  }\r\n\r\n  const checkPronunciationAnswer = (transcript: string) => {\r\n    if (!currentCard.value) return false\r\n    pronunciationAnswered.value = true\r\n    const userAnswer = transcript.toLowerCase().trim().replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\")\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim().replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\")\r\n    pronunciationCorrect.value = userAnswer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (pronunciationCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return pronunciationCorrect.value\r\n  }\r\n\r\n  // Quiz mode methods\r\n  const generateQuizOptions = () => {\r\n    if (!currentCard.value) return\r\n    \r\n    const correctAnswer = getShortMeaning(currentCard.value.meaning)\r\n    // Use allVocabularies instead of flashcards to get options from all vocabulary words\r\n    const allOptions = allVocabularies.value\r\n      .filter(card => card.id !== currentCard.value?.id)\r\n      .map(card => getShortMeaning(card.meaning))\r\n      .filter(meaning => meaning !== correctAnswer) // Remove duplicates\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 3)\r\n    \r\n    // If not enough unique options, use the available ones\r\n    const wrongOptions = allOptions.length >= 3 ? allOptions.slice(0, 3) : allOptions\r\n    \r\n    quizOptions.value = [correctAnswer, ...wrongOptions].sort(() => Math.random() - 0.5)\r\n  }\r\n\r\n  const selectQuizAnswer = (answer: string) => {\r\n    if (quizAnswered.value) return\r\n    \r\n    selectedAnswer.value = answer\r\n    quizAnswered.value = true\r\n    \r\n    // So sánh với short meaning thay vì full meaning\r\n    const correctAnswer = currentCard.value ? getShortMeaning(currentCard.value.meaning) : ''\r\n    const isCorrect = answer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (isCorrect) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return isCorrect\r\n  }\r\n\r\n  // Image-Quiz methods (multiple choice answers are the WORDs)\r\n  const generateImageQuizOptions = () => {\r\n    if (!currentCard.value) return\r\n\r\n    const correctWord = currentCard.value.word.trim()\r\n    const allWrong = allVocabularies.value\r\n      .filter(card => card.id !== currentCard.value?.id)\r\n      .map(card => card.word.trim())\r\n      .filter(word => word.toLowerCase() !== correctWord.toLowerCase())\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 3)\r\n\r\n    const wrongOptions = allWrong.length >= 3 ? allWrong.slice(0, 3) : allWrong\r\n    // Place correct answer using rotating position to avoid repetition in the same slot\r\n    const paddedWrongs = [...new Set(wrongOptions)]\r\n    while (paddedWrongs.length < 3) paddedWrongs.push('')\r\n    imageQuizOptions.value = placeWithRotation(correctWord, paddedWrongs, imageCorrectPos)\r\n  }\r\n\r\n  const selectImageQuizAnswer = (answer: string) => {\r\n    if (imageQuizAnswered.value) return\r\n\r\n    imageQuizSelected.value = answer\r\n    imageQuizAnswered.value = true\r\n\r\n    const correctWord = currentCard.value ? currentCard.value.word.trim().toLowerCase() : ''\r\n    const isCorrect = answer.trim().toLowerCase() === correctWord\r\n\r\n    // Reflect into base Image mode state so existing flow/stats work\r\n    imageAnswered.value = true\r\n    imageCorrect.value = isCorrect\r\n\r\n    if (isCorrect) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n\r\n    return isCorrect\r\n  }\r\n\r\n  // Typing mode methods\r\n  const checkTypingAnswer = () => {\r\n    if (!currentCard.value || typingAnswered.value) return\r\n    \r\n    typingAnswered.value = true\r\n    const userAnswer = typingAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    \r\n    typingCorrect.value = userAnswer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (typingCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return typingCorrect.value\r\n  }\r\n\r\n  // Typing-Quiz methods (multiple choice answers are the WORDs)\r\n  const generateTypingQuizOptions = () => {\r\n    if (!currentCard.value) return\r\n\r\n    const correctWord = currentCard.value.word.trim()\r\n    const allWrong = allVocabularies.value\r\n      .filter(card => card.id !== currentCard.value?.id)\r\n      .map(card => card.word.trim())\r\n      .filter(word => word.toLowerCase() !== correctWord.toLowerCase())\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 3)\r\n\r\n    const wrongOptions = allWrong.length >= 3 ? allWrong.slice(0, 3) : allWrong\r\n    const paddedWrongs = [...new Set(wrongOptions)]\r\n    while (paddedWrongs.length < 3) paddedWrongs.push('')\r\n    typingQuizOptions.value = placeWithRotation(correctWord, paddedWrongs, typingCorrectPos)\r\n  }\r\n\r\n  const selectTypingQuizAnswer = (answer: string) => {\r\n    if (typingQuizAnswered.value) return\r\n\r\n    typingQuizSelected.value = answer\r\n    typingQuizAnswered.value = true\r\n\r\n    const correctWord = currentCard.value ? currentCard.value.word.trim().toLowerCase() : ''\r\n    const isCorrect = answer.trim().toLowerCase() === correctWord\r\n\r\n    // Reflect into base Typing mode state so existing flow/stats work\r\n    typingAnswered.value = true\r\n    typingCorrect.value = isCorrect\r\n\r\n    if (isCorrect) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n\r\n    return isCorrect\r\n  }\r\n\r\n  // Listening mode methods\r\n  const checkListeningAnswer = () => {\r\n    if (!currentCard.value || listeningAnswered.value) return\r\n    \r\n    listeningAnswered.value = true\r\n    const userAnswer = listeningAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    \r\n    listeningCorrect.value = userAnswer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (listeningCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return listeningCorrect.value\r\n  }\r\n\r\n  // Listening-Quiz methods (multiple choice answers are the WORDs)\r\n  const generateListeningQuizOptions = () => {\r\n    if (!currentCard.value) return\r\n\r\n    const correctWord = currentCard.value.word.trim()\r\n    const allWrong = allVocabularies.value\r\n      .filter(card => card.id !== currentCard.value?.id)\r\n      .map(card => card.word.trim())\r\n      .filter(word => word.toLowerCase() !== correctWord.toLowerCase())\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 3)\r\n\r\n    const wrongOptions = allWrong.length >= 3 ? allWrong.slice(0, 3) : allWrong\r\n    const paddedWrongs = [...new Set(wrongOptions)]\r\n    while (paddedWrongs.length < 3) paddedWrongs.push('')\r\n    listeningQuizOptions.value = placeWithRotation(correctWord, paddedWrongs, listeningCorrectPos)\r\n  }\r\n\r\n  const selectListeningQuizAnswer = (answer: string) => {\r\n    if (listeningQuizAnswered.value) return\r\n\r\n    listeningQuizSelected.value = answer\r\n    listeningQuizAnswered.value = true\r\n\r\n    const correctWord = currentCard.value ? currentCard.value.word.trim().toLowerCase() : ''\r\n    const isCorrect = answer.trim().toLowerCase() === correctWord\r\n\r\n    // Reflect into base Listening mode state so existing flow/stats work\r\n    listeningAnswered.value = true\r\n    listeningCorrect.value = isCorrect\r\n\r\n    if (isCorrect) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n\r\n    return isCorrect\r\n  }\r\n\r\n  // Image mode methods\r\n  const checkImageAnswer = () => {\r\n    if (!currentCard.value || imageAnswered.value) return\r\n    \r\n    imageAnswered.value = true\r\n    const userAnswer = imageAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    \r\n    imageCorrect.value = userAnswer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (imageCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return imageCorrect.value\r\n  }\r\n\r\n  // Pictionary mode methods (answer by typing based on image hint)\r\n  const checkPictionaryAnswer = () => {\r\n    if (!currentCard.value || pictionaryAnswered.value) return\r\n    pictionaryAnswered.value = true\r\n    const userAnswer = pictionaryAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    pictionaryCorrect.value = userAnswer === correctAnswer\r\n    if (pictionaryCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    return pictionaryCorrect.value\r\n  }\r\n\r\n  const playAudio = async () => {\r\n    if (!currentCard.value) return\r\n    \r\n    try {\r\n      // Use playVoiceAudio directly for immediate reactivity\r\n      await playVoiceAudio(currentCard.value.word)\r\n    } catch (error) {\r\n      console.error('Error playing audio:', error)\r\n      // Fallback to basic speech synthesis\r\n      const utterance = new SpeechSynthesisUtterance(currentCard.value.word)\r\n      utterance.lang = 'en-US'\r\n      utterance.rate = 0.8\r\n      speechSynthesis.speak(utterance)\r\n    }\r\n  }\r\n\r\n  // Reset methods for each mode\r\n  const resetQuizMode = () => {\r\n    quizOptions.value = []\r\n    selectedAnswer.value = ''\r\n    quizAnswered.value = false\r\n    // Don't generate options here, let the parent handle it\r\n  }\r\n\r\n  const resetTypingMode = () => {\r\n    typingAnswer.value = ''\r\n    typingAnswered.value = false\r\n    typingCorrect.value = false\r\n    // Reset Typing-Quiz state but keep toggle as-is\r\n    typingQuizOptions.value = []\r\n    typingQuizSelected.value = ''\r\n    typingQuizAnswered.value = false\r\n  }\r\n\r\n  const resetListeningMode = () => {\r\n    listeningAnswer.value = ''\r\n    listeningAnswered.value = false\r\n    listeningCorrect.value = false\r\n    // Reset Listening-Quiz state but keep toggle as-is; caller decides\r\n    listeningQuizOptions.value = []\r\n    listeningQuizSelected.value = ''\r\n    listeningQuizAnswered.value = false\r\n  }\r\n\r\n  const resetImageMode = () => {\r\n    imageAnswer.value = ''\r\n    imageAnswered.value = false\r\n    imageCorrect.value = false\r\n    // Reset Image-Quiz, but keep the toggle value as-is; caller can decide\r\n    imageQuizOptions.value = []\r\n    imageQuizSelected.value = ''\r\n    imageQuizAnswered.value = false\r\n  }\r\n\r\n  const resetPictionaryMode = () => {\r\n    pictionaryAnswer.value = ''\r\n    pictionaryAnswered.value = false\r\n    pictionaryCorrect.value = false\r\n  }\r\n\r\n  const resetPronunciationMode = () => {\r\n    if (recognition && isRecording.value) {\r\n      recognition.stop()\r\n    }\r\n    isRecording.value = false\r\n    pronunciationResult.value = ''\r\n    pronunciationAnswered.value = false\r\n    pronunciationCorrect.value = false\r\n  }\r\n\r\n  const resetAllModes = () => {\r\n    resetQuizMode()\r\n    resetTypingMode()\r\n    resetListeningMode()\r\n    resetImageMode()\r\n    resetPronunciationMode()\r\n    resetPictionaryMode()\r\n  }\r\n\r\n  // Helper to check if can proceed to next card\r\n  const getCanProceed = () => {\r\n    return {\r\n      flashcard: true,\r\n      quiz: quizAnswered.value,\r\n      typing: typingAnswered.value,\r\n      listening: listeningAnswered.value,\r\n      image: imageAnswered.value,\r\n      pronunciation: pronunciationAnswered.value,\r\n      pictionary: pictionaryAnswered.value,\r\n      'snake-game': true,\r\n      'bubble-shooter': true,\r\n    }\r\n  }\r\n\r\n  // Helper to get short meaning\r\n  const getShortMeaning = (meaning: string) => {\r\n    return meaning.split(' - ')[0].trim()\r\n  }\r\n\r\n  return {\r\n    // Quiz mode\r\n    quizOptions,\r\n    selectedAnswer,\r\n    quizAnswered,\r\n    generateQuizOptions,\r\n    selectQuizAnswer,\r\n    resetQuizMode,\r\n    \r\n    // Typing mode\r\n    typingAnswer,\r\n    typingAnswered,\r\n    typingCorrect,\r\n    checkTypingAnswer,\r\n    resetTypingMode,\r\n    // Typing-Quiz (within Typing mode)\r\n    typingQuizEnabled,\r\n    typingQuizOptions,\r\n    typingQuizSelected,\r\n    typingQuizAnswered,\r\n    generateTypingQuizOptions,\r\n    selectTypingQuizAnswer,\r\n    \r\n    // Listening mode\r\n    listeningAnswer,\r\n    listeningAnswered,\r\n    listeningCorrect,\r\n    checkListeningAnswer,\r\n    playAudio,\r\n    resetListeningMode,\r\n    // Listening-Quiz (within Listening mode)\r\n    listeningQuizEnabled,\r\n    listeningQuizOptions,\r\n    listeningQuizSelected,\r\n    listeningQuizAnswered,\r\n    generateListeningQuizOptions,\r\n    selectListeningQuizAnswer,\r\n    \r\n    // Image mode\r\n    imageAnswer,\r\n    imageAnswered,\r\n    imageCorrect,\r\n    checkImageAnswer,\r\n    resetImageMode,\r\n\r\n    // Image-Quiz (within Image mode)\r\n    imageQuizEnabled,\r\n    imageQuizOptions,\r\n    imageQuizSelected,\r\n    imageQuizAnswered,\r\n    generateImageQuizOptions,\r\n    selectImageQuizAnswer,\r\n\r\n    // Pictionary mode\r\n    pictionaryAnswer,\r\n    pictionaryAnswered,\r\n    pictionaryCorrect,\r\n    checkPictionaryAnswer,\r\n    resetPictionaryMode,\r\n\r\n    // Bubble Shooter mode\r\n    bubbleShooterVietnameseMode,\r\n\r\n    // Pronunciation mode\r\n    isRecording,\r\n    pronunciationResult,\r\n    pronunciationAnswered,\r\n    pronunciationCorrect,\r\n    isSpeechRecognitionSupported,\r\n    startRecording,\r\n    resetPronunciationMode,\r\n    \r\n    // General\r\n    resetAllModes,\r\n    getCanProceed,\r\n    getShortMeaning\r\n  }\r\n}\r\n","import { ref, onMounted } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport type { GameStats } from './useFlashcardStats'\r\n\r\nexport interface PracticeHistoryItem {\r\n  id: string\r\n  date: string\r\n  mode: string\r\n  totalCards: number\r\n  correctAnswers: number\r\n  incorrectAnswers: number\r\n  accuracy: number\r\n  duration: number\r\n  score: number\r\n  categories?: string[]\r\n  // Whether this session has detailed per-card logs stored\r\n  hasDetails?: boolean\r\n}\r\n\r\nexport function useFlashcardHistory() {\r\n  const showHistory = ref(false)\r\n  const practiceHistory = ref<PracticeHistoryItem[]>([])\r\n  const { t, locale } = useI18n()\r\n\r\n  // Load practice history from localStorage\r\n  const loadPracticeHistory = () => {\r\n    const saved = localStorage.getItem('flashcard-practice-history')\r\n    if (saved) {\r\n      const parsed: PracticeHistoryItem[] = JSON.parse(saved)\r\n      // Backfill hasDetails for older sessions by checking stored details key\r\n      practiceHistory.value = parsed.map((item) => {\r\n        if (item.hasDetails === undefined) {\r\n          const has = !!localStorage.getItem(`flashcard-session-details:${item.id}`)\r\n          return { ...item, hasDetails: has }\r\n        }\r\n        return item\r\n      })\r\n      // Persist backfilled flags so future loads are consistent\r\n      savePracticeHistory()\r\n    }\r\n  }\r\n\r\n  // Save practice history to localStorage\r\n  const savePracticeHistory = () => {\r\n    localStorage.setItem('flashcard-practice-history', JSON.stringify(practiceHistory.value))\r\n  }\r\n\r\n  // Save current session to history and return the session id\r\n  const saveSessionToHistory = (stats: GameStats, totalCards: number, sessionId?: string): string => {\r\n    const duration = stats.endTime && stats.startTime \r\n      ? Math.round((stats.endTime.getTime() - stats.startTime.getTime()) / 1000)\r\n      : 0\r\n    \r\n    const total = stats.correct + stats.incorrect\r\n    const accuracy = total > 0 ? Math.round((stats.correct / total) * 100) : 0\r\n    const score = Math.round(accuracy * (totalCards / 100))\r\n\r\n    const id = sessionId || Date.now().toString()\r\n\r\n    const historyItem: PracticeHistoryItem = {\r\n      id,\r\n      date: new Date().toISOString(),\r\n      mode: stats.mode,\r\n      totalCards,\r\n      correctAnswers: stats.correct,\r\n      incorrectAnswers: stats.incorrect,\r\n      accuracy,\r\n      duration,\r\n      score,\r\n      categories: stats.categories || [],\r\n      hasDetails: true,\r\n    }\r\n\r\n    practiceHistory.value.unshift(historyItem)\r\n    \r\n    // Keep only last 50 sessions\r\n    if (practiceHistory.value.length > 50) {\r\n      practiceHistory.value = practiceHistory.value.slice(0, 50)\r\n    }\r\n    \r\n    savePracticeHistory()\r\n    return id\r\n  }\r\n\r\n  // Helper functions for history display\r\n  const getModeColor = (mode: string) => {\r\n    switch (mode) {\r\n      case 'flashcard':\r\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'\r\n      case 'quiz':\r\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\r\n      case 'typing':\r\n        return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'\r\n      case 'listening':\r\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'\r\n      case 'image':\r\n        return 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200'\r\n      case 'pictionary':\r\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\r\n      case 'pronunciation':\r\n        return 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200'\r\n      case 'bubble-shooter':\r\n        return 'bg-teal-100 text-teal-800 dark:bg-teal-900 dark:text-teal-200'\r\n      case 'snake-game':\r\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\r\n      default:\r\n        // Avoid gray in dark mode per UI rules\r\n        return 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200'\r\n    }\r\n  }\r\n\r\n  const getModeText = (mode: string) => {\r\n    switch (mode) {\r\n      case 'flashcard':\r\n        return t('flashcard.modes.flashcard', 'Flashcard')\r\n      case 'quiz':\r\n        return t('flashcard.modes.quiz', 'Quiz')\r\n      case 'typing':\r\n        return t('flashcard.modes.typing', 'Typing')\r\n      case 'listening':\r\n        return t('flashcard.modes.listening', 'Listening')\r\n      case 'image':\r\n        return t('flashcard.modes.image', 'Image')\r\n      case 'pictionary':\r\n        return t('flashcard.modes.pictionary', 'Pictionary')\r\n      case 'pronunciation':\r\n        return t('flashcard.modes.pronunciation', 'Pronunciation')\r\n      case 'bubble-shooter':\r\n        return t('flashcard.modes.bubbleShooter', 'Bubble Shooter')\r\n      case 'snake-game':\r\n        return t('flashcard.modes.snakeGame', 'Snake Hunt')\r\n      default:\r\n        return 'Unknown'\r\n    }\r\n  }\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString)\r\n    const now = new Date()\r\n    const diffTime = now.getTime() - date.getTime()\r\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\r\n    \r\n    // Use the browser's locale based on the current i18n locale\r\n    const currentLocale = locale.value === 'en' ? 'en-US' : 'vi-VN'\r\n    \r\n    if (diffDays === 0) {\r\n      return locale.value === 'en' ? 'Today' : 'Hôm nay'\r\n    } else if (diffDays === 1) {\r\n      return locale.value === 'en' ? 'Yesterday' : 'Hôm qua'\r\n    } else if (diffDays < 7) {\r\n      return locale.value === 'en' \r\n        ? `${diffDays} days ago` \r\n        : `${diffDays} ngày trước`\r\n    } else {\r\n      return date.toLocaleDateString(currentLocale)\r\n    }\r\n  }\r\n\r\n  const formatDuration = (seconds: number) => {\r\n    const minutes = Math.floor(seconds / 60)\r\n    const remainingSeconds = seconds % 60\r\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\r\n  }\r\n\r\n  // Clear history\r\n  const clearHistory = () => {\r\n    practiceHistory.value = []\r\n    savePracticeHistory()\r\n  }\r\n\r\n  // Get statistics from history\r\n  const getHistoryStats = () => {\r\n    if (practiceHistory.value.length === 0) {\r\n      return {\r\n        totalSessions: 0,\r\n        averageAccuracy: 0,\r\n        totalCards: 0,\r\n        totalTime: 0,\r\n        bestScore: 0,\r\n        favoriteMode: ''\r\n      }\r\n    }\r\n\r\n    const totalSessions = practiceHistory.value.length\r\n    const totalCards = practiceHistory.value.reduce((sum, item) => sum + item.totalCards, 0)\r\n    const totalTime = practiceHistory.value.reduce((sum, item) => sum + item.duration, 0)\r\n    const averageAccuracy = Math.round(\r\n      practiceHistory.value.reduce((sum, item) => sum + item.accuracy, 0) / totalSessions\r\n    )\r\n    const bestScore = Math.max(...practiceHistory.value.map(item => item.score))\r\n    \r\n    // Find most used mode\r\n    const modeCount = practiceHistory.value.reduce((acc, item) => {\r\n      acc[item.mode] = (acc[item.mode] || 0) + 1\r\n      return acc\r\n    }, {} as Record<string, number>)\r\n    \r\n    const favoriteMode = Object.entries(modeCount)\r\n      .sort(([, a], [, b]) => b - a)[0]?.[0] || ''\r\n\r\n    return {\r\n      totalSessions,\r\n      averageAccuracy,\r\n      totalCards,\r\n      totalTime,\r\n      bestScore,\r\n      favoriteMode\r\n    }\r\n  }\r\n\r\n  onMounted(() => {\r\n    loadPracticeHistory()\r\n  })\r\n\r\n  return {\r\n    showHistory,\r\n    practiceHistory,\r\n    saveSessionToHistory,\r\n    getModeColor,\r\n    getModeText,\r\n    formatDate,\r\n    formatDuration,\r\n    clearHistory,\r\n    getHistoryStats\r\n  }\r\n}\r\n","import { ref, watch, onMounted } from 'vue'\r\nimport type { GameSettings } from '../types'\r\n\r\nexport function useFlashcardSettings() {\r\n  const showSettings = ref(false)\r\n  \r\n  // Default settings\r\n  const defaultSettings: GameSettings = {\r\n    cardCount: 20,\r\n    difficulty: 'all',\r\n    autoFlip: false,\r\n    flipDelay: 3,\r\n    showDefinition: true,\r\n    showExample: true,\r\n    showPronunciation: true,\r\n    shuffleCards: false,\r\n    voiceType: 'female',\r\n    practiceMode: 'flashcard',\r\n    category: '',\r\n    level: ''\r\n  }\r\n\r\n  // Current settings\r\n  const settings = ref<GameSettings>({ ...defaultSettings })\r\n\r\n  // Local settings for modal editing\r\n  const localSettings = ref<GameSettings>({ ...defaultSettings })\r\n\r\n  // Load settings from localStorage\r\n  const loadSettings = () => {\r\n    const saved = localStorage.getItem('flashcard-settings')\r\n    if (saved) {\r\n      try {\r\n        const parsedSettings = JSON.parse(saved)\r\n        settings.value = { ...defaultSettings, ...parsedSettings }\r\n        localSettings.value = { ...settings.value }\r\n      } catch (error) {\r\n        console.error('Error loading settings:', error)\r\n        settings.value = { ...defaultSettings }\r\n        localSettings.value = { ...defaultSettings }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Save settings to localStorage\r\n  const saveSettings = () => {\r\n    localStorage.setItem('flashcard-settings', JSON.stringify(settings.value))\r\n  }\r\n\r\n  // Apply settings from modal\r\n  const applySettings = () => {\r\n    settings.value = { ...localSettings.value }\r\n    saveSettings()\r\n    showSettings.value = false\r\n  }\r\n\r\n  // Reset settings to default\r\n  const resetSettings = () => {\r\n    settings.value = { ...defaultSettings }\r\n    localSettings.value = { ...defaultSettings }\r\n    saveSettings()\r\n  }\r\n\r\n  // Cancel settings changes\r\n  const cancelSettings = () => {\r\n    localSettings.value = { ...settings.value }\r\n    showSettings.value = false\r\n  }\r\n\r\n  // Open settings modal\r\n  const openSettings = () => {\r\n    localSettings.value = { ...settings.value }\r\n    showSettings.value = true\r\n  }\r\n\r\n  // Settings validation\r\n  const validateSettings = (settingsToValidate: GameSettings) => {\r\n    const errors: string[] = []\r\n    \r\n    if (settingsToValidate.cardCount < 1 || settingsToValidate.cardCount > 100) {\r\n      errors.push('Số lượng thẻ phải từ 1 đến 100')\r\n    }\r\n    \r\n    if (settingsToValidate.flipDelay < 1 || settingsToValidate.flipDelay > 10) {\r\n      errors.push('Thời gian lật thẻ phải từ 1 đến 10 giây')\r\n    }\r\n    \r\n    return errors\r\n  }\r\n\r\n  // Get difficulty levels\r\n  const getDifficultyLevels = () => {\r\n    return [\r\n      { value: 'all', label: 'Tất cả' },\r\n      { value: 'easy', label: 'Dễ' },\r\n      { value: 'medium', label: 'Trung bình' },\r\n      { value: 'hard', label: 'Khó' }\r\n    ]\r\n  }\r\n\r\n  // Get flip delay options\r\n  const getFlipDelayOptions = () => {\r\n    return [\r\n      { value: 1, label: '1 giây' },\r\n      { value: 2, label: '2 giây' },\r\n      { value: 3, label: '3 giây' },\r\n      { value: 4, label: '4 giây' },\r\n      { value: 5, label: '5 giây' },\r\n      { value: 10, label: '10 giây' }\r\n    ]\r\n  }\r\n\r\n  // Get card count options\r\n  const getCardCountOptions = () => {\r\n    return [\r\n      { value: 10, label: '10 thẻ' },\r\n      { value: 20, label: '20 thẻ' },\r\n      { value: 30, label: '30 thẻ' },\r\n      { value: 50, label: '50 thẻ' },\r\n      { value: 100, label: '100 thẻ' }\r\n    ]\r\n  }\r\n\r\n  // Get voice type options\r\n  const getVoiceTypeOptions = () => {\r\n    return [\r\n      { value: 'female', label: 'Giọng nữ', icon: '👩' },\r\n      { value: 'male', label: 'Giọng nam', icon: '👨' }\r\n    ]\r\n  }\r\n\r\n  // Settings presets\r\n  const getSettingsPresets = () => {\r\n    return {\r\n      beginner: {\r\n        ...defaultSettings,\r\n        cardCount: 10,\r\n        difficulty: 'easy' as const,\r\n        autoFlip: true,\r\n        flipDelay: 5,\r\n        showDefinition: true,\r\n        showExample: true,\r\n        showPronunciation: true\r\n      },\r\n      intermediate: {\r\n        ...defaultSettings,\r\n        cardCount: 20,\r\n        difficulty: 'medium' as const,\r\n        autoFlip: false,\r\n        showDefinition: true,\r\n        showExample: true,\r\n        showPronunciation: false\r\n      },\r\n      advanced: {\r\n        ...defaultSettings,\r\n        cardCount: 50,\r\n        difficulty: 'hard' as const,\r\n        autoFlip: false,\r\n        showDefinition: false,\r\n        showExample: false,\r\n        showPronunciation: false\r\n      }\r\n    }\r\n  }\r\n\r\n  // Apply preset\r\n  const applyPreset = (presetName: 'beginner' | 'intermediate' | 'advanced') => {\r\n    const presets = getSettingsPresets()\r\n    localSettings.value = { ...presets[presetName] }\r\n  }\r\n\r\n  // Watch for settings changes to auto-save\r\n  watch(settings, () => {\r\n    saveSettings()\r\n  }, { deep: true })\r\n\r\n  onMounted(() => {\r\n    loadSettings()\r\n  })\r\n\r\n  return {\r\n    showSettings,\r\n    settings,\r\n    localSettings,\r\n    applySettings,\r\n    resetSettings,\r\n    cancelSettings,\r\n    openSettings,\r\n    validateSettings,\r\n    getDifficultyLevels,\r\n    getFlipDelayOptions,\r\n    getCardCountOptions,\r\n    getVoiceTypeOptions,\r\n    getSettingsPresets,\r\n    applyPreset\r\n  }\r\n}\r\n","import { ref, computed, type Ref } from 'vue'\r\n\r\nexport interface SessionStats {\r\n  totalCards: number\r\n  currentCard: number\r\n  correctAnswers: number\r\n  incorrectAnswers: number\r\n  accuracy: number\r\n  streak: number\r\n  maxStreak: number\r\n  timeSpent: number\r\n  averageTimePerCard: number\r\n  score: number\r\n}\r\n\r\nexport function useFlashcardStats(stats: Ref<GameStats>) {\r\n  const sessionStats = ref<SessionStats>({\r\n    totalCards: 0,\r\n    currentCard: 0,\r\n    correctAnswers: 0,\r\n    incorrectAnswers: 0,\r\n    accuracy: 0,\r\n    streak: 0,\r\n    maxStreak: 0,\r\n    timeSpent: 0,\r\n    averageTimePerCard: 0,\r\n    score: 0\r\n  })\r\n\r\n  const currentStreak = ref(0)\r\n  const maxStreak = ref(0)\r\n  const cardStartTime = ref<Date | null>(null)\r\n  const cardTimes = ref<number[]>([])\r\n\r\n  // Initialize session stats\r\n  const initializeStats = (totalCards: number) => {\r\n    sessionStats.value = {\r\n      totalCards,\r\n      currentCard: 0,\r\n      correctAnswers: 0,\r\n      incorrectAnswers: 0,\r\n      accuracy: 0,\r\n      streak: 0,\r\n      maxStreak: 0,\r\n      timeSpent: 0,\r\n      averageTimePerCard: 0,\r\n      score: 0\r\n    }\r\n    currentStreak.value = 0\r\n    maxStreak.value = 0\r\n    cardTimes.value = []\r\n    cardStartTime.value = new Date()\r\n  }\r\n\r\n  // Record answer\r\n  const recordAnswer = (isCorrect: boolean) => {\r\n    if (isCorrect) {\r\n      sessionStats.value.correctAnswers++\r\n      stats.value.correct++\r\n      currentStreak.value++\r\n      if (currentStreak.value > maxStreak.value) {\r\n        maxStreak.value = currentStreak.value\r\n      }\r\n    } else {\r\n      sessionStats.value.incorrectAnswers++\r\n      stats.value.incorrect++\r\n      currentStreak.value = 0\r\n    }\r\n\r\n    // Update total\r\n    stats.value.total++\r\n\r\n    // Record time spent on this card\r\n    if (cardStartTime.value) {\r\n      const timeSpent = new Date().getTime() - cardStartTime.value.getTime()\r\n      cardTimes.value.push(timeSpent)\r\n      cardStartTime.value = new Date()\r\n    }\r\n\r\n    nextCardStats()\r\n  }\r\n\r\n  // Move to next card and update reviewed count\r\n  const nextCardStats = () => {\r\n    stats.value.reviewed++\r\n    sessionStats.value.currentCard++\r\n    cardStartTime.value = new Date()\r\n  }\r\n\r\n  // Update computed stats\r\n  const updateStats = () => {\r\n    const total = sessionStats.value.correctAnswers + sessionStats.value.incorrectAnswers\r\n    sessionStats.value.accuracy = total > 0 ? Math.round((sessionStats.value.correctAnswers / total) * 100) : 0\r\n    sessionStats.value.streak = currentStreak.value\r\n    sessionStats.value.maxStreak = maxStreak.value\r\n    sessionStats.value.timeSpent = cardTimes.value.reduce((sum, time) => sum + time, 0)\r\n    sessionStats.value.averageTimePerCard = cardTimes.value.length > 0 \r\n      ? Math.round(sessionStats.value.timeSpent / cardTimes.value.length)\r\n      : 0\r\n    sessionStats.value.score = calculateScore()\r\n  }\r\n\r\n  // Calculate score based on accuracy, speed, and streak\r\n  const calculateScore = () => {\r\n    const { accuracy, averageTimePerCard, maxStreak } = sessionStats.value\r\n    \r\n    // Base score from accuracy (0-100)\r\n    let score = accuracy\r\n    \r\n    // Speed bonus (faster = higher score)\r\n    const speedBonus = averageTimePerCard > 0 ? Math.max(0, 50 - Math.floor(averageTimePerCard / 1000)) : 0\r\n    \r\n    // Streak bonus (longer streak = higher score)\r\n    const streakBonus = Math.min(50, maxStreak * 5)\r\n    \r\n    return Math.round(score + speedBonus + streakBonus)\r\n  }\r\n\r\n  // Get performance level\r\n  const getPerformanceLevel = computed(() => {\r\n    const accuracy = sessionStats.value.accuracy\r\n    if (accuracy >= 90) return { level: 'Xuất sắc', color: 'text-green-600 dark:text-green-400' }\r\n    if (accuracy >= 80) return { level: 'Tốt', color: 'text-blue-600 dark:text-blue-400' }\r\n    if (accuracy >= 70) return { level: 'Khá', color: 'text-yellow-600 dark:text-yellow-400' }\r\n    if (accuracy >= 60) return { level: 'Trung bình', color: 'text-orange-600 dark:text-orange-400' }\r\n    return { level: 'Cần cải thiện', color: 'text-red-600 dark:text-red-400' }\r\n  })\r\n\r\n  // Get streak message\r\n  const getStreakMessage = computed(() => {\r\n    const streak = currentStreak.value\r\n    if (streak === 0) return ''\r\n    if (streak < 3) return 'Bắt đầu tốt!'\r\n    if (streak < 5) return 'Đang tiến bộ!'\r\n    if (streak < 10) return 'Tuyệt vời!'\r\n    return 'Xuất sắc!'\r\n  })\r\n\r\n  // Get speed rating\r\n  const getSpeedRating = computed(() => {\r\n    const avgTime = sessionStats.value.averageTimePerCard / 1000 // Convert to seconds\r\n    if (avgTime === 0) return { rating: '', color: '' }\r\n    if (avgTime < 2) return { rating: 'Rất nhanh', color: 'text-green-600 dark:text-green-400' }\r\n    if (avgTime < 4) return { rating: 'Nhanh', color: 'text-blue-600 dark:text-blue-400' }\r\n    if (avgTime < 6) return { rating: 'Trung bình', color: 'text-yellow-600 dark:text-yellow-400' }\r\n    if (avgTime < 10) return { rating: 'Chậm', color: 'text-orange-600 dark:text-orange-400' }\r\n    return { rating: 'Rất chậm', color: 'text-red-600 dark:text-red-400' }\r\n  })\r\n\r\n  // Format time\r\n  const formatTime = (milliseconds: number) => {\r\n    const seconds = Math.floor(milliseconds / 1000)\r\n    const minutes = Math.floor(seconds / 60)\r\n    const remainingSeconds = seconds % 60\r\n    \r\n    if (minutes > 0) {\r\n      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\r\n    }\r\n    return `${remainingSeconds}s`\r\n  }\r\n\r\n  // Get detailed stats for modal\r\n  const getDetailedStats = computed(() => {\r\n    return {\r\n      ...sessionStats.value,\r\n      performanceLevel: getPerformanceLevel.value,\r\n      streakMessage: getStreakMessage.value,\r\n      speedRating: getSpeedRating.value,\r\n      timeSpentFormatted: formatTime(sessionStats.value.timeSpent),\r\n      averageTimeFormatted: formatTime(sessionStats.value.averageTimePerCard),\r\n      completion: sessionStats.value.totalCards > 0 \r\n        ? Math.round((sessionStats.value.currentCard / sessionStats.value.totalCards) * 100)\r\n        : 0\r\n    }\r\n  })\r\n\r\n  // Stats are now synchronized directly in recordAnswer\r\n\r\n  return {\r\n    sessionStats,\r\n    currentStreak,\r\n    maxStreak,\r\n    initializeStats,\r\n    recordAnswer,\r\n    nextCardStats,\r\n    getPerformanceLevel,\r\n    getStreakMessage,\r\n    getSpeedRating,\r\n    formatTime,\r\n    getDetailedStats\r\n  }\r\n}\r\n\r\n// A new type definition for GameStats\r\nexport interface GameStats {\r\n  easy: number;\r\n  difficult: number;\r\n  reviewed: number;\r\n  correct: number;\r\n  incorrect: number;\r\n  total: number;\r\n  startTime: Date;\r\n  endTime: Date | null;\r\n  mode: string;\r\n  categories?: string[];\r\n}\r\n","import { ref } from 'vue'\n\nexport interface SessionDetailEntry {\n  cardId: number\n  word: string\n  meaningShort: string\n  userAnswer: string\n  correctAnswer: string\n  isCorrect: boolean\n  mode: string\n  timestamp: string\n  notes?: string\n  // Optional extra data for mode-specific details (backward-compatible)\n  extra?: SessionDetailEntryExtra\n}\n\nexport interface SessionDetails {\n  sessionId: string\n  mode: string\n  total: number\n  correct: number\n  incorrect: number\n  entries: SessionDetailEntry[]\n}\n\n// Mode-specific extra payloads stored alongside entries\nexport interface SessionDetailEntryExtra {\n  pictionary?: {\n    image?: string\n    slots: { char: string; fixed: boolean; separator?: boolean }[]\n  }\n  snakeGame?: {\n    position: { x: number; y: number }\n    wasCorrect: boolean\n    foodType: 'primary' | 'secondary'\n    snakeLength: number\n    gameScore: number\n    wordsCompleted: number\n    wrongEatenCount: number\n    snakeBody: { x: number; y: number }[]\n    direction: { x: number; y: number }\n    // Optional timeline frames for accurate replay (when recording is enabled)\n    timelineFrames?: Array<{\n      body: { x: number; y: number }[]\n      direction: { x: number; y: number }\n    }>\n  }\n}\n\nconst makeKey = (sessionId: string) => `flashcard-session-details:${sessionId}`\n\nexport function usePracticeSessionDetails() {\n  const currentSessionId = ref<string | null>(null)\n  const currentMode = ref<string>('')\n\n  const startSessionDetails = (sessionId: string, mode: string) => {\n    currentSessionId.value = sessionId\n    currentMode.value = mode\n    const initial: SessionDetails = {\n      sessionId,\n      mode,\n      total: 0,\n      correct: 0,\n      incorrect: 0,\n      entries: [],\n    }\n    try {\n      localStorage.setItem(makeKey(sessionId), JSON.stringify(initial))\n    } catch {}\n  }\n\n  const appendAnswer = (payload: Omit<SessionDetailEntry, 'timestamp'> & { timestamp?: string }) => {\n    if (!currentSessionId.value) return\n    const key = makeKey(currentSessionId.value)\n    let data: SessionDetails | null = null\n    try {\n      const raw = localStorage.getItem(key)\n      data = raw ? (JSON.parse(raw) as SessionDetails) : null\n    } catch {}\n    if (!data) {\n      data = {\n        sessionId: currentSessionId.value,\n        mode: currentMode.value,\n        total: 0,\n        correct: 0,\n        incorrect: 0,\n        entries: [],\n      }\n    }\n    const entry: SessionDetailEntry = {\n      ...payload,\n      timestamp: payload.timestamp || new Date().toISOString(),\n    }\n    data.entries.push(entry)\n    data.total += 1\n    if (entry.isCorrect) data.correct += 1\n    else data.incorrect += 1\n\n    try {\n      localStorage.setItem(key, JSON.stringify(data))\n    } catch {}\n  }\n\n  const loadDetails = (sessionId: string): SessionDetails | null => {\n    try {\n      const raw = localStorage.getItem(makeKey(sessionId))\n      return raw ? (JSON.parse(raw) as SessionDetails) : null\n    } catch {\n      return null\n    }\n  }\n\n  const clearDetails = (sessionId: string) => {\n    try {\n      localStorage.removeItem(makeKey(sessionId))\n    } catch {}\n  }\n\n  return {\n    currentSessionId,\n    currentMode,\n    startSessionDetails,\n    appendAnswer,\n    loadDetails,\n    clearDetails,\n  }\n}\n","<template>\n  <div class=\"min-h-screen overflow-x-hidden bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-dark-bg-soft dark:to-dark-bg-mute relative\">\n    <!-- Animated Background Elements (match Dashboard) -->\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      <div class=\"floating-shapes\">\n        <div class=\"absolute top-24 left-8 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\n        <div class=\"absolute top-40 right-10 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\n        <div class=\"absolute -bottom-10 left-24 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\n      </div>\n    </div>\n    <!-- Header -->\n    <FlashcardHeader\n      :current-index=\"currentIndex\"\n      :total-cards=\"currentFlashcards.length\"\n      :practice-mode=\"practiceMode\"\n      :shuffle-enabled=\"shuffleEnabled\"\n      :practice-started=\"practiceStarted\"\n      :image-quiz-enabled=\"imageQuizEnabled\"\n      :listening-quiz-enabled=\"listeningQuizEnabled\"\n      :typing-quiz-enabled=\"typingQuizEnabled\"\n      :image-mode-available=\"imageModeAvailable\"\n      :pictionary-mode-available=\"pictionaryModeAvailable\"\n      :bubble-shooter-mode-available=\"bubbleShooterModeAvailable\"\n      :bubble-shooter-vietnamese-mode=\"bubbleShooterVietnameseMode\"\n      :snake-double-bait-enabled=\"snakeDoubleBaitMode\"\n      :pictionary-definition-mode=\"pictionaryDefinitionMode\"\n      @go-back=\"goBack\"\n      @show-history=\"showHistory = true\"\n      @change-practice-mode=\"changePracticeMode($event)\"\n      @show-settings=\"showSettingsDialog = true\"\n      @toggle-shuffle=\"toggleShuffle\"\n      @update:image-quiz-enabled=\"imageQuizEnabled = $event\"\n      @update:listening-quiz-enabled=\"listeningQuizEnabled = $event\"\n      @update:typing-quiz-enabled=\"typingQuizEnabled = $event\"\n      @update:bubble-shooter-vietnamese-mode=\"bubbleShooterVietnameseMode = $event\"\n      @update:snake-double-bait-enabled=\"snakeDoubleBaitMode = $event\"\n      @update:pictionary-definition-mode=\"pictionaryDefinitionMode = $event\"\n    />\n\n    <!-- Progress Bar -->\n    <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.1\" root-margin=\"-50px\">\n      <FlashcardProgress :progress-percentage=\"currentProgressPercentage\" />\n    </LazyLoadComponent>\n\n    <!-- Voice Settings -->\n    <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.1\" root-margin=\"-50px\">\n      <div class=\"max-w-4xl mx-auto px-3 sm:px-4 md:px-6 py-2 sm:py-3 md:py-4\">\n        <div class=\"group bg-white/80 dark:bg-dark-bg-soft/80 backdrop-blur-md rounded-2xl shadow-xl hover:shadow-2xl border border-white/20 dark:border-dark-bg-mute transition-all duration-500 hover:scale-[1.01] hover:-translate-y-0.5 p-3 sm:p-4 md:p-5\">\n          <VoiceSelector :show-voice-info=\"false\" />\n        </div>\n      </div>\n    </LazyLoadComponent>\n\n    <!-- Date Filter -->\n    <LazyLoadComponent animation-type=\"slide-right\" :threshold=\"0.1\" root-margin=\"-50px\">\n      <div class=\"max-w-4xl mx-auto px-3 sm:px-4 md:px-6 py-2 sm:py-3 md:py-4\">\n        <div class=\"group relative overflow-visible bg-white/80 dark:bg-dark-bg-soft/80 backdrop-blur-md rounded-2xl shadow-xl hover:shadow-2xl border border-white/20 dark:border-dark-bg-mute transition-all duration-500 hover:scale-[1.01] hover:-translate-y-0.5 p-3 sm:p-4 md:p-5\">\n          <FlashcardDateFilter\n            :vocabularies=\"allVocabularies\"\n            :selectedDate=\"selectedDate\"\n            :practice-started=\"practiceStarted\"\n            @update:selectedDate=\"selectedDate = $event\"\n          />\n        </div>\n      </div>\n    </LazyLoadComponent>\n\n    <!-- Practice Container -->\n    <div class=\"max-w-4xl mx-auto px-3 sm:px-4 md:px-6 py-4 sm:py-6 md:py-8\">\n      <div v-if=\"currentFlashcards.length > 0\" class=\"relative\">\n        <!-- Practice Glass Container -->\n        <div class=\"group relative overflow-hidden bg-white/80 dark:bg-dark-bg-soft/80 backdrop-blur-md rounded-2xl shadow-xl hover:shadow-2xl border border-white/20 dark:border-dark-bg-mute transition-all duration-500 p-3 sm:p-4 md:p-6\">\n          <div class=\"space-y-4 sm:space-y-5 md:space-y-6\">\n            <!-- Practice Timer / Start Button -->\n            <LazyLoadComponent animation-type=\"fade-up\" :threshold=\"0.1\" root-margin=\"-50px\">\n              <div class=\"flex justify-center max-w-md mx-auto\">\n                <!-- Simple Start Button for Bubble Shooter & Snake modes (no countdown timer) -->\n                <template v-if=\"practiceMode === 'bubble-shooter' || practiceMode === 'snake-game'\">\n                  <button\n                    v-if=\"!practiceStarted\"\n                    @click=\"handlePracticeStart\"\n                    class=\"px-8 py-4 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 dark:from-purple-700 dark:to-pink-700 dark:hover:from-purple-800 dark:hover:to-pink-800 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200\"\n                  >\n                    {{ t('practice.startGame', 'Start Game') }}\n                  </button>\n                </template>\n                <!-- Normal Timer for Other Modes -->\n                <template v-else>\n                  <PracticeTimer\n                    ref=\"practiceTimerRef\"\n                    :max-time=\"30\"\n                    @start=\"handlePracticeStart\"\n                    @timeout=\"handleTimeout\"\n                    @restart=\"handleTimerRestart\"\n                    @skip=\"handleSkip\"\n                  />\n                </template>\n              </div>\n            </LazyLoadComponent>\n\n            <!-- Practice Content (only show after started) -->\n            <div v-if=\"practiceStarted\">\n              <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.1\" root-margin=\"-50px\">\n                <template v-if=\"practiceMode === 'flashcard'\">\n                  <FlashcardCard\n                    :current-card=\"currentShuffledCard\"\n                    :is-flipped=\"isFlipped\"\n                    @flip-card=\"flipCard\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'pictionary'\">\n                  <PictionaryMode\n                    :card=\"currentShuffledCard\"\n                    :pictionary-answer=\"pictionaryAnswer\"\n                    :pictionary-answered=\"pictionaryAnswered\"\n                    :pictionary-correct=\"pictionaryCorrect\"\n                    :definition-mode=\"pictionaryDefinitionMode\"\n                    :get-topic-name=\"getTopicName\"\n                    @update:pictionary-answer=\"pictionaryAnswer = $event\"\n                    @check-answer=\"handlePictionaryAnswer\"\n                    @pictionary-snapshot=\"onPictionarySnapshot\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'quiz'\">\n                  <FlashcardQuiz\n                    :current-card=\"currentShuffledCard\"\n                    :quiz-options=\"quizOptions\"\n                    :selected-answer=\"selectedAnswer\"\n                    :quiz-answered=\"quizAnswered\"\n                    @select-answer=\"handleQuizAnswer\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'typing'\">\n                  <FlashcardTyping\n                    :current-card=\"currentShuffledCard\"\n                    :typing-answer=\"typingAnswer\"\n                    :typing-answered=\"typingAnswered\"\n                    :typing-correct=\"typingCorrect\"\n                    :typing-quiz-enabled=\"typingQuizEnabled\"\n                    :typing-quiz-options=\"typingQuizOptions\"\n                    :typing-quiz-selected=\"typingQuizSelected\"\n                    :typing-quiz-answered=\"typingQuizAnswered\"\n                    @update:typing-answer=\"typingAnswer = $event\"\n                    @check-answer=\"handleTypingAnswer\"\n                    @select-typing-quiz-answer=\"handleTypingQuizAnswer($event)\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'image'\">\n                  <FlashcardImage\n                    :current-card=\"currentShuffledCard\"\n                    :image-answer=\"imageAnswer\"\n                    :image-answered=\"imageAnswered\"\n                    :image-correct=\"imageCorrect\"\n                    :image-quiz-enabled=\"imageQuizEnabled\"\n                    :image-quiz-options=\"imageQuizOptions\"\n                    :image-quiz-selected=\"imageQuizSelected\"\n                    :image-quiz-answered=\"imageQuizAnswered\"\n                    @update:image-answer=\"imageAnswer = $event\"\n                    @check-answer=\"handleImageAnswer\"\n                    @update:image-quiz-enabled=\"onToggleImageQuiz($event)\"\n                    @select-image-quiz-answer=\"handleImageQuizAnswer($event)\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'listening'\">\n                  <ListeningMode\n                    :card=\"currentShuffledCard\"\n                    :listening-answer=\"listeningAnswer\"\n                    @update:listening-answer=\"listeningAnswer = $event\"\n                    :listening-answered=\"listeningAnswered\"\n                    :listening-correct=\"listeningCorrect\"\n                    :listening-quiz-enabled=\"listeningQuizEnabled\"\n                    :listening-quiz-options=\"listeningQuizOptions\"\n                    :listening-quiz-selected=\"listeningQuizSelected\"\n                    :listening-quiz-answered=\"listeningQuizAnswered\"\n                    :get-topic-name=\"getTopicName\"\n                    @check-answer=\"handleListeningAnswer\"\n                    @play-audio=\"playAudio\"\n                    @select-listening-quiz-answer=\"handleListeningQuizAnswer($event)\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'pronunciation'\">\n                  <PronunciationMode\n                    :card=\"currentShuffledCard\"\n                    :is-recording=\"isRecording\"\n                    :pronunciation-result=\"pronunciationResult\"\n                    :pronunciation-answered=\"pronunciationAnswered\"\n                    :pronunciation-correct=\"pronunciationCorrect\"\n                    :is-speech-recognition-supported=\"isSpeechRecognitionSupported\"\n                    :get-topic-name=\"getTopicName\"\n                    @start-recording=\"startRecording\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'bubble-shooter'\">\n                  <BubbleShooterMode\n                    :words=\"currentFlashcards\"\n                    :vietnamese-mode=\"bubbleShooterVietnameseMode\"\n                    @game-complete=\"handleBubbleShooterComplete\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'snake-game'\">\n                  <SnakeGameMode\n                    :words=\"currentFlashcards\"\n                    :vietnamese-mode=\"bubbleShooterVietnameseMode\"\n                    :double-bait-mode=\"snakeDoubleBaitMode\"\n                    :record-timeline=\"true\"\n                    @game-complete=\"handleSnakeGameComplete\"\n                    @correct-food-eaten=\"handleSnakeCorrectFoodEaten\"\n                    @wrong-food-eaten=\"handleSnakeWrongFoodEaten\"\n                  />\n                </template>\n              </LazyLoadComponent>\n\n              <!-- Controls -->\n              <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.1\" root-margin=\"-50px\">\n                <FlashcardControls\n                  :practice-mode=\"practiceMode\"\n                  :current-index=\"currentIndex\"\n                  :total-cards=\"currentFlashcards.length\"\n                  :can-proceed=\"getCanProceed()[practiceMode]\"\n                  :practice-started=\"practiceStarted\"\n                  :typing-answer=\"typingAnswer\"\n                  :typing-answered=\"typingAnswered\"\n                  :listening-answer=\"listeningAnswer\"\n                  :listening-answered=\"listeningAnswered\"\n                  :image-answer=\"imageAnswer\"\n                  :image-answered=\"imageAnswered\"\n                  @mark-difficult=\"enhancedMarkDifficult\"\n                  @mark-easy=\"enhancedMarkEasy\"\n                  @previous-card=\"enhancedPreviousCard\"\n                  @next-card=\"enhancedNextCard\"\n                  @check-typing-answer=\"handleTypingAnswer\"\n                  @check-listening-answer=\"handleListeningAnswer\"\n                  @check-image-answer=\"handleImageAnswer\"\n                  @exit-practice=\"handleExitPractice\"\n                />\n              </LazyLoadComponent>\n\n              <!-- Stats -->\n              <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.1\" root-margin=\"-50px\">\n                <PracticeStats :stats=\"stats\" :mode=\"practiceMode\" />\n              </LazyLoadComponent>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Empty State -->\n      <LazyLoadComponent animation-type=\"fade-up\" :threshold=\"0.1\" root-margin=\"-50px\">\n        <FlashcardEmptyState v-if=\"currentFlashcards.length === 0\" @go-to-vocabulary=\"goToVocabulary\" />\n      </LazyLoadComponent>\n    </div>\n\n    <!-- Settings Modal -->\n    <SettingsModal\n      :show=\"showSettingsDialog\"\n      :settings=\"settings\"\n      :local-settings=\"localSettings\"\n      :date-filter-enabled=\"dateFilterEnabled\"\n      :selected-date=\"selectedDate\"\n      @update:local-settings=\"localSettings = $event\"\n      @cancel=\"cancelSettings\"\n      @apply=\"applyGameSettings\"\n    />\n\n    <!-- History Modal -->\n    <HistoryModal\n      :show=\"showHistory\"\n      :history=\"practiceHistory\"\n      :get-mode-color=\"getModeColor\"\n      :get-mode-text=\"getModeText\"\n      :format-date=\"formatDate\"\n      :format-duration=\"formatDuration\"\n      @close=\"showHistory = false\"\n      @open-details=\"openHistoryDetails\"\n    />\n\n    <!-- Session Detail Modal -->\n    <SessionDetailModal\n      :show=\"showSessionDetail\"\n      :details=\"selectedSessionDetails\"\n      @close=\"showSessionDetail = false\"\n    />\n\n    <!-- Completion Modal -->\n    <CompletionModal\n      :show=\"showCompletionModal\"\n      :stats=\"stats\"\n      :card-count=\"flashcards.length\"\n      @restart=\"handleRestartSession\"\n      @go-back=\"handleCompletionGoBack\"\n    />\n\n    <!-- Exit Warning Modal -->\n    <ExitWarningModal\n      :show=\"showExitWarning\"\n      @continue=\"continueSession\"\n      @confirm=\"confirmExit\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useI18n } from 'vue-i18n'\nimport { useVocabularyStore } from '../../composables/useVocabularyStore'\nimport type { Vocabulary } from '../../composables/useVocabularyStore'\nimport { getDateKey } from '../../utils/dateUtils'\nimport { useModalStore } from '../../stores/modalStore'\n\n// Initialize i18n\nconst { t } = useI18n()\nconst router = useRouter()\n\n// Single-line import of all async components (local composable)\nimport AsyncComponents from './composables/asyncComponents'\n\n// Register all async components for template usage\ndefineOptions({ components: AsyncComponents })\n\n// Composables\nimport { useFlashcardGame } from './composables/useFlashcardGame'\nimport { useFlashcardModes } from './composables/useFlashcardModes'\nimport { useFlashcardHistory } from './composables/useFlashcardHistory'\nimport { useFlashcardSettings } from './composables/useFlashcardSettings'\nimport { useFlashcardStats } from './composables/useFlashcardStats'\nimport { getTopicName } from '../../utils/topicUtils'\nimport { usePracticeSessionDetails } from './composables/usePracticeSessionDetails'\n\n// Vocabulary store\nconst { allVocabularies } = useVocabularyStore()\n\n// Modal store for controlling back to top and body scroll\nconst modalStore = useModalStore()\n\n// Session details logging\nconst {\n  startSessionDetails,\n  appendAnswer,\n  loadDetails,\n} = usePracticeSessionDetails()\nconst activeSessionId = ref<string | null>(null)\nconst showSessionDetail = ref(false)\nconst selectedSessionDetails = ref<ReturnType<typeof loadDetails>>(null)\n\n// Capture pictionary slot snapshots emitted by PictionaryMode for detailed history\nconst latestPictionarySnapshot = ref<{ slots: { char: string; fixed: boolean; separator?: boolean }[] } | null>(null)\nconst onPictionarySnapshot = (payload: { slots: { char: string; fixed: boolean; separator?: boolean }[] }) => {\n  latestPictionarySnapshot.value = payload\n}\n\n// Open details modal from history list\nconst openHistoryDetails = (sessionId: string) => {\n  const details = loadDetails(sessionId)\n  selectedSessionDetails.value = details\n  showSessionDetail.value = true\n}\n\n// Date filter state with localStorage persistence\nconst STORAGE_KEY = 'flashcard-date-filter'\n\n// Load date filter state from localStorage (always enabled)\nconst loadDateFilterState = () => {\n  try {\n    const saved = localStorage.getItem(STORAGE_KEY)\n    if (saved) {\n      const parsed = JSON.parse(saved)\n      return {\n        selectedDate: parsed.selectedDate || ''\n      }\n    }\n  } catch (error) {\n    console.error('Error loading date filter state:', error)\n  }\n  return { selectedDate: '' }\n}\n\n// Save date filter state to localStorage (enabled is implicitly true)\nconst saveDateFilterState = () => {\n  try {\n    const state = { selectedDate: selectedDate.value }\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(state))\n  } catch (error) {\n    console.error('Error saving date filter state:', error)\n  }\n}\n\n// Initialize state from localStorage\nconst initialState = loadDateFilterState()\n// Keep ref for SettingsModal compatibility; always true\nconst dateFilterEnabled = ref(true)\nconst selectedDate = ref(initialState.selectedDate)\n\n// Persist date filter changes\nwatch(selectedDate, () => {\n  saveDateFilterState()\n})\n\n// Bubble Shooter Vietnamese Mode Toggle State with localStorage support\nconst bubbleShooterVietnameseMode = ref(false)\n// Snake Game Double Bait Mode Toggle State with localStorage support\nconst snakeDoubleBaitMode = ref(false)\n// Pictionary Definition Mode Toggle State with localStorage support\nconst pictionaryDefinitionMode = ref(false)\n\n// Load from localStorage on init\nconst loadBubbleShooterVietnameseModeFromStorage = () => {\n  try {\n    const saved = localStorage.getItem('pe_bubbleShooterVietnameseMode')\n    return saved === null ? false : saved === 'true'\n  } catch {\n    return false\n  }\n}\n\n// Save to localStorage\nconst saveBubbleShooterVietnameseModeToStorage = (enabled: boolean) => {\n  try {\n    localStorage.setItem('pe_bubbleShooterVietnameseMode', String(enabled))\n  } catch {}\n}\n\n// Load/Save helpers for Snake Double Bait mode\nconst loadSnakeDoubleBaitModeFromStorage = () => {\n  try {\n    const saved = localStorage.getItem('pe_snakeDoubleBaitMode')\n    return saved === null ? false : saved === 'true'\n  } catch {\n    return false\n  }\n}\n\nconst saveSnakeDoubleBaitModeToStorage = (enabled: boolean) => {\n  try {\n    localStorage.setItem('pe_snakeDoubleBaitMode', String(enabled))\n  } catch {}\n}\n\n// Load/Save helpers for Pictionary Definition mode\nconst loadPictionaryDefinitionModeFromStorage = () => {\n  try {\n    const saved = localStorage.getItem('pe_pictionaryDefinitionMode')\n    return saved === null ? false : saved === 'true'\n  } catch {\n    return false\n  }\n}\n\nconst savePictionaryDefinitionModeToStorage = (enabled: boolean) => {\n  try {\n    localStorage.setItem('pe_pictionaryDefinitionMode', String(enabled))\n  } catch {}\n}\n\n// Initialize from localStorage\nbubbleShooterVietnameseMode.value = loadBubbleShooterVietnameseModeFromStorage()\nsnakeDoubleBaitMode.value = loadSnakeDoubleBaitModeFromStorage()\npictionaryDefinitionMode.value = loadPictionaryDefinitionModeFromStorage()\n\n// Watch for changes and save to localStorage\nwatch(bubbleShooterVietnameseMode, (newVal) => {\n  saveBubbleShooterVietnameseModeToStorage(newVal)\n})\nwatch(snakeDoubleBaitMode, (newVal) => {\n  saveSnakeDoubleBaitModeToStorage(newVal)\n})\nwatch(pictionaryDefinitionMode, (newVal) => {\n  savePictionaryDefinitionModeToStorage(newVal)\n})\n\n// Toggle function for FlashcardHeader\nconst toggleBubbleShooterVietnameseMode = () => {\n  bubbleShooterVietnameseMode.value = !bubbleShooterVietnameseMode.value\n}\n\n// Event handlers for FlashcardHeader events - using existing implementations\n\n// Settings composable  \nconst {\n  showSettings: showSettingsDialog,\n  settings: flashcardSettings,\n  localSettings,\n  applySettings: applyGameSettings,\n  resetSettings,\n  cancelSettings,\n  openSettings\n} = useFlashcardSettings()\n\n// Filter flashcards by date and category\nconst filteredVocabularies = computed(() => {\n  let vocabularies = allVocabularies.value\n\n  // Filter by date (always enabled)\n  if (selectedDate.value) {\n    vocabularies = vocabularies.filter((vocab: Vocabulary) => {\n      const vocabDateKey = getDateKey(vocab.createdAt)\n      return vocabDateKey === selectedDate.value\n    })\n  }\n\n  // Filter by category if a category is selected\n  if (flashcardSettings.value.category) {\n    vocabularies = vocabularies.filter((vocab: Vocabulary) => vocab.category === flashcardSettings.value.category)\n  }\n\n  return vocabularies\n})\n\n// Combine filter and shuffle logic\nconst baseFlashcards = computed(() => {\n  return filteredVocabularies.value.filter((vocab: Vocabulary) => {\n    const category = flashcardSettings.value.category\n    const difficulty = flashcardSettings.value.difficulty\n    const categoryMatch = !category || vocab.category === category\n    const levelMatch = !difficulty || difficulty === 'all' || vocab.level === difficulty\n    return categoryMatch && levelMatch\n  })\n})\n\n// Determine if Image mode is available for the CURRENT effective set (date + category + difficulty)\n// This ensures that when a date contains multiple topics, Image mode is only enabled if the selected\n// topic (and difficulty) actually has images.\nconst imageModeAvailable = computed(() => {\n  const cards = baseFlashcards.value\n  if (cards.length === 0) return false\n  // Image mode is available only if ALL cards in the current effective set have a non-empty image\n  return cards.every((v: Vocabulary) => {\n    const img: any = (v as any).image\n    if (img == null) return false\n    const s = typeof img === 'string' ? img : String(img)\n    return s.trim().length > 0\n  })\n})\n\n// Determine if Pictionary mode is available for the CURRENT effective set (date + category + difficulty)\n// This ensures that when a date contains multiple topics, Pictionary mode is only enabled if the selected\n// topic (and difficulty) actually has images.\nconst pictionaryModeAvailable = computed(() => {\n  const cards = baseFlashcards.value\n  if (cards.length === 0) return false\n  // Pictionary mode is available only if ALL cards in the current effective set have a non-empty image\n  return cards.every((v: Vocabulary) => {\n    const img: any = (v as any).image\n    if (img == null) return false\n    const s = typeof img === 'string' ? img : String(img)\n    return s.trim().length > 0\n  })\n})\n\n// Determine if Bubble Shooter mode is available based on vocabulary count\n// Bubble Shooter mode is disabled when the selected date contains more than 8 vocabulary words\n// to avoid gameplay issues with too many balls\nconst bubbleShooterModeAvailable = computed(() => {\n  // If no date is selected, count all vocabularies\n  if (!selectedDate.value) {\n    return filteredVocabularies.value.length <= 8\n  }\n  \n  // Count vocabularies for the selected date (before category/difficulty filtering)\n  const dateFilteredVocabs = allVocabularies.value.filter((vocab: Vocabulary) => {\n    const vocabDateKey = getDateKey(vocab.createdAt)\n    return vocabDateKey === selectedDate.value\n  })\n  \n  return dateFilteredVocabs.length <= 8\n})\n\n// Practice Timer State\nconst practiceStarted = ref(false)\nconst practiceTimerRef = ref()\n\n// Exit Warning State\nconst showExitWarning = ref(false)\nconst allowExit = ref(false)\n\n// Modal states (showSettingsDialog and showHistory are imported from composables)\n\n// Timer Event Handlers\nconst handlePracticeStart = () => {\n  practiceStarted.value = true\n  console.log('Practice started!')\n  // Start a new session details log\n  activeSessionId.value = `${Date.now()}`\n  startSessionDetails(activeSessionId.value, practiceMode.value)\n}\n\nconst handleExitPractice = () => {\n  if (practiceStarted.value && !allowExit.value) {\n    showExitWarning.value = true\n  } else {\n    router.push('/')\n  }\n}\n\nconst handleTimeout = () => {\n  console.log('Time out for current card!')\n  // Timer modal will handle the UI\n}\n\nconst handleTimerRestart = () => {\n  // Restart the session from the FIRST card when user clicks \"Try again\" in the Time's Up modal\n  // If shuffle is enabled, reshuffle to get a new random order, then go back to index 0.\n  // Clear any per-card saved states and reset the practice timer and card UI state.\n  console.log('Timer restarted: restarting from the first card')\n  \n  // Ensure we are in practice mode\n  practiceStarted.value = true\n\n  // If shuffle is enabled, reshuffle to provide a new order for the new attempt\n  if (flashcardSettings.value.shuffleCards && baseFlashcards.value.length > 0) {\n    shuffleFlashcards()\n  }\n\n  // Clear saved states and reset to first card\n  cardStateStorage.value = {}\n  currentIndex.value = 0\n  resetAndRestoreCard()\n\n  // Start the timer immediately (avoid showing the Start button)\n  if (practiceTimerRef.value) {\n    // Start the timer directly - hasStarted will be set internally\n    practiceTimerRef.value.startTimer()\n  }\n}\n\nconst handleSkip = () => {\n  console.log('Skip current card')\n  // Reset game state and navigate back to the main flashcard page\n  practiceStarted.value = false\n  if (practiceTimerRef.value) {\n    practiceTimerRef.value.resetPractice()\n  }\n  // Reset indices/state managed by composable\n  restartSession()\n  router.push('/practice/flashcard')\n}\n\n// Exit Warning Handlers\nconst continueSession = () => {\n  showExitWarning.value = false\n}\n\nconst confirmExit = () => {\n  allowExit.value = true\n  showExitWarning.value = false\n  // End the practice session\n  practiceStarted.value = false\n  if (practiceTimerRef.value) {\n    practiceTimerRef.value.resetPractice()\n  }\n  // Remove navigation guard to allow exit\n  removeNavigationGuard()\n  // Navigate back to home page\n  router.push('/')\n}\n\n// Navigation guard to prevent leaving page during practice\nlet unregisterGuard: (() => void) | null = null\n\nconst setupNavigationGuard = () => {\n  if (unregisterGuard) {\n    unregisterGuard()\n  }\n  \n  unregisterGuard = router.beforeEach((to, from, next) => {\n    if (practiceStarted.value && !allowExit.value && from.path.includes('/practice/flashcard')) {\n      showExitWarning.value = true\n      // Prevent navigation temporarily\n      return false\n    }\n    next()\n  })\n}\n\nconst removeNavigationGuard = () => {\n  if (unregisterGuard) {\n    unregisterGuard()\n    unregisterGuard = null\n  }\n}\n\n// Image Answer Handler\nconst handleImageAnswer = () => {\n  checkImageAnswer()\n  recordAnswer(imageCorrect.value)\n  \n  // Auto-advance on xs/sm only (viewport < md) for Image mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handleBeforeUnload = (event: BeforeUnloadEvent) => {\n  if (practiceStarted.value && !allowExit.value) {\n    event.preventDefault()\n    event.returnValue = ''\n    return ''\n  }\n}\n\n// History composable\nconst {\n  showHistory,\n  practiceHistory,\n  saveSessionToHistory,\n  getModeColor,\n  getModeText,\n  formatDate,\n  formatDuration\n} = useFlashcardHistory()\n\n// Main game composable - must be after baseFlashcards\nconst {\n  currentIndex,\n  isFlipped,\n  practiceMode,\n  showSettings,\n  showCompletionModal,\n  isCompleted,\n  settings,\n  stats,\n  flashcards,\n  currentCard,\n  nextCard,\n  previousCard,\n  flipCard,\n  resetCurrentCard,\n  completeSession,\n  restartSession,\n  changePracticeMode,\n  applySettings,\n  goBack,\n  goToVocabulary,\n  markEasy,\n  markDifficult,\n  cleanup\n} = useFlashcardGame(baseFlashcards)\n\n// Auto-switch away from Image mode if it becomes unavailable\nwatch(imageModeAvailable, (available) => {\n  if (practiceMode.value === 'image' && !available) {\n    // Respect rule: do not change mode during active session\n    if (practiceStarted.value) {\n      console.log('[Flashcard] Image mode became unavailable but practice is active; not switching mode.')\n      return\n    }\n    console.log('[Flashcard] Image mode unavailable for current filter; switching to flashcard mode.')\n    changePracticeMode('flashcard')\n  }\n}, { immediate: true })\n\n// Auto-switch away from Pictionary mode if it becomes unavailable\nwatch(pictionaryModeAvailable, (available) => {\n  if (practiceMode.value === 'pictionary' && !available) {\n    // Respect rule: do not change mode during active session\n    if (practiceStarted.value) {\n      console.log('[Flashcard] Pictionary mode became unavailable but practice is active; not switching mode.')\n      return\n    }\n    console.log('[Flashcard] Pictionary mode unavailable for current filter; switching to flashcard mode.')\n    changePracticeMode('flashcard')\n  }\n}, { immediate: true })\n\n// Stats composable - must be after useFlashcardGame\nconst {\n  sessionStats,\n  initializeStats,\n  recordAnswer,\n  nextCardStats,\n  getDetailedStats\n} = useFlashcardStats(stats)\n\n// Get current flashcards (filtered + shuffled if enabled)\nconst currentFlashcards = computed(() => {\n  if (flashcardSettings.value.shuffleCards && shuffledFlashcards.value.length > 0) {\n    return shuffledFlashcards.value\n  }\n  return baseFlashcards.value\n})\n\n// Current card (works with both filtered and shuffled)\nconst currentShuffledCard = computed(() => {\n  if (currentFlashcards.value.length === 0) return null\n  return currentFlashcards.value[currentIndex.value]\n})\n\n// Progress (works with current flashcards)\nconst currentProgressPercentage = computed(() => {\n  if (currentFlashcards.value.length === 0) return 0\n  if (typeof currentIndex.value !== 'number' || isNaN(currentIndex.value)) return 0\n  if (currentIndex.value >= currentFlashcards.value.length) return 100\n  return ((currentIndex.value + 1) / currentFlashcards.value.length) * 100\n})\n\n// Shuffle functionality\nconst shuffleEnabled = computed(() => flashcardSettings.value.shuffleCards)\nconst shuffledFlashcards = ref<any[]>([])\n\nconst shuffleFlashcards = (cards = baseFlashcards.value) => {\n  // Fisher-Yates shuffle algorithm - use filtered flashcards\n  const shuffled = [...cards]\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]\n  }\n  \n  shuffledFlashcards.value = shuffled\n}\n\n// Modes composable\nconst {\n  quizOptions,\n  selectedAnswer,\n  quizAnswered,\n  generateQuizOptions,\n  selectQuizAnswer,\n  resetQuizMode,\n  typingAnswer,\n  typingAnswered,\n  typingCorrect,\n  checkTypingAnswer,\n  resetTypingMode,\n  // Typing-quiz\n  typingQuizEnabled,\n  typingQuizOptions,\n  typingQuizSelected,\n  typingQuizAnswered,\n  generateTypingQuizOptions,\n  selectTypingQuizAnswer,\n  listeningAnswer,\n  listeningAnswered,\n  listeningCorrect,\n  checkListeningAnswer,\n  playAudio,\n  resetListeningMode,\n  imageAnswer,\n  imageAnswered,\n  imageCorrect,\n  checkImageAnswer,\n  resetImageMode,\n  // Pictionary\n  pictionaryAnswer,\n  pictionaryAnswered,\n  pictionaryCorrect,\n  checkPictionaryAnswer,\n  resetPictionaryMode,\n  imageQuizEnabled,\n  imageQuizOptions,\n  imageQuizSelected,\n  imageQuizAnswered,\n  generateImageQuizOptions,\n  selectImageQuizAnswer,\n  resetAllModes,\n  getCanProceed,\n  getShortMeaning,\n  // Pronunciation mode\n  isRecording,\n  pronunciationResult,\n  pronunciationAnswered,\n  pronunciationCorrect,\n  isSpeechRecognitionSupported,\n  startRecording,\n  resetPronunciationMode,\n  listeningQuizEnabled,\n  listeningQuizOptions,\n  listeningQuizSelected,\n  listeningQuizAnswered,\n  generateListeningQuizOptions,\n  selectListeningQuizAnswer,\n} = useFlashcardModes(currentShuffledCard, currentFlashcards, allVocabularies)\n\n// Card state storage for preserving answers when navigating back/forward\ninterface CardState {\n  // Quiz mode\n  quizAnswer?: string;\n  quizAnswered?: boolean;\n  quizOptions?: string[]; // The options shown for the quiz\n  \n  // Typing mode  \n  typingAnswer?: string\n  typingAnswered?: boolean\n  typingCorrect?: boolean\n  // Typing-quiz\n  typingQuizOptions?: string[]\n  typingQuizSelected?: string\n  typingQuizAnswered?: boolean\n  \n  // Listening mode\n  listeningAnswer?: string\n  listeningAnswered?: boolean\n  listeningCorrect?: boolean\n  // Listening-quiz\n  listeningQuizOptions?: string[]\n  listeningQuizSelected?: string\n  listeningQuizAnswered?: boolean\n  \n  // Image mode\n  imageAnswer?: string\n  imageAnswered?: boolean\n  imageCorrect?: boolean\n  // Image-quiz state (within image mode)\n  imageQuizOptions?: string[]\n  imageQuizSelected?: string\n  imageQuizAnswered?: boolean\n  \n  // Pronunciation mode\n  pronunciationResult?: string\n  pronunciationAnswered?: boolean\n  pronunciationCorrect?: boolean\n\n  // Pictionary mode\n  pictionaryAnswer?: string\n  pictionaryAnswered?: boolean\n  pictionaryCorrect?: boolean\n}\n\nconst cardStateStorage = ref<Record<number, CardState>>({})\n\n// Save current card state before navigation\nconst saveCurrentCardState = () => {\n  if (!currentShuffledCard.value) return\n  \n  const cardId = currentShuffledCard.value.id\n  cardStateStorage.value[cardId] = {\n    // Quiz mode\n    quizAnswer: selectedAnswer.value,\n    quizAnswered: quizAnswered.value,\n    quizOptions: quizOptions.value,\n    \n    // Typing mode\n    typingAnswer: typingAnswer.value || undefined,\n    typingAnswered: typingAnswered.value || undefined,\n    typingCorrect: typingCorrect.value || undefined,\n    // Typing-quiz\n    typingQuizOptions: typingQuizOptions.value || undefined,\n    typingQuizSelected: typingQuizSelected.value || undefined,\n    typingQuizAnswered: typingQuizAnswered.value || undefined,\n    \n    // Listening mode\n    listeningAnswer: listeningAnswer.value || undefined,\n    listeningAnswered: listeningAnswered.value || undefined,\n    listeningCorrect: listeningCorrect.value || undefined,\n    // Listening-quiz\n    listeningQuizOptions: listeningQuizOptions.value || undefined,\n    listeningQuizSelected: listeningQuizSelected.value || undefined,\n    listeningQuizAnswered: listeningQuizAnswered.value || undefined,\n    \n    // Image mode\n    imageAnswer: imageAnswer.value || undefined,\n    imageAnswered: imageAnswered.value || undefined,\n    imageCorrect: imageCorrect.value || undefined,\n    imageQuizOptions: imageQuizOptions.value && imageQuizOptions.value.length ? imageQuizOptions.value : undefined,\n    imageQuizSelected: imageQuizSelected.value || undefined,\n    imageQuizAnswered: imageQuizAnswered.value || undefined,\n    \n    // Pronunciation mode\n    pronunciationResult: pronunciationResult.value || undefined,\n    pronunciationAnswered: pronunciationAnswered.value || undefined,\n    pronunciationCorrect: pronunciationCorrect.value || undefined,\n\n    // Pictionary mode\n    pictionaryAnswer: pictionaryAnswer.value || undefined,\n    pictionaryAnswered: pictionaryAnswered.value || undefined,\n    pictionaryCorrect: pictionaryCorrect.value || undefined,\n  }\n}\n\n// Restore card state when navigating to a card\nconst restoreCardState = () => {\n  if (!currentShuffledCard.value) return\n  \n  const cardId = currentShuffledCard.value.id\n  const savedState = cardStateStorage.value[cardId]\n  \n  if (savedState) {\n    // Restore quiz mode\n    if (savedState.quizOptions) {\n      quizOptions.value = savedState.quizOptions;\n    }\n    if (savedState.quizAnswer !== undefined) {\n      selectedAnswer.value = savedState.quizAnswer;\n    }\n    if (savedState.quizAnswered !== undefined) {\n      quizAnswered.value = savedState.quizAnswered;\n    }\n    \n    // Restore typing mode\n    if (savedState.typingAnswer !== undefined) {\n      typingAnswer.value = savedState.typingAnswer\n    }\n    if (savedState.typingAnswered !== undefined) {\n      typingAnswered.value = savedState.typingAnswered\n    }\n    if (savedState.typingCorrect !== undefined) {\n      typingCorrect.value = savedState.typingCorrect\n    }\n    // Restore typing-quiz\n    if (savedState.typingQuizOptions !== undefined) {\n      typingQuizOptions.value = savedState.typingQuizOptions\n    }\n    if (savedState.typingQuizSelected !== undefined) {\n      typingQuizSelected.value = savedState.typingQuizSelected\n    }\n    if (savedState.typingQuizAnswered !== undefined) {\n      typingQuizAnswered.value = savedState.typingQuizAnswered\n    }\n    \n    // Restore listening mode\n    if (savedState.listeningAnswer !== undefined) {\n      listeningAnswer.value = savedState.listeningAnswer\n    }\n    if (savedState.listeningAnswered !== undefined) {\n      listeningAnswered.value = savedState.listeningAnswered\n    }\n    if (savedState.listeningCorrect !== undefined) {\n      listeningCorrect.value = savedState.listeningCorrect\n    }\n    // Restore listening-quiz\n    if (savedState.listeningQuizOptions !== undefined) {\n      listeningQuizOptions.value = savedState.listeningQuizOptions\n    }\n    if (savedState.listeningQuizSelected !== undefined) {\n      listeningQuizSelected.value = savedState.listeningQuizSelected\n    }\n    if (savedState.listeningQuizAnswered !== undefined) {\n      listeningQuizAnswered.value = savedState.listeningQuizAnswered\n    }\n    \n    // Restore image mode\n    if (savedState.imageAnswer !== undefined) {\n      imageAnswer.value = savedState.imageAnswer\n    }\n    if (savedState.imageAnswered !== undefined) {\n      imageAnswered.value = savedState.imageAnswered\n    }\n    if (savedState.imageCorrect !== undefined) {\n      imageCorrect.value = savedState.imageCorrect\n    }\n    if (savedState.imageQuizOptions !== undefined) {\n      imageQuizOptions.value = savedState.imageQuizOptions\n    }\n    if (savedState.imageQuizSelected !== undefined) {\n      imageQuizSelected.value = savedState.imageQuizSelected\n    }\n    if (savedState.imageQuizAnswered !== undefined) {\n      imageQuizAnswered.value = savedState.imageQuizAnswered\n    }\n    \n    // Restore pronunciation mode\n    if (savedState.pronunciationResult !== undefined) {\n      pronunciationResult.value = savedState.pronunciationResult\n    }\n    if (savedState.pronunciationAnswered !== undefined) {\n      pronunciationAnswered.value = savedState.pronunciationAnswered\n    }\n    if (savedState.pronunciationCorrect !== undefined) {\n      pronunciationCorrect.value = savedState.pronunciationCorrect\n    }\n\n    // Restore pictionary mode\n    if (savedState.pictionaryAnswer !== undefined) {\n      pictionaryAnswer.value = savedState.pictionaryAnswer\n    }\n    if (savedState.pictionaryAnswered !== undefined) {\n      pictionaryAnswered.value = savedState.pictionaryAnswered\n    }\n    if (savedState.pictionaryCorrect !== undefined) {\n      pictionaryCorrect.value = savedState.pictionaryCorrect\n    }\n  }\n}\n\n// Override resetCurrentCard to use modes composable\nconst handleQuizAnswer = (answer: string) => {\n  const isCorrect = selectQuizAnswer(answer)\n  recordAnswer(!!isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: answer,\n      correctAnswer: getShortMeaning(currentShuffledCard.value.meaning),\n      isCorrect: !!isCorrect,\n      mode: 'quiz',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Quiz mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handleTypingAnswer = () => {\n  checkTypingAnswer()\n  recordAnswer(typingCorrect.value)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: typingAnswer.value,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!typingCorrect.value,\n      mode: 'typing',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Typing mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n// Typing-quiz handlers\n\nconst handleTypingQuizAnswer = (answer: string) => {\n  const isCorrect = selectTypingQuizAnswer(answer)\n  recordAnswer(!!isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: answer,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!isCorrect,\n      mode: 'typing-quiz',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Typing-quiz\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handleListeningAnswer = () => {\n  checkListeningAnswer()\n  recordAnswer(listeningCorrect.value)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: listeningAnswer.value,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!listeningCorrect.value,\n      mode: 'listening',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Listening mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n// Listening-quiz handlers (within listening mode)\nconst onToggleListeningQuiz = (enabled: boolean) => {\n  listeningQuizEnabled.value = enabled\n  resetListeningMode()\n  if (enabled) {\n    generateListeningQuizOptions()\n  }\n}\n\nconst handleListeningQuizAnswer = (answer: string) => {\n  const isCorrect = selectListeningQuizAnswer(answer)\n  recordAnswer(!!isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: answer,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!isCorrect,\n      mode: 'listening-quiz',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Listening-quiz\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n// Image-quiz handlers (image mode multiple-choice)\nconst onToggleImageQuiz = (enabled: boolean) => {\n  imageQuizEnabled.value = enabled\n  // Reset image mode state, but keep toggle as per composable's behavior\n  resetImageMode()\n  if (enabled) {\n    // Prepare options for current card\n    generateImageQuizOptions()\n  }\n}\n\nconst handleImageQuizAnswer = (answer: string) => {\n  const isCorrect = selectImageQuizAnswer(answer)\n  recordAnswer(!!isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: answer,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!isCorrect,\n      mode: 'image-quiz',\n    })\n  }\n\n  // Auto-advance on xs/sm only (viewport < md) for Image-quiz\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handlePictionaryAnswer = () => {\n  checkPictionaryAnswer()\n  recordAnswer(pictionaryCorrect.value)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: pictionaryAnswer.value || '',\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!pictionaryCorrect.value,\n      mode: 'pictionary',\n      extra: {\n        pictionary: {\n          image: currentShuffledCard.value.image,\n          slots: latestPictionarySnapshot.value?.slots || [],\n        }\n      }\n    })\n    // Clear snapshot after recording\n    latestPictionarySnapshot.value = null\n  }\n\n  // Auto-advance on xs/sm only (viewport < md) for Pictionary mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    // Slight delay so feedback is visible before advancing\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\n// Bubble Shooter mode handler\nconst handleBubbleShooterComplete = () => {\n  // Record completion as successful\n  recordAnswer(true)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: 'completed',\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: true,\n      mode: 'bubble-shooter',\n    })\n  }\n  // Complete the session since Bubble Shooter is a complete game mode\n  handleSessionComplete()\n}\nconst resetAndRestoreCard = () => {\n  // First, reset all modes to ensure a clean slate from the previous card.\n  resetAllModes();\n\n  // Second, restore the state for the new current card, if it exists.\n  restoreCardState();\n\n  // Third, generate new quiz options if needed (i.e., for a card seen for the first time).\n  if (practiceMode.value === 'quiz' && currentShuffledCard.value) {\n    const cardId = currentShuffledCard.value.id;\n    const savedState = cardStateStorage.value[cardId];\n    // Only generate options if the card hasn't been answered in a quiz before.\n    if (!savedState || savedState.quizAnswer === undefined) {\n      generateQuizOptions();\n    }\n  }\n  // For image mode with quiz enabled, ensure options exist\n  if (practiceMode.value === 'image' && imageQuizEnabled.value && currentShuffledCard.value) {\n    if (!imageQuizOptions.value || imageQuizOptions.value.length === 0) {\n      generateImageQuizOptions()\n    }\n  }\n  // For typing mode with quiz enabled, ensure options exist\n  if (practiceMode.value === 'typing' && typingQuizEnabled.value && currentShuffledCard.value) {\n    if (!typingQuizOptions.value || typingQuizOptions.value.length === 0) {\n      generateTypingQuizOptions()\n    }\n  }\n  // For listening mode with quiz enabled, ensure options exist\n  if (practiceMode.value === 'listening' && listeningQuizEnabled.value && currentShuffledCard.value) {\n    if (!listeningQuizOptions.value || listeningQuizOptions.value.length === 0) {\n      generateListeningQuizOptions()\n    }\n  }\n};\n\nconst toggleShuffle = () => {\n  // Update settings through the settings composable to ensure localStorage persistence\n  flashcardSettings.value.shuffleCards = !flashcardSettings.value.shuffleCards\n  \n  // If shuffle is enabled, create shuffled array\n  if (flashcardSettings.value.shuffleCards) {\n    shuffleFlashcards()\n  } else {\n    // Clear shuffled array when shuffle is disabled\n    shuffledFlashcards.value = []\n  }\n  \n  // Reset to first card after shuffle and clear state (order changed)\n  cardStateStorage.value = {}\n  currentIndex.value = 0\n  resetAndRestoreCard() // Will reset and generate new quiz options as there's no state\n}\n\n// Override navigation functions to work with shuffled cards\nconst enhancedNextCard = () => {\n  // Save current card state before navigation\n  saveCurrentCardState()\n  \n  // For pronunciation mode, record the answer just before proceeding.\n  if (practiceMode.value === 'pronunciation' && pronunciationAnswered.value) {\n    recordAnswer(pronunciationCorrect.value)\n    if (currentShuffledCard.value && activeSessionId.value) {\n      appendAnswer({\n        cardId: currentShuffledCard.value.id,\n        word: currentShuffledCard.value.word,\n        meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n        userAnswer: pronunciationResult.value,\n        correctAnswer: currentShuffledCard.value.word,\n        isCorrect: !!pronunciationCorrect.value,\n        mode: 'pronunciation',\n      })\n    }\n  }\n\n  if (currentIndex.value < currentFlashcards.value.length - 1) {\n    currentIndex.value++\n    resetAndRestoreCard()\n    // Resume timer when moving to next card\n    if (practiceStarted.value && practiceTimerRef.value) {\n      practiceTimerRef.value.nextCard()\n    }\n  } else {\n    handleSessionComplete()\n  }\n}\n\nconst enhancedPreviousCard = () => {\n  // Save current card state before navigation\n  saveCurrentCardState()\n  \n  if (currentIndex.value > 0) {\n    currentIndex.value--\n    resetAndRestoreCard()\n    // Pause timer when going back to review previous card (timer display remains visible)\n    if (practiceStarted.value && practiceTimerRef.value) {\n      practiceTimerRef.value.stopTimer()\n    }\n  }\n}\n\nconst enhancedMarkEasy = () => {\n  recordAnswer(true)\n  enhancedNextCard()\n}\n\nconst enhancedMarkDifficult = () => {\n  recordAnswer(false)\n  enhancedNextCard()\n}\n\n// Enhanced completion handling\nconst handleSessionComplete = () => {\n  completeSession()\n  const totalCards = currentFlashcards.value.length\n  const id = saveSessionToHistory(stats.value, totalCards, activeSessionId.value || undefined)\n  if (!activeSessionId.value) {\n    activeSessionId.value = id\n  }\n}\n\nconst handleRestartSession = () => {\n  restartSession() // Call the original function from the composable\n  practiceStarted.value = false\n  \n  // Clear all card state storage when restarting\n  cardStateStorage.value = {}\n  \n  // Reset modal store when restarting (will hide completion modal, show back to top, enable body scroll)\n  modalStore.setCompletionModal(false)\n  \n  // Re-shuffle cards if shuffle is enabled to get new random order\n  if (flashcardSettings.value.shuffleCards && baseFlashcards.value.length > 0) {\n    shuffleFlashcards()\n  }\n  \n  // Force reset without restoring state (new session)\n  resetAndRestoreCard()\n  \n  if (practiceTimerRef.value) {\n    practiceTimerRef.value.resetPractice()\n  }\n}\n\n// Handle completion modal go back - reset modal store and navigate\nconst handleCompletionGoBack = () => {\n  // Reset modal store first (hide completion modal, show back to top, enable body scroll)\n  modalStore.setCompletionModal(false)\n  // Then navigate back\n  goBack()\n}\n\n// Snake Game completion handler\nconst handleSnakeGameComplete = () => {\n  // Handle snake game completion similar to bubble shooter\n  // Ensure final word is recorded if missed due to race condition\n  const expectedCorrect = currentFlashcards.value.length\n  const actualCorrect = stats.value.correct\n  \n  if (actualCorrect < expectedCorrect) {\n    // Missing the last word due to race condition, record it\n    recordAnswer(true)\n  }\n  \n  // Complete the session to finalize stats before showing modal\n  handleSessionComplete()\n}\n\n// Snake Game food eaten handlers\nconst handleSnakeCorrectFoodEaten = (details?: {\n  word: string\n  meaningShort: string\n  position: { x: number; y: number }\n  snakeLength: number\n  gameScore: number\n  wordsCompleted: number\n  wrongEatenCount: number\n  snakeBody: { x: number; y: number }[]\n  direction: { x: number; y: number }\n  timelineFrames?: Array<{ body: { x: number; y: number }[]; direction: { x: number; y: number } }>\n}) => {\n  // Count as a correct answer in practice stats\n  console.log('[DEBUG] Snake correct food eaten, recording answer true')\n  console.log('[DEBUG] Stats before:', { correct: stats.value.correct, incorrect: stats.value.incorrect, total: stats.value.total })\n  recordAnswer(true)\n  console.log('[DEBUG] Stats after:', { correct: stats.value.correct, incorrect: stats.value.incorrect, total: stats.value.total })\n  \n  // Record detailed session history if details provided\n  if (details && activeSessionId.value) {\n    console.log('[DEBUG] FlashcardView - Recording snake correct food:', details)\n    console.log('[DEBUG] FlashcardView - Snake body to save:', details.snakeBody)\n    console.log('[DEBUG] FlashcardView - Snake direction to save:', details.direction)\n    \n    appendAnswer({\n      cardId: Date.now(), // Unique numeric ID for snake game food eaten\n      word: details.word,\n      meaningShort: details.meaningShort,\n      userAnswer: details.word, // Correct food eaten\n      correctAnswer: details.word,\n      isCorrect: true,\n      mode: 'snake-game',\n      extra: {\n        snakeGame: {\n          position: details.position,\n          wasCorrect: true,\n          foodType: 'primary', // Correct food is always primary target\n          snakeLength: details.snakeLength,\n          gameScore: details.gameScore,\n          wordsCompleted: details.wordsCompleted,\n          wrongEatenCount: details.wrongEatenCount,\n          snakeBody: details.snakeBody,\n          direction: details.direction,\n          timelineFrames: details.timelineFrames\n        }\n      }\n    })\n  }\n}\n\nconst handleSnakeWrongFoodEaten = (details?: {\n  word: string\n  meaningShort: string\n  position: { x: number; y: number }\n  snakeLength: number\n  gameScore: number\n  wordsCompleted: number\n  wrongEatenCount: number\n  snakeBody: { x: number; y: number }[]\n  direction: { x: number; y: number }\n  timelineFrames?: Array<{ body: { x: number; y: number }[]; direction: { x: number; y: number } }>\n}) => {\n  // Count as an incorrect answer in practice stats\n  recordAnswer(false)\n  \n  // Record detailed session history if details provided\n  if (details && activeSessionId.value) {\n    appendAnswer({\n      cardId: Date.now(), // Unique numeric ID for snake game food eaten\n      word: details.word,\n      meaningShort: details.meaningShort,\n      userAnswer: details.word, // Wrong food eaten\n      correctAnswer: '', // No specific correct answer for wrong food\n      isCorrect: false,\n      mode: 'snake-game',\n      extra: {\n        snakeGame: {\n          position: details.position,\n          wasCorrect: false,\n          foodType: 'secondary', // Wrong food is secondary/decoy\n          snakeLength: details.snakeLength,\n          gameScore: details.gameScore,\n          wordsCompleted: details.wordsCompleted,\n          wrongEatenCount: details.wrongEatenCount,\n          snakeBody: details.snakeBody,\n          direction: details.direction,\n          timelineFrames: details.timelineFrames\n        }\n      }\n    })\n  }\n}\n\n// Snake Game food eaten handler -> count as a correct answer in practice stats\nconst handleSnakeFoodEaten = () => {\n  recordAnswer(true)\n}\n\n// Auto flip functionality\nlet autoFlipTimer: number | null = null\n\nwatch([currentIndex, isFlipped], () => {\n  if (autoFlipTimer) {\n    clearTimeout(autoFlipTimer)\n  }\n  \n  if (flashcardSettings.value.autoFlip && !isFlipped.value) {\n    autoFlipTimer = setTimeout(() => {\n      isFlipped.value = true\n    }, 3000) as unknown as number\n  }\n})\n\n// Watch for practice mode changes\nwatch(practiceMode, () => {\n  // When practice mode changes, reset the card.\n  // No state will be restored because we are changing modes.\n  resetAndRestoreCard();\n  \n  // Ensure shuffle is applied after mode switch (e.g., Image mode)\n  // If shuffle is enabled but no shuffled list exists yet, generate it.\n  if (flashcardSettings.value.shuffleCards && shuffledFlashcards.value.length === 0) {\n    shuffleFlashcards()\n  }\n})\n\n// Save session to history when completed and stop timer\nwatch(showCompletionModal, (newValue) => {\n  if (newValue) {\n    // Stop the timer immediately when completion modal appears\n    if (practiceTimerRef.value) {\n      practiceTimerRef.value.stopTimer()\n    }\n    // Update modal store to hide back to top and control body scroll\n    modalStore.setCompletionModal(true)\n  } else {\n    // Reset modal store when completion modal is closed\n    modalStore.setCompletionModal(false)\n  }\n})\n\n// Prevent body scroll when history modal is open\nwatch(showHistory, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open')\n  } else {\n    document.body.classList.remove('modal-open')\n  }\n})\n\n// Prevent body scroll when session detail modal is open\nwatch(showSessionDetail, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open')\n  } else {\n    document.body.classList.remove('modal-open')\n  }\n})\n\n// Prevent body scroll when settings modal is open\nwatch(showSettingsDialog, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open')\n  } else {\n    document.body.classList.remove('modal-open')\n  }\n})\n\n// Watch date filter state changes and save to localStorage\nwatch(dateFilterEnabled, () => {\n  saveDateFilterState()\n})\n\nwatch(selectedDate, () => {\n  saveDateFilterState()\n})\n\n// Watch baseFlashcards changes and re-shuffle if shuffle is enabled\nwatch(baseFlashcards, (newCards) => {\n  // If shuffle is enabled and we have cards, re-shuffle them\n  if (flashcardSettings.value.shuffleCards && newCards.length > 0) {\n    shuffleFlashcards(newCards)\n    // Reset to first card after re-shuffle\n    currentIndex.value = 0\n    resetAndRestoreCard()\n  }\n  // If no cards and shuffle was enabled, clear shuffled array\n  else if (flashcardSettings.value.shuffleCards && newCards.length === 0) {\n    shuffledFlashcards.value = []\n    currentIndex.value = 0\n  }\n}, { immediate: false })\n\n// Event handlers for toggle options  \nconst onToggleBubbleShooterVietnameseMode = (enabled: boolean) => {\n  bubbleShooterVietnameseMode.value = enabled\n}\n\n\n// Initialize on mount\nonMounted(() => {\n  console.log('FlashcardView mounted')\n  \n  // Initialize stats\n  initializeStats(currentFlashcards.value.length)\n  \n  // Initialize quiz options if in quiz mode\n  if (practiceMode.value === 'quiz') {\n    generateQuizOptions()\n  }\n  \n  // Initialize shuffle if enabled\n  if (flashcardSettings.value.shuffleCards) {\n    shuffleFlashcards()\n  }\n  \n  // Setup navigation guard for exit warning\n  setupNavigationGuard()\n  window.addEventListener('beforeunload', handleBeforeUnload)\n})\n\n// Cleanup on unmount\nonUnmounted(() => {\n  document.body.classList.remove('modal-open')\n  cleanup()\n  \n  // Remove navigation guard and event listeners\n  removeNavigationGuard()\n  window.removeEventListener('beforeunload', handleBeforeUnload)\n})\n</script>\n\n<style scoped>\n.perspective-1000 {\n  perspective: 1000px;\n}\n\n.flashcard {\n  transform-style: preserve-3d;\n  transition: transform 0.6s;\n}\n\n.flashcard.flipped {\n  transform: rotateY(180deg);\n}\n\n.flashcard-face {\n  backface-visibility: hidden;\n}\n\n.flashcard-back {\n  transform: rotateY(180deg);\n}\n</style>\n\n<style>\n/* Global styles for modal */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 50;\n  overflow: hidden;\n}\n\nbody.modal-open {\n  overflow: hidden !important;\n}\n</style>\n","<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 dark:from-gray-900 dark:to-[#0a0a0a]\">\r\n    <!-- Header -->\r\n    <QuizHeader \r\n      :time-remaining=\"timeRemaining\"\r\n      :score=\"score\"\r\n      @go-back=\"goBack\"\r\n    />\r\n\r\n    <!-- Progress Bar -->\r\n    <QuizProgress \r\n      :current-question-index=\"currentQuestionIndex\"\r\n      :total-questions=\"questions.length\"\r\n      :progress-percentage=\"progressPercentage\"\r\n    />\r\n\r\n    <!-- Quiz Content -->\r\n    <div class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n      <!-- Quiz Setup -->\r\n      <QuizSetup \r\n        v-if=\"!quizStarted\"\r\n        :settings=\"quizSettings\"\r\n        :available-levels=\"availableLevels\"\r\n        @start-quiz=\"startQuiz\"\r\n      />\r\n\r\n      <!-- Quiz Questions -->\r\n      <QuizQuestion\r\n        v-else-if=\"!quizCompleted\"\r\n        :question=\"currentQuestion\"\r\n        :selected-answer=\"selectedAnswer\"\r\n        :is-first-question=\"currentQuestionIndex === 0\"\r\n        :is-last-question=\"currentQuestionIndex === questions.length - 1\"\r\n        @select-answer=\"selectAnswer\"\r\n        @previous-question=\"previousQuestion\"\r\n        @next-question=\"nextQuestion\"\r\n      />\r\n\r\n      <!-- Quiz Results -->\r\n      <QuizResults\r\n        v-else\r\n        :score=\"score\"\r\n        :correct-answers=\"correctAnswers\"\r\n        :total-questions=\"questions.length\"\r\n        :accuracy=\"Math.round(accuracy)\"\r\n        :questions=\"questions\"\r\n        :user-answers=\"userAnswers\"\r\n        @restart-quiz=\"restartQuiz\"\r\n        @go-back=\"goBack\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, onUnmounted, defineAsyncComponent, watch } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport { loadComponentSafely } from '../../utils/import-helper'\r\nimport { useVocabularyStore } from '../../composables/useVocabularyStore'\r\nimport type { Vocabulary } from '../../composables/useVocabularyStore'\r\n\r\n// Sử dụng defineAsyncComponent để import components an toàn\r\nconst QuizHeader = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizHeader.vue'))\r\n)\r\nconst QuizProgress = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizProgress.vue'))\r\n)\r\nconst QuizSetup = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizSetup.vue'))\r\n)\r\nconst QuizQuestion = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizQuestion.vue'))\r\n)\r\nconst QuizResults = defineAsyncComponent(\r\n  loadComponentSafely(() => import('./components/QuizResults.vue'))\r\n)\r\n\r\nconst router = useRouter()\r\nconst vocabularyStore = useVocabularyStore()\r\n\r\n// Data\r\nconst quizStarted = ref(false)\r\nconst quizCompleted = ref(false)\r\nconst currentQuestionIndex = ref(0)\r\nconst selectedAnswer = ref<number | null>(null)\r\nconst userAnswers = ref<number[]>([])\r\nconst score = ref(0)\r\nconst timeRemaining = ref(0)\r\nlet timer: number | null = null\r\n\r\nconst quizSettings = ref({\r\n  type: 'vocabulary',\r\n  level: '',\r\n  questionCount: '10',\r\n  timeLimit: '10'\r\n})\r\n\r\n// Question interface\r\ninterface Question {\r\n  id: number\r\n  type: string\r\n  level: string\r\n  question: string\r\n  options: string[]\r\n  correctAnswer: number\r\n  explanation: string\r\n}\r\n\r\nconst questions = ref<Question[]>([])\r\n\r\n// Function to generate questions from vocabulary data\r\nconst generateQuestionsFromVocabulary = (vocabularies: Vocabulary[]): Question[] => {\r\n  console.log('Generating questions from', vocabularies.length, 'vocabularies')\r\n  if (vocabularies.length === 0) return []\r\n  \r\n  const vocabQuestions = vocabularies.map((vocab, index) => {\r\n    // Create incorrect options by mixing meanings from other vocabularies\r\n    const otherVocabs = vocabularies.filter(v => v.id !== vocab.id)\r\n    let incorrectOptions: string[] = []\r\n    \r\n    if (otherVocabs.length > 0) {\r\n      incorrectOptions = otherVocabs\r\n        .slice(0, 3)\r\n        .map(v => v.meaning.split(' - ')[0]) // Take first part of meaning\r\n    }\r\n    \r\n    // If we don't have enough other vocabularies, add some generic options\r\n    const genericOptions = ['Không có nghĩa', 'Từ khác', 'Khái niệm khác', 'Nghĩa khác', 'Ý nghĩa khác']\r\n    while (incorrectOptions.length < 3) {\r\n      const randomGeneric = genericOptions[Math.floor(Math.random() * genericOptions.length)]\r\n      if (!incorrectOptions.includes(randomGeneric)) {\r\n        incorrectOptions.push(randomGeneric)\r\n      }\r\n    }\r\n    \r\n    const correctMeaning = vocab.meaning.split(' - ')[0] // Take first part of meaning\r\n    const allOptions = [correctMeaning, ...incorrectOptions.slice(0, 3)]\r\n    \r\n    // Shuffle options\r\n    const shuffledOptions = allOptions.sort(() => Math.random() - 0.5)\r\n    const correctAnswer = shuffledOptions.indexOf(correctMeaning)\r\n    \r\n    return {\r\n      id: vocab.id,\r\n      type: 'vocabulary',\r\n      level: vocab.level,\r\n      question: `What does \"${vocab.word}\" mean?`,\r\n      options: shuffledOptions,\r\n      correctAnswer,\r\n      explanation: `\"${vocab.word}\" có nghĩa là: ${vocab.meaning}`\r\n    }\r\n  })\r\n  \r\n  // Shuffle questions and limit to quiz settings\r\n  return vocabQuestions.sort(() => Math.random() - 0.5)\r\n}\r\n\r\n// Function to update questions based on current vocabulary data\r\nconst updateQuestions = () => {\r\n  const vocabularies = vocabularyStore.allVocabularies.value\r\n  console.log('Updating questions from', vocabularies.length, 'total vocabularies')\r\n  \r\n  const filteredVocabs = vocabularies.filter(vocab => {\r\n    // Filter based on quiz settings if needed\r\n    if (quizSettings.value.level && vocab.level !== quizSettings.value.level) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  \r\n  console.log('Filtered to', filteredVocabs.length, 'vocabularies for quiz')\r\n  \r\n  const generatedQuestions = generateQuestionsFromVocabulary(filteredVocabs)\r\n  const questionCount = parseInt(quizSettings.value.questionCount)\r\n  questions.value = generatedQuestions.slice(0, questionCount)\r\n  \r\n  console.log('Generated', questions.value.length, 'questions')\r\n}\r\n\r\n// Get available levels from vocabulary store\r\nconst availableLevels = computed(() => {\r\n  return vocabularyStore.getLevels.value\r\n})\r\n\r\n// Computed\r\nconst currentQuestion = computed(() => questions.value[currentQuestionIndex.value] || {})\r\nconst progressPercentage = computed(() => ((currentQuestionIndex.value + 1) / questions.value.length) * 100)\r\nconst correctAnswers = computed(() => {\r\n  return userAnswers.value.filter((answer, index) => answer === questions.value[index].correctAnswer).length\r\n})\r\nconst accuracy = computed(() => (correctAnswers.value / questions.value.length) * 100)\r\n\r\n// Methods\r\nconst startQuiz = (settings?: any) => {\r\n  // Update settings if provided\r\n  if (settings) {\r\n    quizSettings.value = { ...settings }\r\n  }\r\n  // Ensure we have questions before starting\r\n  if (questions.value.length === 0) {\r\n    updateQuestions()\r\n  }\r\n  \r\n  // If still no questions, show alert\r\n  if (questions.value.length === 0) {\r\n    alert('Không có từ vựng nào để luyện tập. Vui lòng thêm từ vựng trước!')\r\n    return\r\n  }\r\n  \r\n  quizStarted.value = true\r\n  \r\n  // Set timer if time limit is specified\r\n  if (quizSettings.value.timeLimit !== '0') {\r\n    timeRemaining.value = parseInt(quizSettings.value.timeLimit) * 60\r\n    startTimer()\r\n  }\r\n  \r\n  // Initialize user answers array\r\n  userAnswers.value = new Array(questions.value.length).fill(-1)\r\n}\r\n\r\nconst startTimer = () => {\r\n  timer = setInterval(() => {\r\n    timeRemaining.value--\r\n    if (timeRemaining.value <= 0) {\r\n      completeQuiz()\r\n    }\r\n  }, 1000)\r\n}\r\n\r\nconst selectAnswer = (index: number) => {\r\n  selectedAnswer.value = index\r\n}\r\n\r\nconst nextQuestion = () => {\r\n  if (selectedAnswer.value !== null) {\r\n    userAnswers.value[currentQuestionIndex.value] = selectedAnswer.value\r\n    \r\n    if (currentQuestionIndex.value === questions.value.length - 1) {\r\n      completeQuiz()\r\n    } else {\r\n      currentQuestionIndex.value++\r\n      selectedAnswer.value = userAnswers.value[currentQuestionIndex.value] !== -1 \r\n        ? userAnswers.value[currentQuestionIndex.value] \r\n        : null\r\n    }\r\n  }\r\n}\r\n\r\nconst previousQuestion = () => {\r\n  if (currentQuestionIndex.value > 0) {\r\n    userAnswers.value[currentQuestionIndex.value] = selectedAnswer.value || -1\r\n    currentQuestionIndex.value--\r\n    selectedAnswer.value = userAnswers.value[currentQuestionIndex.value] !== -1 \r\n      ? userAnswers.value[currentQuestionIndex.value] \r\n      : null\r\n  }\r\n}\r\n\r\nconst completeQuiz = () => {\r\n  if (selectedAnswer.value !== null) {\r\n    userAnswers.value[currentQuestionIndex.value] = selectedAnswer.value\r\n  }\r\n  \r\n  // Calculate score\r\n  score.value = correctAnswers.value * 10\r\n  \r\n  quizCompleted.value = true\r\n  \r\n  if (timer) {\r\n    clearInterval(timer)\r\n  }\r\n}\r\n\r\nconst restartQuiz = () => {\r\n  quizStarted.value = false\r\n  quizCompleted.value = false\r\n  currentQuestionIndex.value = 0\r\n  selectedAnswer.value = null\r\n  userAnswers.value = []\r\n  score.value = 0\r\n  timeRemaining.value = 0\r\n  \r\n  // Update questions to get fresh data\r\n  updateQuestions()\r\n  \r\n  if (timer) {\r\n    clearInterval(timer)\r\n  }\r\n}\r\n\r\nconst goBack = () => {\r\n  router.back()\r\n}\r\n\r\nconst formatTime = (seconds: number) => {\r\n  const minutes = Math.floor(seconds / 60)\r\n  const remainingSeconds = seconds % 60\r\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\r\n}\r\n\r\nconst getLevelColor = (level: string) => {\r\n  switch (level) {\r\n    case 'beginner': return 'bg-green-100 text-green-800'\r\n    case 'intermediate': return 'bg-yellow-100 text-yellow-800'\r\n    case 'advanced': return 'bg-red-100 text-red-800'\r\n    default: return 'bg-gray-100 text-gray-800'\r\n  }\r\n}\r\n\r\nconst getLevelText = (level: string) => {\r\n  switch (level) {\r\n    case 'beginner': return 'Cơ bản'\r\n    case 'intermediate': return 'Trung cấp'\r\n    case 'advanced': return 'Nâng cao'\r\n    default: return level\r\n  }\r\n}\r\n\r\nonMounted(async () => {\r\n  // Initialize vocabulary store\r\n  const isReady = vocabularyStore.initializeStore()\r\n  \r\n  // Wait for store to be ready\r\n  if (!isReady.value) {\r\n    await new Promise(resolve => \r\n      watch(isReady, (ready) => {\r\n        if (ready) resolve(true)\r\n      }, { immediate: true })\r\n    )\r\n  }\r\n  \r\n  // Load quiz questions based on settings\r\n  updateQuestions()\r\n  \r\n  console.log('Quiz view mounted', vocabularyStore.allVocabularies.value.length, 'vocabularies loaded')\r\n})\r\n\r\n// Watch for store ready state and vocabulary changes\r\nwatch(\r\n  () => vocabularyStore.isStoreReady.value,\r\n  (isReady) => {\r\n    if (isReady) {\r\n      updateQuestions()\r\n    }\r\n  },\r\n  { immediate: true }\r\n)\r\n\r\n// Watch for changes in vocabulary store and update questions\r\nwatch(\r\n  () => vocabularyStore.allVocabularies.value,\r\n  () => {\r\n    if (vocabularyStore.isStoreReady.value) {\r\n      updateQuestions()\r\n    }\r\n  },\r\n  { deep: true }\r\n)\r\n\r\n// Watch for changes in quiz settings and update questions\r\nwatch(\r\n  () => quizSettings.value,\r\n  () => {\r\n    updateQuestions()\r\n  },\r\n  { deep: true }\r\n)\r\n\r\nonUnmounted(() => {\r\n  if (timer) {\r\n    clearInterval(timer)\r\n  }\r\n})\r\n</script>\r\n","import { defineStore } from 'pinia'\r\nimport { ref, watch } from 'vue'\r\n\r\nexport const useThemeStore = defineStore('theme', () => {\r\n  // State\r\n  const isDarkMode = ref(false)\r\n  \r\n  // Actions\r\n  const toggleTheme = () => {\r\n    isDarkMode.value = !isDarkMode.value\r\n    applyTheme()\r\n    saveThemeToStorage()\r\n  }\r\n  \r\n  const setTheme = (dark: boolean) => {\r\n    isDarkMode.value = dark\r\n    applyTheme()\r\n    saveThemeToStorage()\r\n  }\r\n  \r\n  const applyTheme = () => {\r\n    const html = document.documentElement\r\n    \r\n    if (isDarkMode.value) {\r\n      html.classList.add('dark')\r\n      html.style.colorScheme = 'dark'\r\n    } else {\r\n      html.classList.remove('dark')\r\n      html.style.colorScheme = 'light'\r\n    }\r\n  }\r\n  \r\n  const saveThemeToStorage = () => {\r\n    localStorage.setItem('theme', isDarkMode.value ? 'dark' : 'light')\r\n  }\r\n  \r\n  const loadThemeFromStorage = () => {\r\n    const savedTheme = localStorage.getItem('theme')\r\n    \r\n    if (savedTheme) {\r\n      isDarkMode.value = savedTheme === 'dark'\r\n    } else {\r\n      // Detect system preference\r\n      isDarkMode.value = window.matchMedia('(prefers-color-scheme: dark)').matches\r\n    }\r\n    \r\n    applyTheme()\r\n  }\r\n  \r\n  const initTheme = () => {\r\n    loadThemeFromStorage()\r\n    \r\n    // Listen for system theme changes\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\r\n    mediaQuery.addEventListener('change', (e) => {\r\n      if (!localStorage.getItem('theme')) {\r\n        isDarkMode.value = e.matches\r\n        applyTheme()\r\n      }\r\n    })\r\n  }\r\n  \r\n  // Getters\r\n  const currentTheme = () => isDarkMode.value ? 'dark' : 'light'\r\n  const themeIcon = () => isDarkMode.value ? '🌙' : '☀️'\r\n  const themeLabel = () => isDarkMode.value ? 'Chế độ tối' : 'Chế độ sáng'\r\n  \r\n  return {\r\n    // State\r\n    isDarkMode,\r\n    \r\n    // Actions\r\n    toggleTheme,\r\n    setTheme,\r\n    initTheme,\r\n    \r\n    // Getters\r\n    currentTheme,\r\n    themeIcon,\r\n    themeLabel\r\n  }\r\n})\r\n","<template>\r\n  <div class=\"max-w-4xl mx-auto space-y-8\">\r\n    <!-- Header -->\r\n    <div class=\"text-center\">\r\n      <h1 class=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\r\n        Tailwind CSS & Dark Mode Test\r\n      </h1>\r\n      <p class=\"text-lg text-gray-600 dark:text-gray-300\">\r\n        Test các component với chế độ sáng/tối\r\n      </p>\r\n    </div>\r\n\r\n    <!-- Cards Grid -->\r\n    <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n      <!-- Card 1 -->\r\n      <div class=\"bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden border border-gray-200 dark:border-gray-700\">\r\n        <div class=\"p-6\">\r\n          <div class=\"uppercase tracking-wide text-sm text-indigo-500 dark:text-indigo-400 font-semibold\">\r\n            Tailwind CSS\r\n          </div>\r\n          <h2 class=\"block mt-1 text-lg leading-tight font-medium text-gray-900 dark:text-white\">\r\n            Dark Mode Support\r\n          </h2>\r\n          <p class=\"mt-2 text-gray-500 dark:text-gray-400\">\r\n            Tailwind CSS đã được cấu hình với dark mode sử dụng màu đen.\r\n          </p>\r\n          <div class=\"mt-4 space-x-2\">\r\n            <button class=\"bg-blue-500 hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors\">\r\n              Primary Button\r\n            </button>\r\n            <button class=\"bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-900 dark:text-white font-medium py-2 px-4 rounded-lg transition-colors\">\r\n              Secondary Button\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Card 2 -->\r\n      <div class=\"bg-white dark:bg-black rounded-xl shadow-md overflow-hidden border border-gray-200 dark:border-gray-700\">\r\n        <div class=\"p-6\">\r\n          <div class=\"uppercase tracking-wide text-sm text-green-500 dark:text-green-400 font-semibold\">\r\n            Pinia Store\r\n          </div>\r\n          <h2 class=\"block mt-1 text-lg leading-tight font-medium text-gray-900 dark:text-white\">\r\n            Theme Management\r\n          </h2>\r\n          <p class=\"mt-2 text-gray-500 dark:text-gray-400\">\r\n            Sử dụng Pinia để quản lý state của theme.\r\n          </p>\r\n          <div class=\"mt-4\">\r\n            <div class=\"flex items-center space-x-2\">\r\n              <span class=\"text-sm text-gray-600 dark:text-gray-300\">Current theme:</span>\r\n              <span class=\"px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs font-medium rounded-full\">\r\n                {{ themeStore.currentTheme() }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Form Example -->\r\n    <div class=\"bg-white dark:bg-black rounded-xl shadow-md p-6 border border-gray-200 dark:border-gray-700\">\r\n      <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Form Elements</h3>\r\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div>\r\n          <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n            Text Input\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter text...\"\r\n            class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 transition-colors\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label class=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-2\">\r\n            Select\r\n          </label>\r\n          <select class=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-border rounded-md bg-white dark:bg-dark-surface text-gray-900 dark:text-dark-text-primary focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 transition-colors\">\r\n            <option>Option 1</option>\r\n            <option>Option 2</option>\r\n            <option>Option 3</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Color Palette -->\r\n    <div class=\"bg-white dark:bg-black rounded-xl shadow-md p-6 border border-gray-200 dark:border-gray-700\">\r\n      <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Color Palette</h3>\r\n      <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n        <div class=\"text-center\">\r\n          <div class=\"w-16 h-16 bg-blue-500 dark:bg-blue-600 rounded-lg mx-auto mb-2\"></div>\r\n          <span class=\"text-sm text-gray-600 dark:text-gray-300\">Blue</span>\r\n        </div>\r\n        <div class=\"text-center\">\r\n          <div class=\"w-16 h-16 bg-green-500 dark:bg-green-600 rounded-lg mx-auto mb-2\"></div>\r\n          <span class=\"text-sm text-gray-600 dark:text-gray-300\">Green</span>\r\n        </div>\r\n        <div class=\"text-center\">\r\n          <div class=\"w-16 h-16 bg-red-500 dark:bg-red-600 rounded-lg mx-auto mb-2\"></div>\r\n          <span class=\"text-sm text-gray-600 dark:text-gray-300\">Red</span>\r\n        </div>\r\n        <div class=\"text-center\">\r\n          <div class=\"w-16 h-16 bg-purple-500 dark:bg-purple-600 rounded-lg mx-auto mb-2\"></div>\r\n          <span class=\"text-sm text-gray-600 dark:text-gray-300\">Purple</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useThemeStore } from '../stores/theme'\r\n\r\n// Component test cho Tailwind CSS và Dark Mode\r\nconst themeStore = useThemeStore()\r\n</script>\r\n","<template>\r\n  <div class=\"min-h-screen bg-gray-50 dark:bg-black flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\r\n    <div class=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n      <div class=\"text-center\">\r\n        <div class=\"mx-auto h-24 w-24 flex items-center justify-center rounded-full bg-red-100 dark:bg-red-900\">\r\n          <svg class=\"h-12 w-12 text-red-600 dark:text-red-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"/>\r\n          </svg>\r\n        </div>\r\n        \r\n        <h1 class=\"mt-6 text-6xl font-bold text-gray-900 dark:text-white\">404</h1>\r\n        <h2 class=\"mt-4 text-3xl font-bold text-gray-900 dark:text-white\">Không tìm thấy trang</h2>\r\n        <p class=\"mt-2 text-lg text-gray-600 dark:text-gray-300\">\r\n          Xin lỗi, chúng tôi không thể tìm thấy trang bạn đang tìm kiếm.\r\n        </p>\r\n        \r\n        <div class=\"mt-8 space-y-4\">\r\n          <div class=\"flex justify-center space-x-4\">\r\n            <button \r\n              @click=\"goBack\" \r\n              class=\"bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\"\r\n            >\r\n              <svg class=\"w-5 h-5 inline mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                <path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\"/>\r\n              </svg>\r\n              Quay lại\r\n            </button>\r\n            \r\n            <button \r\n              @click=\"goHome\" \r\n              class=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\"\r\n            >\r\n              <svg class=\"w-5 h-5 inline mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"/>\r\n              </svg>\r\n              Về trang chủ\r\n            </button>\r\n          </div>\r\n          \r\n          <div class=\"text-center\">\r\n            <p class=\"text-sm text-gray-500 dark:text-gray-400\">\r\n              Hoặc thử các liên kết hữu ích dưới đây:\r\n            </p>\r\n            <div class=\"mt-4 flex justify-center space-x-6\">\r\n              <router-link to=\"/vocabulary\" class=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-medium\">\r\n                Từ vựng\r\n              </router-link>\r\n              <router-link to=\"/grammar\" class=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-medium\">\r\n                Ngữ pháp\r\n              </router-link>\r\n              <router-link to=\"/practice/flashcard\" class=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-medium\">\r\n                Luyện tập\r\n              </router-link>\r\n              <router-link to=\"/test\" class=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-medium\">\r\n                Test Tailwind\r\n              </router-link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useRouter } from 'vue-router'\r\n\r\nconst router = useRouter()\r\n\r\nconst goBack = () => {\r\n  router.back()\r\n}\r\n\r\nconst goHome = () => {\r\n  router.push('/dashboard')\r\n}\r\n</script>\r\n","import { createRouter, createWebHashHistory } from 'vue-router'\r\n\r\n// Static imports\r\nimport DashboardView from '../views/dashboard/DashboardView.vue'\r\nimport VocabularyListView from '../views/vocabulary/VocabularyListView.vue'\r\nimport GrammarListView from '../views/grammar/GrammarListView.vue'\r\nimport GrammarDetailView from '../views/grammar/GrammarDetailView.vue'\r\nimport GrammarPracticeView from '../views/grammar/GrammarPracticeView.vue'\r\nimport FlashcardView from '../views/practice/FlashcardView.vue'\r\nimport QuizView from '../views/practice/QuizView.vue'\r\nimport TailwindTest from '../components/TailwindTest.vue'\r\nimport NotFoundView from '../views/NotFoundView.vue'\r\n\r\nconst router = createRouter({\r\n  history: createWebHashHistory(import.meta.env.BASE_URL),\r\n  routes: [\r\n    {\r\n      path: '/',\r\n      redirect: '/dashboard'\r\n    },\r\n    {\r\n      path: '/dashboard',\r\n      name: 'dashboard',\r\n      component: DashboardView,\r\n    },\r\n    {\r\n      path: '/vocabulary',\r\n      name: 'vocabulary-list',\r\n      component: VocabularyListView,\r\n    },\r\n    {\r\n      path: '/grammar',\r\n      name: 'grammar-list',\r\n      component: GrammarListView,\r\n    },\r\n    {\r\n      path: '/grammar/:id',\r\n      name: 'grammar-detail',\r\n      component: GrammarDetailView,\r\n    },\r\n    {\r\n      path: '/grammar/:id/practice',\r\n      name: 'grammar-practice',\r\n      component: GrammarPracticeView,\r\n    },\r\n\r\n    {\r\n      path: '/practice/flashcard',\r\n      name: 'practice-flashcard',\r\n      component: FlashcardView,\r\n    },\r\n    {\r\n      path: '/practice/quiz',\r\n      name: 'practice-quiz',\r\n      component: QuizView,\r\n    },\r\n    {\r\n      path: '/test',\r\n      name: 'tailwind-test',\r\n      component: TailwindTest,\r\n    },\r\n    {\r\n      path: '/:pathMatch(.*)*',\r\n      name: 'NotFound',\r\n      component: NotFoundView\r\n    }\r\n  ],\r\n})\r\n\r\n// Navigation Guards (removed authentication checks)\r\n// router.beforeEach((to, _from, next) => {\r\n//   next()\r\n// })\r\n\r\nexport default router\r\n","import { createI18n } from 'vue-i18n'\nimport type { I18n } from 'vue-i18n'\nimport en from './locales/en.json'\nimport vi from './locales/vi.json'\nimport ko from './locales/ko.json'\n\n// Safe locale getter with fallback\nfunction getInitialLocale(): 'en' | 'vi' | 'ko' {\n  try {\n    const savedLocale = localStorage.getItem('locale')\n    return (savedLocale === 'en' || savedLocale === 'vi' || savedLocale === 'ko') ? savedLocale as 'en' | 'vi' | 'ko' : 'vi'\n  } catch (error) {\n    console.warn('localStorage not available, using default locale:', error)\n    return 'vi'\n  }\n}\n\nconst i18n: I18n = createI18n({\n  legacy: false,\n  locale: getInitialLocale(),\n  fallbackLocale: 'en',\n  globalInjection: true,\n  missingWarn: false,\n  fallbackWarn: false,\n  silentTranslationWarn: true,\n  silentFallbackWarn: true,\n  messages: {\n    en,\n    vi,\n    ko\n  }\n})\n\nexport default i18n\n\n// Utility function to change locale\nexport function setLocale(locale: 'en' | 'vi' | 'ko') {\n  // In vue-i18n v9 with legacy: false, locale is a ref\n  if (typeof i18n.global.locale === 'object' && 'value' in i18n.global.locale) {\n    i18n.global.locale.value = locale\n  } else {\n    i18n.global.locale = locale\n  }\n  try {\n    localStorage.setItem('locale', locale)\n  } catch (error) {\n    console.warn('Could not save locale to localStorage:', error)\n  }\n  document.querySelector('html')?.setAttribute('lang', locale)\n}\n\n// Utility function to get current locale\nexport function getLocale(): 'en' | 'vi' | 'ko' {\n  // Check if locale is a ref or plain value\n  const locale = typeof i18n.global.locale === 'object' && 'value' in i18n.global.locale\n    ? i18n.global.locale.value\n    : i18n.global.locale\n  return locale as 'en' | 'vi' | 'ko'\n}\n\n// Utility function to check if current locale is English\nexport function isEnglish(): boolean {\n  const locale = typeof i18n.global.locale === 'object' && 'value' in i18n.global.locale\n    ? i18n.global.locale.value\n    : i18n.global.locale\n  return locale === 'en'\n}\n\n// Utility function to toggle locale (cycle en -> vi -> ko)\nexport function toggleLocale(): 'en' | 'vi' | 'ko' {\n  const currentLocale = getLocale()\n  const order: Array<'en' | 'vi' | 'ko'> = ['en', 'vi', 'ko']\n  const idx = order.indexOf(currentLocale)\n  const newLocale = order[(idx + 1) % order.length]\n  setLocale(newLocale)\n  return newLocale\n}","import './style.css'\r\nimport './assets/main.css'\r\n\r\nimport { createApp } from 'vue'\r\nimport { createPinia } from 'pinia'\r\nimport Toast, { type PluginOptions } from 'vue-toastification'\r\nimport 'vue-toastification/dist/index.css'\r\n\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport { useThemeStore } from './stores/theme'\r\nimport i18n from './i18n'\r\n\r\nconst app = createApp(App)\r\nconst pinia = createPinia()\r\n\r\napp.use(pinia)\r\napp.use(router)\r\napp.use(i18n)\r\n\r\nconst options: PluginOptions = {\r\n  transition: 'Vue-Toastification__bounce',\r\n  maxToasts: 5,\r\n  newestOnTop: true,\r\n  filterBeforeCreate: (toast, toasts) => {\r\n    if (toasts.filter(t => t.content === toast.content).length !== 0) {\r\n      return false\r\n    }\r\n    return toast\r\n  },\r\n  bodyClassName: ['font-sans', 'text-sm'],\r\n  toastClassName: ['custom-toast'],\r\n  closeButtonClassName: 'dark:text-white dark:hover:text-gray-200'\r\n}\r\n\r\napp.use(Toast, options)\r\n\r\n// Initialize theme after Pinia is set up\r\nconst themeStore = useThemeStore()\r\nthemeStore.initTheme()\r\n\r\napp.mount('#app')\r\n"],"file":"assets/index-D3wsZHNF.js"}