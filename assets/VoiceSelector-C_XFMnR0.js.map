{"version":3,"mappings":"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","names":["_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_unref","_normalizeClass","_createBlock","_Teleport","_Fragment","_renderList","_withModifiers","showVoiceInfo"],"ignoreList":[],"sources":["../../src/components/VoiceSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-3 md:space-x-4 lg:space-x-4\">\r\n    <span class=\"text-sm md:text-sm lg:text-base font-medium text-gray-700 dark:text-gray-300\">\r\n      {{ t('voice.selector.title', 'Voice') }}\r\n    </span>\r\n    \r\n    <!-- Voice Type Dropdown -->\r\n    <div class=\"relative w-full sm:w-auto\" @click.stop ref=\"dropdownContainer\">\r\n      <button\r\n        @click=\"showDropdown = !showDropdown\"\r\n        ref=\"dropdownButton\"\r\n        class=\"flex w-full min-w-[240px] sm:min-w-[260px] md:min-w-[280px] lg:min-w-[300px] items-center justify-between px-3 py-2 md:px-3 md:py-2 lg:px-4 lg:py-2.5 bg-white dark:bg-[#0f0f0f] border border-gray-300 dark:border-gray-700 rounded-lg text-sm md:text-sm lg:text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-[#0a0a0a] transition-colors\"\r\n      >\r\n        <div class=\"flex items-center space-x-2\">\r\n          <span class=\"text-sm md:text-base lg:text-lg\">{{ currentVoiceOption?.icon }}</span>\r\n          <span class=\"truncate\">{{ currentVoiceOption?.label }}</span>\r\n        </div>\r\n        <svg class=\"w-4 h-4 md:w-4 md:h-4 lg:w-5 lg:h-5 flex-shrink-0\" :class=\"{ 'rotate-180': showDropdown }\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\" />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n    \r\n    <!-- Dropdown Menu -->\r\n    <Teleport to=\"body\">\r\n      <div \r\n        v-if=\"showDropdown\"\r\n        ref=\"dropdownMenu\"\r\n        :style=\"dropdownStyle\"\r\n        class=\"bg-white dark:bg-[#0f0f0f] border border-gray-300 dark:border-gray-700 rounded-lg shadow-lg max-h-60 overflow-hidden z-[9998] min-w-[240px] sm:min-w-[260px] md:min-w-[280px] lg:min-w-[300px]\"\r\n      >\r\n        <div class=\"overflow-y-auto max-h-60\">\r\n        <div\r\n          v-for=\"option in voiceOptions\"\r\n          :key=\"option.value\"\r\n          @click=\"selectVoiceOption(option)\"\r\n          :class=\"[\r\n            'flex items-center justify-between gap-2 px-3 py-2 md:px-3 md:py-2 lg:px-4 lg:py-2.5 text-left text-sm md:text-sm lg:text-base transition-colors cursor-pointer',\r\n            currentVoiceType === option.value\r\n              ? 'bg-blue-50 dark:bg-[#2d3436] text-blue-600 dark:text-blue-400'\r\n              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800'\r\n          ]\"\r\n        >\r\n          <div class=\"flex items-center space-x-2 min-w-0 flex-1\">\r\n          <span class=\"text-sm md:text-base lg:text-lg flex-shrink-0\">{{ option.icon }}</span>\r\n          <span class=\"truncate flex-1\">{{ option.label }}</span>\r\n          </div>\r\n          <div class=\"flex items-center space-x-1 flex-shrink-0\">\r\n            <svg v-if=\"currentVoiceType === option.value\" class=\"inline-block w-4 h-4 md:w-4 md:h-4 lg:w-5 lg:h-5 text-blue-600 dark:text-blue-400 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n            <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\" />\r\n          </svg>\r\n            <button @click.stop=\"openVoiceSettings(option)\" class=\"inline-block p-1 md:p-1 lg:p-1.5 rounded-full hover:bg-gray-200 dark:hover:bg-gray-500 flex-shrink-0\">\r\n              <svg class=\"inline-block w-3 h-3 sm:w-4 sm:h-4 md:w-4 md:h-4 lg:w-4 lg:h-4 text-gray-500 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path></svg>\r\n        </button>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </Teleport>\r\n    \r\n    <!-- Voice info tooltip -->\r\n    <div \r\n      v-if=\"showVoiceInfo && currentVoiceInfo\"\r\n      class=\"relative\"\r\n      @mouseenter=\"showTooltip = true\"\r\n      @mouseleave=\"showTooltip = false\"\r\n    >\r\n      <button\r\n        class=\"p-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 transition-colors\"\r\n      >\r\n        <svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n          <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"/>\r\n        </svg>\r\n      </button>\r\n      \r\n      <!-- Tooltip -->\r\n      <div \r\n        v-if=\"showTooltip\"\r\n        class=\"absolute z-[9999] bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 dark:bg-gray-700 text-white text-xs rounded-lg shadow-lg whitespace-nowrap\"\r\n      >\r\n        <div>{{ t('voice.info.name') }}: {{ currentVoiceInfo.name }}</div>\r\n        <div>{{ t('voice.info.language') }}: {{ currentVoiceInfo.lang }}</div>\r\n        <div>{{ t('voice.info.gender') }}: {{ t(`voice.gender.${currentVoiceInfo.gender}`) }}</div>\r\n        <!-- Arrow -->\r\n        <div class=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900 dark:border-t-gray-700\"></div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Test voice button -->\r\n    <button\r\n      @click=\"testVoice\"\r\n      :disabled=\"isTesting\"\r\n      class=\"flex items-center space-x-1 px-3 py-2 md:px-3 md:py-2 lg:px-4 lg:py-2.5 text-sm md:text-sm lg:text-base bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white rounded-lg transition-colors w-full sm:w-auto\"\r\n    >\r\n      <svg \r\n        v-if=\"!isTesting\"\r\n        class=\"w-4 h-4 md:w-4 md:h-4 lg:w-5 lg:h-5\" \r\n        fill=\"none\" \r\n        stroke=\"currentColor\" \r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 14.142M9 9a3 3 0 000 6v-6z\" />\r\n      </svg>\r\n      <svg \r\n        v-else\r\n        class=\"w-4 h-4 md:w-4 md:h-4 lg:w-5 lg:h-5 animate-spin\" \r\n        fill=\"none\" \r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n        <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n      </svg>\r\n      <span>{{ isTesting ? t('voice.testing', 'Testing...') : t('voice.test', 'Test Voice') }}</span>\r\n    </button>\r\n\r\n    <!-- Voice Settings Modal -->\r\n    <Teleport to=\"body\">\r\n      <VoiceSettingsModal\r\n        v-if=\"showSettingsModal && selectedVoiceForSettings\"\r\n        :show=\"showSettingsModal\"\r\n        :voice-type=\"selectedVoiceForSettings.value\"\r\n        :voice-name=\"selectedVoiceForSettings.label\"\r\n        :initial-settings=\"voiceSettings[selectedVoiceForSettings.value]\"\r\n        @close=\"showSettingsModal = false\"\r\n        @save=\"handleSaveVoiceSettings\"\r\n        @reset=\"handleResetVoiceSettings\"\r\n      />\r\n    </Teleport>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, onUnmounted, watch, defineAsyncComponent } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { useVoiceStore } from '../stores/voiceStore'\r\nimport type { VoiceType, VoiceSettings } from '../stores/voiceStore'\r\n\r\nconst VoiceSettingsModal = defineAsyncComponent(() => import('./VoiceSettingsModal.vue'))\r\n\r\nconst { t } = useI18n()\r\nconst { \r\n  voiceSettings, \r\n  currentVoiceType,\r\n  setVoiceType, \r\n  updateVoiceSettings,\r\n  resetVoiceSettings,\r\n  playAudio, \r\n  getVoiceTypeOptions, \r\n  getCurrentVoiceInfo,\r\n  loadVoices\r\n} = useVoiceStore()\r\n\r\n// Props\r\ninterface Props {\r\n  showVoiceInfo?: boolean\r\n}\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  showVoiceInfo: true\r\n})\r\n\r\n// Local state\r\nconst isTesting = ref(false)\r\nconst showTooltip = ref(false)\r\nconst showDropdown = ref(false)\r\nconst dropdownButton = ref<HTMLElement | null>(null)\r\nconst dropdownMenu = ref<HTMLElement | null>(null)\r\nconst dropdownContainer = ref<HTMLElement | null>(null)\r\nconst showSettingsModal = ref(false)\r\nconst selectedVoiceForSettings = ref<{ value: VoiceType; label: string; icon: string } | null>(null)\r\n\r\n// Computed\r\nconst voiceOptions = computed(() => getVoiceTypeOptions())\r\nconst currentVoiceInfo = computed(() => getCurrentVoiceInfo())\r\nconst currentVoiceOption = computed(() => {\r\n  return voiceOptions.value.find(option => option.value === currentVoiceType.value)\r\n})\r\n\r\n// Dropdown positioning - calculated once when dropdown opens\r\nconst dropdownStyle = computed((): Record<string, string> => {\r\n  if (!showDropdown.value || !dropdownButton.value) {\r\n    return { display: 'none' }\r\n  }\r\n  \r\n  const buttonRect = dropdownButton.value.getBoundingClientRect()\r\n  const viewportWidth = window.innerWidth\r\n  const dropdownWidth = buttonRect.width\r\n  \r\n  // Calculate left position, ensuring dropdown doesn't overflow viewport\r\n  let leftPosition = buttonRect.left\r\n  if (leftPosition + dropdownWidth > viewportWidth) {\r\n    leftPosition = viewportWidth - dropdownWidth - 8 // 8px margin from edge\r\n  }\r\n  if (leftPosition < 8) {\r\n    leftPosition = 8 // 8px margin from left edge\r\n  }\r\n  \r\n  return {\r\n    position: 'fixed',\r\n    top: `${buttonRect.bottom + 4}px`,\r\n    left: `${leftPosition}px`,\r\n    width: `${buttonRect.width}px`,\r\n    maxWidth: `${viewportWidth - 16}px`, // Ensure it never exceeds viewport width\r\n    zIndex: '9999'\r\n  }\r\n})\r\n\r\n// Methods\r\nconst handleVoiceChange = (voiceType: VoiceType) => {\r\n  setVoiceType(voiceType)\r\n}\r\n\r\nconst selectVoiceOption = (option: any) => {\r\n  handleVoiceChange(option.value)\r\n  showDropdown.value = false\r\n}\r\n\r\nconst testVoice = async () => {\r\n  if (isTesting.value) return\r\n  \r\n  isTesting.value = true\r\n  try {\r\n    // Use appropriate test text based on voice type\r\n    let testText = t('voice.testText', 'Hello, this is a test of the selected voice.')\r\n    \r\n    // For Korean voices, use Korean test text\r\n    if (currentVoiceType.value === 'korean-female' || currentVoiceType.value === 'korean-male') {\r\n      testText = t('voice.testTextKorean', '안녕하세요! 이것은 음성 테스트입니다.')\r\n    }\r\n    \r\n    console.log('Testing voice:', currentVoiceType.value, 'with text:', testText)\r\n    await playAudio(testText)\r\n  } catch (error) {\r\n    console.error('Error testing voice:', error)\r\n  } finally {\r\n    isTesting.value = false\r\n  }\r\n}\r\n\r\n\r\n\r\n// Settings Modal Methods\r\nconst openVoiceSettings = (option: { value: VoiceType; label: string; icon: string }) => {\r\n  selectedVoiceForSettings.value = option\r\n  showSettingsModal.value = true\r\n  showDropdown.value = false // Close dropdown when opening settings\r\n}\r\n\r\nconst handleSaveVoiceSettings = (payload: { voiceType: VoiceType; settings: VoiceSettings }) => {\r\n  updateVoiceSettings(payload.voiceType, payload.settings)\r\n  showSettingsModal.value = false\r\n}\r\n\r\nconst handleResetVoiceSettings = (voiceType: VoiceType) => {\r\n  resetVoiceSettings(voiceType)\r\n  // Re-open modal to show updated default values\r\n  const option = voiceOptions.value.find(o => o.value === voiceType)\r\n  if(option) {\r\n    selectedVoiceForSettings.value = option\r\n  }\r\n}\r\n\r\n// Close dropdown when clicking outside\r\nconst handleClickOutside = (event: Event) => {\r\n  if (showDropdown.value) {\r\n    const target = event.target as HTMLElement\r\n    \r\n    // Check if click is outside both dropdown button and dropdown menu\r\n    if (dropdownButton.value && !dropdownButton.value.contains(target) &&\r\n        dropdownMenu.value && !dropdownMenu.value.contains(target)) {\r\n      showDropdown.value = false\r\n    }\r\n  }\r\n}\r\n\r\n// Update dropdown position smoothly when scrolling\r\nconst updateDropdownPosition = () => {\r\n  if (showDropdown.value && dropdownButton.value) {\r\n    const buttonRect = dropdownButton.value.getBoundingClientRect()\r\n    const dropdown = dropdownMenu.value\r\n    \r\n    if (dropdown) {\r\n      dropdown.style.top = `${buttonRect.bottom + 4}px`\r\n      dropdown.style.left = `${buttonRect.left}px`\r\n      dropdown.style.minWidth = `${buttonRect.width}px`\r\n    }\r\n  }\r\n}\r\n\r\n// Throttled scroll handler to prevent excessive updates\r\nlet scrollTimeout: number | null = null\r\nconst handleScroll = () => {\r\n  if (showDropdown.value) {\r\n    // Use requestAnimationFrame for smooth updates\r\n    if (scrollTimeout) {\r\n      cancelAnimationFrame(scrollTimeout)\r\n    }\r\n    scrollTimeout = requestAnimationFrame(updateDropdownPosition)\r\n  }\r\n}\r\n\r\n// Close dropdown when resizing window (different behavior for resize)\r\nconst handleResize = () => {\r\n  if (showDropdown.value) {\r\n    showDropdown.value = false\r\n  }\r\n}\r\n\r\n// Initialize voices on mount\r\nonMounted(() => {\r\n  loadVoices()\r\n  document.addEventListener('click', handleClickOutside)\r\n  window.addEventListener('scroll', handleScroll, true)\r\n  window.addEventListener('resize', handleResize)\r\n})\r\n\r\nonUnmounted(() => {\r\n  document.removeEventListener('click', handleClickOutside)\r\n  window.removeEventListener('scroll', handleScroll, true)\r\n  window.removeEventListener('resize', handleResize)\r\n  \r\n  // Cleanup scroll timeout\r\n  if (scrollTimeout) {\r\n    cancelAnimationFrame(scrollTimeout)\r\n  }\r\n})\r\n\r\n// Watch for voice settings changes to ensure reactivity\r\nwatch(currentVoiceType, (newType) => {\r\n  console.log('VoiceSelector: Voice type changed to:', newType)\r\n}, { immediate: true })\r\n</script>\r\n"],"file":"assets/VoiceSelector-C_XFMnR0.js"}