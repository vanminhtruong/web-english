{"version":3,"file":"ImageUpload-BI5y-xyL.js","sources":["../../src/views/vocabulary/components/ImageUpload.vue"],"sourcesContent":["<template>\n  <div class=\"space-y-4\">\n    <!-- Upload Area -->\n    <div class=\"relative\">\n      <label for=\"image-upload\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n        {{ t('vocabulary.image.title', 'Image') }}\n      </label>\n      \n      <!-- Method Toggle -->\n      <div class=\"flex items-center space-x-4 mb-4\">\n        <button\n          @click=\"inputMethod = 'upload'\"\n          type=\"button\"\n          :class=\"[\n            'px-4 py-2 text-sm font-medium rounded-lg transition-colors',\n            inputMethod === 'upload'\n              ? 'bg-blue-600 text-white'\n              : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'\n          ]\"\n        >\n          {{ t('vocabulary.image.upload', 'Upload') }}\n        </button>\n        <button\n          @click=\"inputMethod = 'url'\"\n          type=\"button\"\n          :class=\"[\n            'px-4 py-2 text-sm font-medium rounded-lg transition-colors',\n            inputMethod === 'url'\n              ? 'bg-blue-600 text-white'\n              : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'\n          ]\"\n        >\n          {{ t('vocabulary.image.url', 'URL') }}\n        </button>\n      </div>\n      \n      <!-- File Input (Hidden) -->\n      <input\n        id=\"image-upload\"\n        ref=\"fileInput\"\n        type=\"file\"\n        accept=\"image/*\"\n        @change=\"handleFileChange\"\n        class=\"hidden\"\n      />\n      \n      <!-- Upload Zone -->\n      <div v-if=\"inputMethod === 'upload' && !imagePreview\">\n        <div\n          @click=\"triggerFileInput\"\n          @dragover.prevent=\"handleDragOver\"\n          @dragleave.prevent=\"handleDragLeave\"\n          @drop.prevent=\"handleDrop\"\n          :class=\"[\n            'border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors',\n            isDragOver \n              ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' \n              : 'border-gray-300 dark:border-gray-600 hover:border-blue-400 dark:hover:border-blue-500',\n            'bg-gray-50 dark:bg-[#0a0a0a]/50 hover:bg-gray-100 dark:hover:bg-gray-700/50'\n          ]\"\n        >\n          <div class=\"flex flex-col items-center space-y-2\">\n            <svg class=\"w-8 h-8 text-gray-400 dark:text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"/>\n            </svg>\n            <div class=\"text-sm text-gray-600 dark:text-gray-400\">\n              <span class=\"font-medium text-blue-600 dark:text-blue-400\">\n                {{ t('vocabulary.image.clickToUpload', 'Click to upload') }}\n              </span>\n              {{ t('vocabulary.image.orDragDrop', ' or drag and drop') }}\n            </div>\n            <p class=\"text-xs text-gray-500 dark:text-gray-500\">\n              {{ t('vocabulary.image.supportedFormats', 'PNG, JPG, GIF up to 10MB') }}\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <!-- URL Input Zone -->\n      <div v-if=\"inputMethod === 'url' && !imagePreview\" class=\"space-y-3\">\n        <div>\n          <input\n            v-model=\"imageUrl\"\n            @blur=\"handleUrlInput\"\n            @keyup.enter=\"handleUrlInput\"\n            type=\"url\"\n            :placeholder=\"t('vocabulary.image.urlPlaceholder', 'Enter image URL')\"\n            class=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400\"\n          />\n        </div>\n        <button\n          @click=\"handleUrlInput\"\n          :disabled=\"!imageUrl.trim() || isProcessing\"\n          type=\"button\"\n          class=\"w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-lg transition-colors flex items-center justify-center space-x-2\"\n        >\n          <svg v-if=\"isProcessing\" class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n          </svg>\n          <span>{{ isProcessing ? t('vocabulary.image.loading', 'Loading...') : t('vocabulary.image.loadFromUrl', 'Load from URL') }}</span>\n        </button>\n      </div>\n      \n      <!-- Image Preview -->\n      <div v-if=\"imagePreview\" class=\"relative\">\n        <div class=\"border-2 border-gray-200 dark:border-gray-600 rounded-lg overflow-hidden\">\n          <img\n            :src=\"imagePreview\"\n            :alt=\"t('vocabulary.image.preview', 'Image preview')\"\n            class=\"w-full h-48 object-cover\"\n          />\n        </div>\n        \n        <!-- Image Actions -->\n        <div class=\"flex items-center justify-between mt-2\">\n          <div class=\"flex items-center space-x-2\">\n            <button\n              v-if=\"inputMethod === 'upload'\"\n              @click=\"triggerFileInput\"\n              type=\"button\"\n              class=\"px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center space-x-1\"\n            >\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12\"/>\n              </svg>\n              <span>{{ t('vocabulary.image.changeFile', 'Change Image') }}</span>\n            </button>\n            \n            <button\n              v-if=\"inputMethod === 'url'\"\n              @click=\"showUrlEdit = true\"\n              type=\"button\"\n              class=\"px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center space-x-1\"\n            >\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1\"/>\n              </svg>\n              <span>{{ t('vocabulary.image.changeUrl', 'Change URL') }}</span>\n            </button>\n            \n            <button\n              @click=\"removeImage\"\n              type=\"button\"\n              class=\"px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors flex items-center space-x-1\"\n            >\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"/>\n              </svg>\n              <span>{{ t('vocabulary.image.remove', 'Remove') }}</span>\n            </button>\n          </div>\n          \n          <!-- Image Info -->\n          <div class=\"text-xs text-gray-500 dark:text-gray-400\">\n            <div v-if=\"imageInfo && inputMethod === 'upload'\">\n              {{ formatFileSize(imageInfo.size) }}\n            </div>\n            <div v-if=\"inputMethod === 'url'\">\n              {{ t('vocabulary.image.fromUrl', 'From URL') }}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- URL Edit Modal -->\n      <div v-if=\"showUrlEdit\" class=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\">\n        <div class=\"bg-white dark:bg-[#0a0a0a] rounded-lg p-6 w-full max-w-md mx-4\">\n          <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n            {{ t('vocabulary.image.changeUrl', 'Change URL') }}\n          </h3>\n          <div class=\"space-y-4\">\n            <input\n              v-model=\"newImageUrl\"\n              @keyup.enter=\"handleUrlChange\"\n              type=\"url\"\n              :placeholder=\"t('vocabulary.image.urlPlaceholder', 'Enter image URL')\"\n              class=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400\"\n            />\n            <div class=\"flex justify-end space-x-3\">\n              <button\n                @click=\"showUrlEdit = false\"\n                type=\"button\"\n                class=\"px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors\"\n              >\n                {{ t('common.cancel', 'Cancel') }}\n              </button>\n              <button\n                @click=\"handleUrlChange\"\n                :disabled=\"!newImageUrl.trim() || isProcessing\"\n                type=\"button\"\n                class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n              >\n                {{ isProcessing ? t('vocabulary.image.loading', 'Loading...') : t('common.update', 'Update') }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Loading State -->\n      <div v-if=\"isProcessing\" class=\"absolute inset-0 bg-white dark:bg-[#0a0a0a] bg-opacity-75 flex items-center justify-center rounded-lg\">\n        <div class=\"flex items-center space-x-2 text-blue-600 dark:text-blue-400\">\n          <svg class=\"animate-spin w-5 h-5\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n          </svg>\n          <span class=\"text-sm\">{{ t('vocabulary.image.processing', 'Processing...') }}</span>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Error Message -->\n    <div v-if=\"errorMessage\" class=\"p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md\">\n      <div class=\"flex items-center space-x-2\">\n        <svg class=\"w-5 h-5 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n        </svg>\n        <span class=\"text-sm text-red-700 dark:text-red-300\">{{ errorMessage }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, onMounted } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\ninterface Props {\n  modelValue?: string | null\n}\n\ninterface Emits {\n  (e: 'update:modelValue', value: string | null): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  modelValue: null\n})\n\nconst emit = defineEmits<Emits>()\nconst { t } = useI18n()\n\n// Reactive state\nconst fileInput = ref<HTMLInputElement>()\nconst imagePreview = ref<string | null>(null)\nconst imageInfo = ref<{ name: string; size: number } | null>(null)\nconst isDragOver = ref(false)\nconst isProcessing = ref(false)\nconst errorMessage = ref<string | null>(null)\nconst inputMethod = ref<'upload' | 'url'>('upload')\nconst imageUrl = ref('')\nconst newImageUrl = ref('')\nconst showUrlEdit = ref(false)\n\n// Constants\nconst MAX_FILE_SIZE = 5 * 1024 * 1024 // 5MB\nconst SUPPORTED_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']\n\n// Methods\nconst triggerFileInput = () => {\n  fileInput.value?.click()\n}\n\nconst handleFileChange = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  const file = target.files?.[0]\n  if (file) {\n    processFile(file)\n  }\n}\n\nconst handleDragOver = (event: DragEvent) => {\n  event.preventDefault()\n  isDragOver.value = true\n}\n\nconst handleDragLeave = (event: DragEvent) => {\n  event.preventDefault()\n  isDragOver.value = false\n}\n\nconst handleDrop = (event: DragEvent) => {\n  event.preventDefault()\n  isDragOver.value = false\n  \n  const files = event.dataTransfer?.files\n  if (files && files.length > 0) {\n    processFile(files[0])\n  }\n}\n\nconst processFile = async (file: File) => {\n  // Clear previous errors\n  errorMessage.value = null\n  \n  // Validate file type\n  if (!SUPPORTED_TYPES.includes(file.type)) {\n    errorMessage.value = t('vocabulary.image.errors.unsupportedFormat', 'Unsupported file format')\n    return\n  }\n  \n  // Validate file size\n  if (file.size > MAX_FILE_SIZE) {\n    errorMessage.value = t('vocabulary.image.errors.fileTooLarge', 'File size too large')\n    return\n  }\n  \n  isProcessing.value = true\n  \n  try {\n    // Convert to base64\n    const base64 = await fileToBase64(file)\n    \n    imagePreview.value = base64\n    imageInfo.value = {\n      name: file.name,\n      size: file.size\n    }\n    \n    // Emit the base64 string\n    emit('update:modelValue', base64)\n    \n  } catch (error) {\n    console.error('Error processing image:', error)\n    errorMessage.value = t('vocabulary.image.errors.processingFailed', 'Failed to process image')\n  } finally {\n    isProcessing.value = false\n  }\n}\n\nconst fileToBase64 = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = () => {\n      const result = reader.result as string\n      resolve(result)\n    }\n    reader.onerror = error => reject(error)\n  })\n}\n\nconst removeImage = () => {\n  imagePreview.value = null\n  imageInfo.value = null\n  errorMessage.value = null\n  imageUrl.value = ''\n  \n  // Clear file input\n  if (fileInput.value) {\n    fileInput.value.value = ''\n  }\n  \n  // Emit null to parent\n  emit('update:modelValue', null)\n}\n\nconst handleUrlInput = async () => {\n  if (!imageUrl.value.trim()) {\n    errorMessage.value = t('vocabulary.image.errors.emptyUrl')\n    return\n  }\n  \n  // Basic URL validation\n  if (!isValidImageUrl(imageUrl.value)) {\n    errorMessage.value = t('vocabulary.image.errors.invalidUrl')\n    return\n  }\n  \n  isProcessing.value = true\n  errorMessage.value = null\n  \n  try {\n    // Test if image can be loaded\n    await validateImageUrl(imageUrl.value)\n    \n    imagePreview.value = imageUrl.value\n    imageInfo.value = null // No file info for URLs\n    \n    // Emit the URL\n    emit('update:modelValue', imageUrl.value)\n    \n  } catch (error) {\n    console.error('Error loading image from URL:', error)\n    // Still accept the URL if it looks valid (CORS might be blocking it)\n    if (isValidImageUrl(imageUrl.value)) {\n      imagePreview.value = imageUrl.value\n      imageInfo.value = null\n      emit('update:modelValue', imageUrl.value)\n      // Show a warning instead of error\n      errorMessage.value = t('vocabulary.image.errors.corsWarning')\n    } else {\n      errorMessage.value = t('vocabulary.image.errors.urlLoadFailed')\n    }\n  } finally {\n    isProcessing.value = false\n  }\n}\n\nconst handleUrlChange = async () => {\n  if (!newImageUrl.value.trim()) {\n    errorMessage.value = t('vocabulary.image.errors.emptyUrl')\n    return\n  }\n  \n  // Basic URL validation\n  if (!isValidImageUrl(newImageUrl.value)) {\n    errorMessage.value = t('vocabulary.image.errors.invalidUrl')\n    return\n  }\n  \n  isProcessing.value = true\n  errorMessage.value = null\n  \n  try {\n    // Test if image can be loaded\n    await validateImageUrl(newImageUrl.value)\n    \n    imagePreview.value = newImageUrl.value\n    imageUrl.value = newImageUrl.value\n    \n    // Emit the new URL\n    emit('update:modelValue', newImageUrl.value)\n    \n    // Close modal\n    showUrlEdit.value = false\n    newImageUrl.value = ''\n    \n  } catch (error) {\n    console.error('Error loading image from URL:', error)\n    // Still accept the URL if it looks valid (CORS might be blocking it)\n    if (isValidImageUrl(newImageUrl.value)) {\n      imagePreview.value = newImageUrl.value\n      imageUrl.value = newImageUrl.value\n      emit('update:modelValue', newImageUrl.value)\n      showUrlEdit.value = false\n      newImageUrl.value = ''\n      // Show a warning instead of error\n      errorMessage.value = t('vocabulary.image.errors.corsWarning')\n    } else {\n      errorMessage.value = t('vocabulary.image.errors.urlLoadFailed')\n    }\n  } finally {\n    isProcessing.value = false\n  }\n}\n\nconst isValidImageUrl = (url: string): boolean => {\n  try {\n    const urlObj = new URL(url)\n    // Check if it's a valid HTTP/HTTPS URL\n    if (!['http:', 'https:'].includes(urlObj.protocol)) {\n      return false\n    }\n    \n    // Check if URL ends with common image extensions\n    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.svg']\n    const pathname = urlObj.pathname.toLowerCase()\n    const hasImageExtension = imageExtensions.some(ext => pathname.includes(ext))\n    \n    // Check for common image hosting patterns and services\n    const commonImageHosts = [\n      'imgur.com', 'cloudinary.com', 'unsplash.com', 'pexels.com', 'pixabay.com',\n      'googleusercontent.com', 'gstatic.com', 'ggpht.com', // Google services\n      'fbcdn.net', 'cdninstagram.com', // Facebook/Instagram\n      'twimg.com', // Twitter\n      'amazonaws.com', 's3.', // AWS S3\n      'githubusercontent.com', // GitHub\n      'wikimedia.org', 'wikipedia.org', // Wikipedia\n      'flickr.com', 'staticflickr.com', // Flickr\n      'dropbox.com', 'dropboxusercontent.com', // Dropbox\n      'drive.google.com', // Google Drive\n      'ibb.co', 'postimg.cc', // Image hosting services\n      'cdn.', 'images.', 'img.', 'static.', 'media.' // Common CDN patterns\n    ]\n    const hasImageHost = commonImageHosts.some(host => url.includes(host))\n    \n    // Check for query parameters that suggest image content\n    const imageQueryParams = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'image', 'img', 'photo']\n    const queryString = urlObj.search.toLowerCase()\n    const hasImageQuery = imageQueryParams.some(param => queryString.includes(param))\n    \n    // More lenient: accept if ANY of these conditions are true\n    return hasImageExtension || hasImageHost || hasImageQuery\n  } catch {\n    return false\n  }\n}\n\nconst validateImageUrl = (url: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    // Try without crossOrigin first to avoid CORS issues\n    const img = new Image()\n    \n    // Set a timeout for slow loading images\n    const timeout = setTimeout(() => {\n      reject(new Error('Image load timeout'))\n    }, 8000) // 8 seconds timeout\n    \n    img.onload = () => {\n      clearTimeout(timeout)\n      resolve()\n    }\n    \n    img.onerror = () => {\n      clearTimeout(timeout)\n      // Try a fallback method - just accept the URL if it looks like an image\n      if (isValidImageUrl(url)) {\n        console.warn('Image validation failed but URL looks valid, accepting anyway')\n        resolve() // Accept the URL anyway\n      } else {\n        reject(new Error('Failed to load image'))\n      }\n    }\n    \n    img.src = url\n  })\n}\n\nconst formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes'\n  \n  const k = 1024\n  const sizes = ['Bytes', 'KB', 'MB', 'GB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n}\n\n// Watch for external changes to modelValue\nwatch(\n  () => props.modelValue,\n  (newValue) => {\n    if (newValue !== imagePreview.value) {\n      imagePreview.value = newValue\n      \n      if (!newValue) {\n        imageInfo.value = null\n        errorMessage.value = null\n        imageUrl.value = ''\n      } else {\n        // Detect if it's a URL or base64\n        if (newValue.startsWith('http')) {\n          inputMethod.value = 'url'\n          imageUrl.value = newValue\n        } else {\n          inputMethod.value = 'upload'\n        }\n      }\n    }\n  },\n  { immediate: true }\n)\n\n// Watch inputMethod changes\nwatch(inputMethod, (newMethod) => {\n  // Clear previous errors when switching methods\n  errorMessage.value = null\n  \n  // If switching to URL and there's already an image, keep it\n  // If switching to upload and current image is URL, keep it but allow file upload\n})\n\nonMounted(() => {\n  // Initialize with prop value\n  if (props.modelValue) {\n    imagePreview.value = props.modelValue\n  }\n})\n</script>\n"],"names":["_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_unref","_normalizeClass","_createTextVNode"],"mappings":"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"}