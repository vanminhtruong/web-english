{"version":3,"mappings":"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","names":["_openBlock","_createElementBlock","_createVNode","_unref","_createElementVNode","_Fragment","_createBlock"],"ignoreList":[],"sources":["../../src/views/practice/composables/asyncComponents.ts","../../src/views/practice/composables/useFlashcardGame.ts","../../src/views/practice/composables/useFlashcardModes.ts","../../src/views/practice/composables/useFlashcardSettings.ts","../../src/views/practice/composables/useFlashcardStats.ts","../../src/views/practice/composables/usePracticeSessionDetails.ts","../../src/views/practice/FlashcardView.vue"],"sourcesContent":["import { defineAsyncComponent } from 'vue'\n\n// Shared components (from src/components)\nexport const LazyLoadComponent = defineAsyncComponent(() => import('../../../components/LazyLoadComponent.vue'))\nexport const VoiceSelector = defineAsyncComponent(() => import('../../../components/VoiceSelector.vue'))\n\n// Practice components (from ../components)\nexport const FlashcardHeader = defineAsyncComponent(() => import('../components/FlashcardHeader.vue'))\nexport const FlashcardProgress = defineAsyncComponent(() => import('../components/FlashcardProgress.vue'))\nexport const FlashcardDateFilter = defineAsyncComponent(() => import('../components/FlashcardDateFilter.vue'))\nexport const FlashcardCard = defineAsyncComponent(() => import('../components/FlashcardCard.vue'))\nexport const FlashcardQuiz = defineAsyncComponent(() => import('../components/FlashcardQuiz.vue'))\nexport const FlashcardTyping = defineAsyncComponent(() => import('../components/FlashcardTyping.vue'))\nexport const FlashcardImage = defineAsyncComponent(() => import('../components/FlashcardImage.vue'))\nexport const FlashcardControls = defineAsyncComponent(() => import('../components/FlashcardControls.vue'))\nexport const PracticeTimer = defineAsyncComponent(() => import('../components/PracticeTimer.vue'))\n\n// Modals and additional features\nexport const ExitWarningModal = defineAsyncComponent(() => import('../components/ExitWarningModal.vue'))\nexport const CompletionModal = defineAsyncComponent(() => import('../components/CompletionModal.vue'))\nexport const HistoryModal = defineAsyncComponent(() => import('../components/HistoryModal.vue'))\nexport const SessionDetailModal = defineAsyncComponent(() => import('../components/SessionDetailModal.vue'))\nexport const SettingsModal = defineAsyncComponent(() => import('../components/SettingsModal.vue'))\nexport const PronunciationMode = defineAsyncComponent(() => import('../components/PronunciationMode.vue'))\nexport const ListeningMode = defineAsyncComponent(() => import('../components/ListeningMode.vue'))\nexport const PracticeStats = defineAsyncComponent(() => import('../components/PracticeStats.vue'))\nexport const FlashcardEmptyState = defineAsyncComponent(() => import('../components/FlashcardEmptyState.vue'))\nexport const PictionaryMode = defineAsyncComponent(() => import('../components/PictionaryMode.vue'))\nexport const FlipTileMode = defineAsyncComponent(() => import('../components/FlipTileMode.vue'))\nexport const BubbleShooterMode = defineAsyncComponent(() => import('../components/BubbleShooterMode.vue'))\nexport const SnakeGameMode = defineAsyncComponent(() => import('../components/SnakeGameMode.vue'))\n\n// Default aggregate export for one-line import convenience\nexport default {\n  LazyLoadComponent,\n  VoiceSelector,\n  FlashcardHeader,\n  FlashcardProgress,\n  FlashcardDateFilter,\n  FlashcardCard,\n  FlashcardQuiz,\n  FlashcardTyping,\n  FlashcardImage,\n  FlashcardControls,\n  PracticeTimer,\n  ExitWarningModal,\n  CompletionModal,\n  HistoryModal,\n  SessionDetailModal,\n  SettingsModal,\n  PronunciationMode,\n  ListeningMode,\n  PracticeStats,\n  FlashcardEmptyState,\n  PictionaryMode,\n  FlipTileMode,\n  BubbleShooterMode,\n  SnakeGameMode,\n}\n\n","import { ref, computed, onUnmounted, watch } from 'vue'\r\nimport type { Ref } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport type { Vocabulary } from '../../../composables/useVocabularyStore'\r\nimport type { GameSettings, PracticeMode } from '../types'\r\nimport type { GameStats } from './useFlashcardStats'\r\n\r\nexport function useFlashcardGame(flashcards: Ref<Vocabulary[]>) {\r\n  const router = useRouter()\r\n\r\n  // Practice mode localStorage key\r\n  const PRACTICE_MODE_STORAGE_KEY = 'flashcard-practice-mode'\r\n\r\n  // Load practice mode from localStorage\r\n  const loadPracticeModeFromStorage = (): string => {\r\n    try {\r\n      const saved = localStorage.getItem(PRACTICE_MODE_STORAGE_KEY)\r\n      if (saved && ['flashcard', 'quiz', 'typing', 'image', 'listening', 'pronunciation', 'pictionary', 'flip-tile', 'bubble-shooter', 'snake-game'].includes(saved)) {\r\n        return saved\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading practice mode from localStorage:', error)\r\n    }\r\n    return 'flashcard' // fallback to default\r\n  }\r\n\r\n  // Save practice mode to localStorage\r\n  const savePracticeModeToStorage = (mode: string) => {\r\n    try {\r\n      localStorage.setItem(PRACTICE_MODE_STORAGE_KEY, mode)\r\n    } catch (error) {\r\n      console.error('Error saving practice mode to localStorage:', error)\r\n    }\r\n  }\r\n\r\n  // Game state\r\n  const currentIndex = ref(0)\r\n  const isFlipped = ref(false)\r\n  const practiceMode = ref<PracticeMode>(loadPracticeModeFromStorage() as PracticeMode)\r\n  const showSettings = ref(false)\r\n  const showCompletionModal = ref(false)\r\n  const isCompleted = ref(false)\r\n\r\n  // Game settings\r\n  const settings = ref<GameSettings>({\r\n    cardCount: 20,\r\n    difficulty: 'all',\r\n    autoFlip: false,\r\n    flipDelay: 3,\r\n    showDefinition: true,\r\n    showExample: true,\r\n    showPronunciation: true,\r\n    shuffleCards: false,\r\n    voiceType: 'female',\r\n    practiceMode: loadPracticeModeFromStorage() as PracticeMode,\r\n  })\r\n\r\n  // Game stats\r\n  const stats = ref<GameStats>({\r\n    easy: 0,\r\n    difficult: 0,\r\n    reviewed: 0,\r\n    correct: 0,\r\n    incorrect: 0,\r\n    total: 0,\r\n    startTime: new Date(),\r\n    endTime: null,\r\n    mode: 'flashcard'\r\n  })\r\n\r\n  // Ensure stats.mode always reflects the current practice mode\r\n  // Initial sync (in case a saved mode is loaded from storage)\r\n  stats.value.mode = practiceMode.value\r\n\r\n  // Keep stats.mode in sync when practice mode changes\r\n  watch(practiceMode, (mode) => {\r\n    stats.value.mode = mode\r\n  })\r\n\r\n  // Current card\r\n  const currentCard = computed(() => {\r\n    if (flashcards.value.length === 0) return null\r\n    return flashcards.value[currentIndex.value]\r\n  })\r\n\r\n  // Game controls\r\n  const nextCard = () => {\r\n    if (currentIndex.value < flashcards.value.length - 1) {\r\n      currentIndex.value++\r\n      resetCurrentCard()\r\n    } else {\r\n      completeSession()\r\n    }\r\n  }\r\n\r\n  const previousCard = () => {\r\n    if (currentIndex.value > 0) {\r\n      currentIndex.value--\r\n      resetCurrentCard()\r\n    }\r\n  }\r\n\r\n  const flipCard = () => {\r\n    isFlipped.value = !isFlipped.value\r\n  }\r\n\r\n  const resetCurrentCard = () => {\r\n    isFlipped.value = false\r\n    // Reset mode-specific states will be handled by mode composables\r\n  }\r\n\r\n  const completeSession = () => {\r\n    isCompleted.value = true\r\n    stats.value.endTime = new Date()\r\n    showCompletionModal.value = true\r\n  }\r\n\r\n  const restartSession = () => {\r\n    currentIndex.value = 0\r\n    isCompleted.value = false\r\n    showCompletionModal.value = false\r\n    stats.value = {\r\n      easy: 0,\r\n      difficult: 0,\r\n      reviewed: 0,\r\n      correct: 0,\r\n      incorrect: 0,\r\n      total: 0,\r\n      startTime: new Date(),\r\n      endTime: null,\r\n      mode: practiceMode.value\r\n    }\r\n    resetCurrentCard()\r\n  }\r\n\r\n  const changePracticeMode = (mode: PracticeMode) => {\r\n    practiceMode.value = mode\r\n    settings.value.practiceMode = mode;\r\n    savePracticeModeToStorage(mode) // Save to localStorage\r\n    resetCurrentCard()\r\n  }\r\n\r\n  const applySettings = () => {\r\n    showSettings.value = false\r\n    // Apply settings logic here\r\n  }\r\n\r\n  const goBack = () => {\r\n    router.push('/')\r\n  }\r\n\r\n  const goToVocabulary = () => {\r\n    router.push('/practice/flashcard')\r\n  }\r\n\r\n  const markEasy = () => {\r\n    // Mark current card as easy - recordAnswer will be called externally\r\n    nextCard()\r\n  }\r\n\r\n  const markDifficult = () => {\r\n    // Mark current card as difficult - recordAnswer will be called externally\r\n    nextCard()\r\n  }\r\n\r\n  // Auto flip functionality\r\n  let autoFlipTimer: number | null = null\r\n\r\n  watch([currentIndex, isFlipped], () => {\r\n    if (autoFlipTimer) {\r\n      clearTimeout(autoFlipTimer)\r\n    }\r\n    \r\n    if (settings.value.autoFlip && !isFlipped.value) {\r\n      autoFlipTimer = window.setTimeout(() => {\r\n        if (!isFlipped.value) {\r\n          flipCard()\r\n        }\r\n      }, settings.value.flipDelay * 1000)\r\n    }\r\n  })\r\n\r\n  // Cleanup\r\n  const cleanup = () => {\r\n    if (autoFlipTimer) {\r\n      clearTimeout(autoFlipTimer)\r\n    }\r\n  }\r\n\r\n  return {\r\n    // State\r\n    currentIndex,\r\n    isFlipped,\r\n    practiceMode,\r\n    showSettings,\r\n    showCompletionModal,\r\n    isCompleted,\r\n    settings,\r\n    stats,\r\n    \r\n    // Computed\r\n    flashcards,\r\n    currentCard,\r\n    \r\n    // Methods\r\n    nextCard,\r\n    previousCard,\r\n    flipCard,\r\n    resetCurrentCard,\r\n    completeSession,\r\n    restartSession,\r\n    changePracticeMode,\r\n    applySettings,\r\n    goBack,\r\n    goToVocabulary,\r\n    markEasy,\r\n    markDifficult,\r\n    cleanup\r\n  }\r\n}\r\n","import { ref, computed, watch } from 'vue'\r\nimport type { Ref } from 'vue'\r\nimport { useVoiceStore } from '../../../stores/voiceStore'\r\n\r\nexport interface VocabularyItem {\r\n  id: number\r\n  word: string\r\n  meaning: string\r\n  pronunciation?: string\r\n  example?: string\r\n  category: string\r\n  level: string\r\n  partOfSpeech?: string\r\n  synonyms?: string[]\r\n  antonyms?: string[]\r\n  notes?: string\r\n  favorite?: boolean\r\n  createdAt?: string\r\n  updatedAt?: string\r\n}\r\n\r\nexport function useFlashcardModes(\r\n  currentCard: Ref<VocabularyItem | null>, \r\n  flashcards: Ref<VocabularyItem[]>, \r\n  allVocabularies: Ref<VocabularyItem[]>,\r\n  onCorrectAnswer?: () => void,\r\n  onIncorrectAnswer?: () => void\r\n) {\r\n  // Voice settings\r\n  const { playAudio: playVoiceAudio } = useVoiceStore()\r\n  \r\n  // Quiz mode states\r\n  const quizOptions = ref<string[]>([])\r\n  const selectedAnswer = ref('')\r\n  const quizAnswered = ref(false)\r\n\r\n  // Typing mode states\r\n  const typingAnswer = ref('')\r\n  const typingAnswered = ref(false)\r\n  const typingCorrect = ref(false)\r\n  // Typing-Quiz (multiple choice within Typing mode)\r\n  const typingQuizEnabled = ref(false)\r\n  const typingQuizOptions = ref<string[]>([])\r\n  const typingQuizSelected = ref('')\r\n  const typingQuizAnswered = ref(false)\r\n\r\n  // Listening mode states\r\n  const listeningAnswer = ref('')\r\n  const listeningAnswered = ref(false)\r\n  const listeningCorrect = ref(false)\r\n  // Listening-Quiz (multiple choice within Listening mode)\r\n  const listeningQuizEnabled = ref(false)\r\n  const listeningQuizOptions = ref<string[]>([])\r\n  const listeningQuizSelected = ref('')\r\n  const listeningQuizAnswered = ref(false)\r\n\r\n  // Image mode states\r\n  const imageAnswer = ref('')\r\n  const imageAnswered = ref(false)\r\n  const imageCorrect = ref(false)\r\n\r\n  // Image-Quiz (multiple choice within Image mode)\r\n  const imageQuizEnabled = ref(false)\r\n  const imageQuizOptions = ref<string[]>([])\r\n  const imageQuizSelected = ref('')\r\n  const imageQuizAnswered = ref(false)\r\n\r\n  // Pictionary mode states\r\n  const pictionaryAnswer = ref('')\r\n  const pictionaryAnswered = ref(false)\r\n  const pictionaryCorrect = ref(false)\r\n\r\n  // Flip tile mode states\r\n  const flipTileAnswer = ref('')\r\n  const flipTileAnswered = ref(false)\r\n  const flipTileCorrect = ref(false)\r\n\r\n  // Bubble Shooter mode states\r\n  const bubbleShooterVietnameseMode = ref(false)\r\n\r\n  // Persist toggle states in localStorage\r\n  const STORAGE_KEYS = {\r\n    image: 'pe_imageQuizEnabled',\r\n    listening: 'pe_listeningQuizEnabled',\r\n    typing: 'pe_typingQuizEnabled',\r\n    bubbleShooterVietnamese: 'pe_bubbleShooterVietnameseMode',\r\n    imagePos: 'pe_imageQuiz_correct_pos',\r\n    listeningPos: 'pe_listeningQuiz_correct_pos',\r\n    typingPos: 'pe_typingQuiz_correct_pos',\r\n  } as const\r\n\r\n  const readBool = (key: string, def = false) => {\r\n    try {\r\n      const v = localStorage.getItem(key)\r\n      return v === null ? def : v === 'true'\r\n    } catch {\r\n      return def\r\n    }\r\n  }\r\n\r\n  // Initialize from localStorage\r\n  imageQuizEnabled.value = readBool(STORAGE_KEYS.image, false)\r\n  listeningQuizEnabled.value = readBool(STORAGE_KEYS.listening, false)\r\n  typingQuizEnabled.value = readBool(STORAGE_KEYS.typing, false)\r\n  bubbleShooterVietnameseMode.value = readBool(STORAGE_KEYS.bubbleShooterVietnamese, false)\r\n\r\n  const writeBool = (key: string, val: boolean) => {\r\n    try {\r\n      localStorage.setItem(key, String(val))\r\n    } catch {}\r\n  }\r\n\r\n  const readNumber = (key: string, def = 0) => {\r\n    try {\r\n      const v = localStorage.getItem(key)\r\n      const n = v === null ? def : Number(v)\r\n      return Number.isFinite(n) && n >= 0 ? n : def\r\n    } catch {\r\n      return def\r\n    }\r\n  }\r\n\r\n  const writeNumber = (key: string, val: number) => {\r\n    try {\r\n      localStorage.setItem(key, String(val))\r\n    } catch {}\r\n  }\r\n\r\n  watch(imageQuizEnabled, (v) => writeBool(STORAGE_KEYS.image, v))\r\n  watch(listeningQuizEnabled, (v) => writeBool(STORAGE_KEYS.listening, v))\r\n  watch(typingQuizEnabled, (v) => writeBool(STORAGE_KEYS.typing, v))\r\n  watch(bubbleShooterVietnameseMode, (v) => writeBool(STORAGE_KEYS.bubbleShooterVietnamese, v))\r\n\r\n  // Rotating indices for correct-answer position (A,B,C,D => 0..3)\r\n  const imageCorrectPos = ref(readNumber(STORAGE_KEYS.imagePos, Math.floor(Math.random() * 4)))\r\n  const listeningCorrectPos = ref(readNumber(STORAGE_KEYS.listeningPos, Math.floor(Math.random() * 4)))\r\n  const typingCorrectPos = ref(readNumber(STORAGE_KEYS.typingPos, Math.floor(Math.random() * 4)))\r\n\r\n  watch(imageCorrectPos, (n) => writeNumber(STORAGE_KEYS.imagePos, n))\r\n  watch(listeningCorrectPos, (n) => writeNumber(STORAGE_KEYS.listeningPos, n))\r\n  watch(typingCorrectPos, (n) => writeNumber(STORAGE_KEYS.typingPos, n))\r\n\r\n  const placeWithRotation = (correct: string, wrongs: string[], posRef: { value: number }) => {\r\n    const options = new Array<string>(4)\r\n    const idx = posRef.value % 4\r\n    options[idx] = correct\r\n    // Fill remaining slots with shuffled wrongs\r\n    const shuffledWrongs = [...wrongs].sort(() => Math.random() - 0.5)\r\n    let wi = 0\r\n    for (let i = 0; i < 4; i++) {\r\n      if (i === idx) continue\r\n      options[i] = shuffledWrongs[wi++] ?? ''\r\n    }\r\n    // Advance rotation for next time\r\n    posRef.value = (posRef.value + 1) % 4\r\n    return options\r\n  }\r\n\r\n  // Pronunciation mode states\r\n  const isRecording = ref(false)\r\n  const pronunciationResult = ref('')\r\n  const pronunciationAnswered = ref(false)\r\n  const pronunciationCorrect = ref(false)\r\n  let recognition: any = null\r\n\r\n  const SpeechRecognition = window.SpeechRecognition || (window as any).webkitSpeechRecognition\r\n  const isSpeechRecognitionSupported = !!SpeechRecognition\r\n\r\n  if (isSpeechRecognitionSupported) {\r\n    recognition = new SpeechRecognition()\r\n    recognition.continuous = false\r\n    recognition.lang = 'en-US'\r\n    recognition.interimResults = false\r\n    recognition.maxAlternatives = 1\r\n\r\n    recognition.onresult = (event: any) => {\r\n      const transcript = event.results[0][0].transcript\r\n      pronunciationResult.value = transcript\r\n      checkPronunciationAnswer(transcript)\r\n    }\r\n\r\n    recognition.onerror = (event: any) => {\r\n      console.error('Speech recognition error', event.error)\r\n      isRecording.value = false\r\n    }\r\n\r\n    recognition.onend = () => {\r\n      isRecording.value = false\r\n    }\r\n  }\r\n\r\n  const startRecording = () => {\r\n    if (isRecording.value || !isSpeechRecognitionSupported) return\r\n    pronunciationResult.value = ''\r\n    pronunciationAnswered.value = false\r\n    pronunciationCorrect.value = false\r\n    isRecording.value = true\r\n    recognition.start()\r\n  }\r\n\r\n  const checkPronunciationAnswer = (transcript: string) => {\r\n    if (!currentCard.value) return false\r\n    pronunciationAnswered.value = true\r\n    const userAnswer = transcript.toLowerCase().trim().replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\")\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim().replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\")\r\n    pronunciationCorrect.value = userAnswer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (pronunciationCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return pronunciationCorrect.value\r\n  }\r\n\r\n  // Quiz mode methods\r\n  const generateQuizOptions = () => {\r\n    if (!currentCard.value) return\r\n    \r\n    const correctAnswer = getShortMeaning(currentCard.value.meaning)\r\n    // Use allVocabularies instead of flashcards to get options from all vocabulary words\r\n    const allOptions = allVocabularies.value\r\n      .filter(card => card.id !== currentCard.value?.id)\r\n      .map(card => getShortMeaning(card.meaning))\r\n      .filter(meaning => meaning !== correctAnswer) // Remove duplicates\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 3)\r\n    \r\n    // If not enough unique options, use the available ones\r\n    const wrongOptions = allOptions.length >= 3 ? allOptions.slice(0, 3) : allOptions\r\n    \r\n    quizOptions.value = [correctAnswer, ...wrongOptions].sort(() => Math.random() - 0.5)\r\n  }\r\n\r\n  const selectQuizAnswer = (answer: string) => {\r\n    if (quizAnswered.value) return\r\n    \r\n    selectedAnswer.value = answer\r\n    quizAnswered.value = true\r\n    \r\n    // So sánh với short meaning thay vì full meaning\r\n    const correctAnswer = currentCard.value ? getShortMeaning(currentCard.value.meaning) : ''\r\n    const isCorrect = answer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (isCorrect) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return isCorrect\r\n  }\r\n\r\n  // Image-Quiz methods (multiple choice answers are the WORDs)\r\n  const generateImageQuizOptions = () => {\r\n    if (!currentCard.value) return\r\n\r\n    const correctWord = currentCard.value.word.trim()\r\n    const allWrong = allVocabularies.value\r\n      .filter(card => card.id !== currentCard.value?.id)\r\n      .map(card => card.word.trim())\r\n      .filter(word => word.toLowerCase() !== correctWord.toLowerCase())\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 3)\r\n\r\n    const wrongOptions = allWrong.length >= 3 ? allWrong.slice(0, 3) : allWrong\r\n    // Place correct answer using rotating position to avoid repetition in the same slot\r\n    const paddedWrongs = [...new Set(wrongOptions)]\r\n    while (paddedWrongs.length < 3) paddedWrongs.push('')\r\n    imageQuizOptions.value = placeWithRotation(correctWord, paddedWrongs, imageCorrectPos)\r\n  }\r\n\r\n  const selectImageQuizAnswer = (answer: string) => {\r\n    if (imageQuizAnswered.value) return\r\n\r\n    imageQuizSelected.value = answer\r\n    imageQuizAnswered.value = true\r\n\r\n    const correctWord = currentCard.value ? currentCard.value.word.trim().toLowerCase() : ''\r\n    const isCorrect = answer.trim().toLowerCase() === correctWord\r\n\r\n    // Reflect into base Image mode state so existing flow/stats work\r\n    imageAnswered.value = true\r\n    imageCorrect.value = isCorrect\r\n\r\n    if (isCorrect) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n\r\n    return isCorrect\r\n  }\r\n\r\n  // Typing mode methods\r\n  const checkTypingAnswer = () => {\r\n    if (!currentCard.value || typingAnswered.value) return\r\n    \r\n    typingAnswered.value = true\r\n    const userAnswer = typingAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    \r\n    typingCorrect.value = userAnswer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (typingCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return typingCorrect.value\r\n  }\r\n\r\n  // Typing-Quiz methods (multiple choice answers are the WORDs)\r\n  const generateTypingQuizOptions = () => {\r\n    if (!currentCard.value) return\r\n\r\n    const correctWord = currentCard.value.word.trim()\r\n    const allWrong = allVocabularies.value\r\n      .filter(card => card.id !== currentCard.value?.id)\r\n      .map(card => card.word.trim())\r\n      .filter(word => word.toLowerCase() !== correctWord.toLowerCase())\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 3)\r\n\r\n    const wrongOptions = allWrong.length >= 3 ? allWrong.slice(0, 3) : allWrong\r\n    const paddedWrongs = [...new Set(wrongOptions)]\r\n    while (paddedWrongs.length < 3) paddedWrongs.push('')\r\n    typingQuizOptions.value = placeWithRotation(correctWord, paddedWrongs, typingCorrectPos)\r\n  }\r\n\r\n  const selectTypingQuizAnswer = (answer: string) => {\r\n    if (typingQuizAnswered.value) return\r\n\r\n    typingQuizSelected.value = answer\r\n    typingQuizAnswered.value = true\r\n\r\n    const correctWord = currentCard.value ? currentCard.value.word.trim().toLowerCase() : ''\r\n    const isCorrect = answer.trim().toLowerCase() === correctWord\r\n\r\n    // Reflect into base Typing mode state so existing flow/stats work\r\n    typingAnswered.value = true\r\n    typingCorrect.value = isCorrect\r\n\r\n    if (isCorrect) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n\r\n    return isCorrect\r\n  }\r\n\r\n  // Listening mode methods\r\n  const checkListeningAnswer = () => {\r\n    if (!currentCard.value || listeningAnswered.value) return\r\n    \r\n    listeningAnswered.value = true\r\n    const userAnswer = listeningAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    \r\n    listeningCorrect.value = userAnswer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (listeningCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return listeningCorrect.value\r\n  }\r\n\r\n  // Listening-Quiz methods (multiple choice answers are the WORDs)\r\n  const generateListeningQuizOptions = () => {\r\n    if (!currentCard.value) return\r\n\r\n    const correctWord = currentCard.value.word.trim()\r\n    const allWrong = allVocabularies.value\r\n      .filter(card => card.id !== currentCard.value?.id)\r\n      .map(card => card.word.trim())\r\n      .filter(word => word.toLowerCase() !== correctWord.toLowerCase())\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 3)\r\n\r\n    const wrongOptions = allWrong.length >= 3 ? allWrong.slice(0, 3) : allWrong\r\n    const paddedWrongs = [...new Set(wrongOptions)]\r\n    while (paddedWrongs.length < 3) paddedWrongs.push('')\r\n    listeningQuizOptions.value = placeWithRotation(correctWord, paddedWrongs, listeningCorrectPos)\r\n  }\r\n\r\n  const selectListeningQuizAnswer = (answer: string) => {\r\n    if (listeningQuizAnswered.value) return\r\n\r\n    listeningQuizSelected.value = answer\r\n    listeningQuizAnswered.value = true\r\n\r\n    const correctWord = currentCard.value ? currentCard.value.word.trim().toLowerCase() : ''\r\n    const isCorrect = answer.trim().toLowerCase() === correctWord\r\n\r\n    // Reflect into base Listening mode state so existing flow/stats work\r\n    listeningAnswered.value = true\r\n    listeningCorrect.value = isCorrect\r\n\r\n    if (isCorrect) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n\r\n    return isCorrect\r\n  }\r\n\r\n  // Image mode methods\r\n  const checkImageAnswer = () => {\r\n    if (!currentCard.value || imageAnswered.value) return\r\n    \r\n    imageAnswered.value = true\r\n    const userAnswer = imageAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    \r\n    imageCorrect.value = userAnswer === correctAnswer\r\n    \r\n    // Trigger effects\r\n    if (imageCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    \r\n    return imageCorrect.value\r\n  }\r\n\r\n  // Pictionary mode methods (answer by typing based on image hint)\r\n  const checkPictionaryAnswer = () => {\r\n    if (!currentCard.value || pictionaryAnswered.value) return\r\n    pictionaryAnswered.value = true\r\n    const userAnswer = pictionaryAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    pictionaryCorrect.value = userAnswer === correctAnswer\r\n    if (pictionaryCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    return pictionaryCorrect.value\r\n  }\r\n\r\n  // Flip tile mode methods (answer by typing with limited letter reveal)\r\n  const checkFlipTileAnswer = () => {\r\n    if (!currentCard.value || flipTileAnswered.value) return\r\n    flipTileAnswered.value = true\r\n    const userAnswer = flipTileAnswer.value.toLowerCase().trim()\r\n    const correctAnswer = currentCard.value.word.toLowerCase().trim()\r\n    flipTileCorrect.value = userAnswer === correctAnswer\r\n    if (flipTileCorrect.value) {\r\n      onCorrectAnswer?.()\r\n    } else {\r\n      onIncorrectAnswer?.()\r\n    }\r\n    return flipTileCorrect.value\r\n  }\r\n\r\n  const playAudio = async () => {\r\n    if (!currentCard.value) return\r\n    \r\n    try {\r\n      // Use playVoiceAudio directly for immediate reactivity\r\n      await playVoiceAudio(currentCard.value.word)\r\n    } catch (error) {\r\n      console.error('Error playing audio:', error)\r\n      // Fallback to basic speech synthesis\r\n      const utterance = new SpeechSynthesisUtterance(currentCard.value.word)\r\n      utterance.lang = 'en-US'\r\n      utterance.rate = 0.8\r\n      speechSynthesis.speak(utterance)\r\n    }\r\n  }\r\n\r\n  // Reset methods for each mode\r\n  const resetQuizMode = () => {\r\n    quizOptions.value = []\r\n    selectedAnswer.value = ''\r\n    quizAnswered.value = false\r\n    // Don't generate options here, let the parent handle it\r\n  }\r\n\r\n  const resetTypingMode = () => {\r\n    typingAnswer.value = ''\r\n    typingAnswered.value = false\r\n    typingCorrect.value = false\r\n    // Reset Typing-Quiz state but keep toggle as-is\r\n    typingQuizOptions.value = []\r\n    typingQuizSelected.value = ''\r\n    typingQuizAnswered.value = false\r\n  }\r\n\r\n  const resetListeningMode = () => {\r\n    listeningAnswer.value = ''\r\n    listeningAnswered.value = false\r\n    listeningCorrect.value = false\r\n    // Reset Listening-Quiz state but keep toggle as-is; caller decides\r\n    listeningQuizOptions.value = []\r\n    listeningQuizSelected.value = ''\r\n    listeningQuizAnswered.value = false\r\n  }\r\n\r\n  const resetImageMode = () => {\r\n    imageAnswer.value = ''\r\n    imageAnswered.value = false\r\n    imageCorrect.value = false\r\n    // Reset Image-Quiz, but keep the toggle value as-is; caller can decide\r\n    imageQuizOptions.value = []\r\n    imageQuizSelected.value = ''\r\n    imageQuizAnswered.value = false\r\n  }\r\n\r\n  const resetPictionaryMode = () => {\r\n    pictionaryAnswer.value = ''\r\n    pictionaryAnswered.value = false\r\n    pictionaryCorrect.value = false\r\n  }\r\n\r\n  const resetFlipTileMode = () => {\r\n    flipTileAnswer.value = ''\r\n    flipTileAnswered.value = false\r\n    flipTileCorrect.value = false\r\n  }\r\n\r\n  const resetPronunciationMode = () => {\r\n    if (recognition && isRecording.value) {\r\n      recognition.stop()\r\n    }\r\n    isRecording.value = false\r\n    pronunciationResult.value = ''\r\n    pronunciationAnswered.value = false\r\n    pronunciationCorrect.value = false\r\n  }\r\n\r\n  const resetAllModes = () => {\r\n    resetQuizMode()\r\n    resetTypingMode()\r\n    resetListeningMode()\r\n    resetImageMode()\r\n    resetPronunciationMode()\r\n    resetPictionaryMode()\r\n    resetFlipTileMode()\r\n  }\r\n\r\n  // Helper to check if can proceed to next card\r\n  const getCanProceed = () => {\r\n    return {\r\n      flashcard: true,\r\n      quiz: quizAnswered.value,\r\n      typing: typingAnswered.value,\r\n      listening: listeningAnswered.value,\r\n      image: imageAnswered.value,\r\n      pronunciation: pronunciationAnswered.value,\r\n      pictionary: pictionaryAnswered.value,\r\n      'flip-tile': flipTileAnswered.value,\r\n      'snake-game': true,\r\n      'bubble-shooter': true,\r\n    }\r\n  }\r\n\r\n  // Helper to get short meaning\r\n  const getShortMeaning = (meaning: string) => {\r\n    return meaning.split(' - ')[0].trim()\r\n  }\r\n\r\n  return {\r\n    // Quiz mode\r\n    quizOptions,\r\n    selectedAnswer,\r\n    quizAnswered,\r\n    generateQuizOptions,\r\n    selectQuizAnswer,\r\n    resetQuizMode,\r\n    \r\n    // Typing mode\r\n    typingAnswer,\r\n    typingAnswered,\r\n    typingCorrect,\r\n    checkTypingAnswer,\r\n    resetTypingMode,\r\n    // Typing-Quiz (within Typing mode)\r\n    typingQuizEnabled,\r\n    typingQuizOptions,\r\n    typingQuizSelected,\r\n    typingQuizAnswered,\r\n    generateTypingQuizOptions,\r\n    selectTypingQuizAnswer,\r\n    \r\n    // Listening mode\r\n    listeningAnswer,\r\n    listeningAnswered,\r\n    listeningCorrect,\r\n    checkListeningAnswer,\r\n    playAudio,\r\n    resetListeningMode,\r\n    // Listening-Quiz (within Listening mode)\r\n    listeningQuizEnabled,\r\n    listeningQuizOptions,\r\n    listeningQuizSelected,\r\n    listeningQuizAnswered,\r\n    generateListeningQuizOptions,\r\n    selectListeningQuizAnswer,\r\n    \r\n    // Image mode\r\n    imageAnswer,\r\n    imageAnswered,\r\n    imageCorrect,\r\n    checkImageAnswer,\r\n    resetImageMode,\r\n\r\n    // Image-Quiz (within Image mode)\r\n    imageQuizEnabled,\r\n    imageQuizOptions,\r\n    imageQuizSelected,\r\n    imageQuizAnswered,\r\n    generateImageQuizOptions,\r\n    selectImageQuizAnswer,\r\n\r\n    // Pictionary mode\r\n    pictionaryAnswer,\r\n    pictionaryAnswered,\r\n    pictionaryCorrect,\r\n    checkPictionaryAnswer,\r\n    resetPictionaryMode,\r\n\r\n    // Flip tile mode\r\n    flipTileAnswer,\r\n    flipTileAnswered,\r\n    flipTileCorrect,\r\n    checkFlipTileAnswer,\r\n    resetFlipTileMode,\r\n\r\n    // Bubble Shooter mode\r\n    bubbleShooterVietnameseMode,\r\n\r\n    // Pronunciation mode\r\n    isRecording,\r\n    pronunciationResult,\r\n    pronunciationAnswered,\r\n    pronunciationCorrect,\r\n    isSpeechRecognitionSupported,\r\n    startRecording,\r\n    resetPronunciationMode,\r\n    \r\n    // General\r\n    resetAllModes,\r\n    getCanProceed,\r\n    getShortMeaning\r\n  }\r\n}\r\n","import { ref, watch, onMounted } from 'vue'\r\nimport type { GameSettings } from '../types'\r\n\r\nexport function useFlashcardSettings() {\r\n  const showSettings = ref(false)\r\n  \r\n  // Default settings\r\n  const defaultSettings: GameSettings = {\r\n    cardCount: 20,\r\n    difficulty: 'all',\r\n    autoFlip: false,\r\n    flipDelay: 3,\r\n    showDefinition: true,\r\n    showExample: true,\r\n    showPronunciation: true,\r\n    shuffleCards: false,\r\n    voiceType: 'female',\r\n    practiceMode: 'flashcard',\r\n    category: '',\r\n    level: '',\r\n    useFlipTileHints: true\r\n  }\r\n\r\n  // Current settings\r\n  const settings = ref<GameSettings>({ ...defaultSettings })\r\n\r\n  // Local settings for modal editing\r\n  const localSettings = ref<GameSettings>({ ...defaultSettings })\r\n\r\n  // Load settings from localStorage\r\n  const loadSettings = () => {\r\n    const saved = localStorage.getItem('flashcard-settings')\r\n    if (saved) {\r\n      try {\r\n        const parsedSettings = JSON.parse(saved)\r\n        settings.value = { ...defaultSettings, ...parsedSettings }\r\n        localSettings.value = { ...settings.value }\r\n      } catch (error) {\r\n        console.error('Error loading settings:', error)\r\n        settings.value = { ...defaultSettings }\r\n        localSettings.value = { ...defaultSettings }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Save settings to localStorage\r\n  const saveSettings = () => {\r\n    localStorage.setItem('flashcard-settings', JSON.stringify(settings.value))\r\n  }\r\n\r\n  // Apply settings from modal\r\n  const applySettings = () => {\r\n    settings.value = { ...localSettings.value }\r\n    saveSettings()\r\n    showSettings.value = false\r\n  }\r\n\r\n  // Reset settings to default\r\n  const resetSettings = () => {\r\n    settings.value = { ...defaultSettings }\r\n    localSettings.value = { ...defaultSettings }\r\n    saveSettings()\r\n  }\r\n\r\n  // Cancel settings changes\r\n  const cancelSettings = () => {\r\n    localSettings.value = { ...settings.value }\r\n    showSettings.value = false\r\n  }\r\n\r\n  // Open settings modal\r\n  const openSettings = () => {\r\n    localSettings.value = { ...settings.value }\r\n    showSettings.value = true\r\n  }\r\n\r\n  // Settings validation\r\n  const validateSettings = (settingsToValidate: GameSettings) => {\r\n    const errors: string[] = []\r\n    \r\n    if (settingsToValidate.cardCount < 1 || settingsToValidate.cardCount > 100) {\r\n      errors.push('Số lượng thẻ phải từ 1 đến 100')\r\n    }\r\n    \r\n    if (settingsToValidate.flipDelay < 1 || settingsToValidate.flipDelay > 10) {\r\n      errors.push('Thời gian lật thẻ phải từ 1 đến 10 giây')\r\n    }\r\n    \r\n    return errors\r\n  }\r\n\r\n  // Get difficulty levels\r\n  const getDifficultyLevels = () => {\r\n    return [\r\n      { value: 'all', label: 'Tất cả' },\r\n      { value: 'easy', label: 'Dễ' },\r\n      { value: 'medium', label: 'Trung bình' },\r\n      { value: 'hard', label: 'Khó' }\r\n    ]\r\n  }\r\n\r\n  // Get flip delay options\r\n  const getFlipDelayOptions = () => {\r\n    return [\r\n      { value: 1, label: '1 giây' },\r\n      { value: 2, label: '2 giây' },\r\n      { value: 3, label: '3 giây' },\r\n      { value: 4, label: '4 giây' },\r\n      { value: 5, label: '5 giây' },\r\n      { value: 10, label: '10 giây' }\r\n    ]\r\n  }\r\n\r\n  // Get card count options\r\n  const getCardCountOptions = () => {\r\n    return [\r\n      { value: 10, label: '10 thẻ' },\r\n      { value: 20, label: '20 thẻ' },\r\n      { value: 30, label: '30 thẻ' },\r\n      { value: 50, label: '50 thẻ' },\r\n      { value: 100, label: '100 thẻ' }\r\n    ]\r\n  }\r\n\r\n  // Get voice type options\r\n  const getVoiceTypeOptions = () => {\r\n    return [\r\n      { value: 'female', label: 'Giọng nữ', icon: '👩' },\r\n      { value: 'male', label: 'Giọng nam', icon: '👨' }\r\n    ]\r\n  }\r\n\r\n  // Settings presets\r\n  const getSettingsPresets = () => {\r\n    return {\r\n      beginner: {\r\n        ...defaultSettings,\r\n        cardCount: 10,\r\n        difficulty: 'easy' as const,\r\n        autoFlip: true,\r\n        flipDelay: 5,\r\n        showDefinition: true,\r\n        showExample: true,\r\n        showPronunciation: true\r\n      },\r\n      intermediate: {\r\n        ...defaultSettings,\r\n        cardCount: 20,\r\n        difficulty: 'medium' as const,\r\n        autoFlip: false,\r\n        showDefinition: true,\r\n        showExample: true,\r\n        showPronunciation: false\r\n      },\r\n      advanced: {\r\n        ...defaultSettings,\r\n        cardCount: 50,\r\n        difficulty: 'hard' as const,\r\n        autoFlip: false,\r\n        showDefinition: false,\r\n        showExample: false,\r\n        showPronunciation: false\r\n      }\r\n    }\r\n  }\r\n\r\n  // Apply preset\r\n  const applyPreset = (presetName: 'beginner' | 'intermediate' | 'advanced') => {\r\n    const presets = getSettingsPresets()\r\n    localSettings.value = { ...presets[presetName] }\r\n  }\r\n\r\n  // Watch for settings changes to auto-save\r\n  watch(settings, () => {\r\n    saveSettings()\r\n  }, { deep: true })\r\n\r\n  onMounted(() => {\r\n    loadSettings()\r\n  })\r\n\r\n  return {\r\n    showSettings,\r\n    settings,\r\n    localSettings,\r\n    applySettings,\r\n    resetSettings,\r\n    cancelSettings,\r\n    openSettings,\r\n    validateSettings,\r\n    getDifficultyLevels,\r\n    getFlipDelayOptions,\r\n    getCardCountOptions,\r\n    getVoiceTypeOptions,\r\n    getSettingsPresets,\r\n    applyPreset\r\n  }\r\n}\r\n","import { ref, computed, type Ref } from 'vue'\r\n\r\nexport interface SessionStats {\r\n  totalCards: number\r\n  currentCard: number\r\n  correctAnswers: number\r\n  incorrectAnswers: number\r\n  accuracy: number\r\n  streak: number\r\n  maxStreak: number\r\n  timeSpent: number\r\n  averageTimePerCard: number\r\n  score: number\r\n}\r\n\r\nexport function useFlashcardStats(stats: Ref<GameStats>) {\r\n  const sessionStats = ref<SessionStats>({\r\n    totalCards: 0,\r\n    currentCard: 0,\r\n    correctAnswers: 0,\r\n    incorrectAnswers: 0,\r\n    accuracy: 0,\r\n    streak: 0,\r\n    maxStreak: 0,\r\n    timeSpent: 0,\r\n    averageTimePerCard: 0,\r\n    score: 0\r\n  })\r\n\r\n  const currentStreak = ref(0)\r\n  const maxStreak = ref(0)\r\n  const cardStartTime = ref<Date | null>(null)\r\n  const cardTimes = ref<number[]>([])\r\n\r\n  // Initialize session stats\r\n  const initializeStats = (totalCards: number) => {\r\n    sessionStats.value = {\r\n      totalCards,\r\n      currentCard: 0,\r\n      correctAnswers: 0,\r\n      incorrectAnswers: 0,\r\n      accuracy: 0,\r\n      streak: 0,\r\n      maxStreak: 0,\r\n      timeSpent: 0,\r\n      averageTimePerCard: 0,\r\n      score: 0\r\n    }\r\n    currentStreak.value = 0\r\n    maxStreak.value = 0\r\n    cardTimes.value = []\r\n    cardStartTime.value = new Date()\r\n  }\r\n\r\n  // Record answer\r\n  const recordAnswer = (isCorrect: boolean) => {\r\n    if (isCorrect) {\r\n      sessionStats.value.correctAnswers++\r\n      stats.value.correct++\r\n      currentStreak.value++\r\n      if (currentStreak.value > maxStreak.value) {\r\n        maxStreak.value = currentStreak.value\r\n      }\r\n    } else {\r\n      sessionStats.value.incorrectAnswers++\r\n      stats.value.incorrect++\r\n      currentStreak.value = 0\r\n    }\r\n\r\n    // Update total\r\n    stats.value.total++\r\n\r\n    // Record time spent on this card\r\n    if (cardStartTime.value) {\r\n      const timeSpent = new Date().getTime() - cardStartTime.value.getTime()\r\n      cardTimes.value.push(timeSpent)\r\n      cardStartTime.value = new Date()\r\n    }\r\n\r\n    nextCardStats()\r\n  }\r\n\r\n  // Move to next card and update reviewed count\r\n  const nextCardStats = () => {\r\n    stats.value.reviewed++\r\n    sessionStats.value.currentCard++\r\n    cardStartTime.value = new Date()\r\n  }\r\n\r\n  // Update computed stats\r\n  const updateStats = () => {\r\n    const total = sessionStats.value.correctAnswers + sessionStats.value.incorrectAnswers\r\n    sessionStats.value.accuracy = total > 0 ? Math.round((sessionStats.value.correctAnswers / total) * 100) : 0\r\n    sessionStats.value.streak = currentStreak.value\r\n    sessionStats.value.maxStreak = maxStreak.value\r\n    sessionStats.value.timeSpent = cardTimes.value.reduce((sum, time) => sum + time, 0)\r\n    sessionStats.value.averageTimePerCard = cardTimes.value.length > 0 \r\n      ? Math.round(sessionStats.value.timeSpent / cardTimes.value.length)\r\n      : 0\r\n    sessionStats.value.score = calculateScore()\r\n  }\r\n\r\n  // Calculate score based on accuracy, speed, and streak\r\n  const calculateScore = () => {\r\n    const { accuracy, averageTimePerCard, maxStreak } = sessionStats.value\r\n    \r\n    // Base score from accuracy (0-100)\r\n    let score = accuracy\r\n    \r\n    // Speed bonus (faster = higher score)\r\n    const speedBonus = averageTimePerCard > 0 ? Math.max(0, 50 - Math.floor(averageTimePerCard / 1000)) : 0\r\n    \r\n    // Streak bonus (longer streak = higher score)\r\n    const streakBonus = Math.min(50, maxStreak * 5)\r\n    \r\n    return Math.round(score + speedBonus + streakBonus)\r\n  }\r\n\r\n  // Get performance level\r\n  const getPerformanceLevel = computed(() => {\r\n    const accuracy = sessionStats.value.accuracy\r\n    if (accuracy >= 90) return { level: 'Xuất sắc', color: 'text-green-600 dark:text-green-400' }\r\n    if (accuracy >= 80) return { level: 'Tốt', color: 'text-blue-600 dark:text-blue-400' }\r\n    if (accuracy >= 70) return { level: 'Khá', color: 'text-yellow-600 dark:text-yellow-400' }\r\n    if (accuracy >= 60) return { level: 'Trung bình', color: 'text-orange-600 dark:text-orange-400' }\r\n    return { level: 'Cần cải thiện', color: 'text-red-600 dark:text-red-400' }\r\n  })\r\n\r\n  // Get streak message\r\n  const getStreakMessage = computed(() => {\r\n    const streak = currentStreak.value\r\n    if (streak === 0) return ''\r\n    if (streak < 3) return 'Bắt đầu tốt!'\r\n    if (streak < 5) return 'Đang tiến bộ!'\r\n    if (streak < 10) return 'Tuyệt vời!'\r\n    return 'Xuất sắc!'\r\n  })\r\n\r\n  // Get speed rating\r\n  const getSpeedRating = computed(() => {\r\n    const avgTime = sessionStats.value.averageTimePerCard / 1000 // Convert to seconds\r\n    if (avgTime === 0) return { rating: '', color: '' }\r\n    if (avgTime < 2) return { rating: 'Rất nhanh', color: 'text-green-600 dark:text-green-400' }\r\n    if (avgTime < 4) return { rating: 'Nhanh', color: 'text-blue-600 dark:text-blue-400' }\r\n    if (avgTime < 6) return { rating: 'Trung bình', color: 'text-yellow-600 dark:text-yellow-400' }\r\n    if (avgTime < 10) return { rating: 'Chậm', color: 'text-orange-600 dark:text-orange-400' }\r\n    return { rating: 'Rất chậm', color: 'text-red-600 dark:text-red-400' }\r\n  })\r\n\r\n  // Format time\r\n  const formatTime = (milliseconds: number) => {\r\n    const seconds = Math.floor(milliseconds / 1000)\r\n    const minutes = Math.floor(seconds / 60)\r\n    const remainingSeconds = seconds % 60\r\n    \r\n    if (minutes > 0) {\r\n      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`\r\n    }\r\n    return `${remainingSeconds}s`\r\n  }\r\n\r\n  // Get detailed stats for modal\r\n  const getDetailedStats = computed(() => {\r\n    return {\r\n      ...sessionStats.value,\r\n      performanceLevel: getPerformanceLevel.value,\r\n      streakMessage: getStreakMessage.value,\r\n      speedRating: getSpeedRating.value,\r\n      timeSpentFormatted: formatTime(sessionStats.value.timeSpent),\r\n      averageTimeFormatted: formatTime(sessionStats.value.averageTimePerCard),\r\n      completion: sessionStats.value.totalCards > 0 \r\n        ? Math.round((sessionStats.value.currentCard / sessionStats.value.totalCards) * 100)\r\n        : 0\r\n    }\r\n  })\r\n\r\n  // Stats are now synchronized directly in recordAnswer\r\n\r\n  return {\r\n    sessionStats,\r\n    currentStreak,\r\n    maxStreak,\r\n    initializeStats,\r\n    recordAnswer,\r\n    nextCardStats,\r\n    getPerformanceLevel,\r\n    getStreakMessage,\r\n    getSpeedRating,\r\n    formatTime,\r\n    getDetailedStats\r\n  }\r\n}\r\n\r\n// A new type definition for GameStats\r\nexport interface GameStats {\r\n  easy: number;\r\n  difficult: number;\r\n  reviewed: number;\r\n  correct: number;\r\n  incorrect: number;\r\n  total: number;\r\n  startTime: Date;\r\n  endTime: Date | null;\r\n  mode: string;\r\n  categories?: string[];\r\n}\r\n","import { ref } from 'vue'\n\nexport interface SessionDetailEntry {\n  cardId: number\n  word: string\n  meaningShort: string\n  userAnswer: string\n  correctAnswer: string\n  isCorrect: boolean\n  mode: string\n  timestamp: string\n  notes?: string\n  // Optional extra data for mode-specific details (backward-compatible)\n  extra?: SessionDetailEntryExtra\n}\n\nexport interface SessionDetails {\n  sessionId: string\n  mode: string\n  total: number\n  correct: number\n  incorrect: number\n  entries: SessionDetailEntry[]\n}\n\n// Mode-specific extra payloads stored alongside entries\nexport interface SessionDetailEntryExtra {\n  pictionary?: {\n    image?: string\n    slots: { char: string; fixed: boolean; separator?: boolean }[]\n  }\n  snakeGame?: {\n    position: { x: number; y: number }\n    wasCorrect: boolean\n    foodType: 'primary' | 'secondary'\n    snakeLength: number\n    gameScore: number\n    wordsCompleted: number\n    wrongEatenCount: number\n    snakeBody: { x: number; y: number }[]\n    direction: { x: number; y: number }\n    // Optional timeline frames for accurate replay (when recording is enabled)\n    timelineFrames?: Array<{\n      body: { x: number; y: number }[]\n      direction: { x: number; y: number }\n    }>\n  }\n}\n\nconst makeKey = (sessionId: string) => `flashcard-session-details:${sessionId}`\n\nexport function usePracticeSessionDetails() {\n  const currentSessionId = ref<string | null>(null)\n  const currentMode = ref<string>('')\n\n  const startSessionDetails = (sessionId: string, mode: string) => {\n    currentSessionId.value = sessionId\n    currentMode.value = mode\n    const initial: SessionDetails = {\n      sessionId,\n      mode,\n      total: 0,\n      correct: 0,\n      incorrect: 0,\n      entries: [],\n    }\n    try {\n      localStorage.setItem(makeKey(sessionId), JSON.stringify(initial))\n    } catch {}\n  }\n\n  const appendAnswer = (payload: Omit<SessionDetailEntry, 'timestamp'> & { timestamp?: string }) => {\n    if (!currentSessionId.value) return\n    const key = makeKey(currentSessionId.value)\n    let data: SessionDetails | null = null\n    try {\n      const raw = localStorage.getItem(key)\n      data = raw ? (JSON.parse(raw) as SessionDetails) : null\n    } catch {}\n    if (!data) {\n      data = {\n        sessionId: currentSessionId.value,\n        mode: currentMode.value,\n        total: 0,\n        correct: 0,\n        incorrect: 0,\n        entries: [],\n      }\n    }\n    const entry: SessionDetailEntry = {\n      ...payload,\n      timestamp: payload.timestamp || new Date().toISOString(),\n    }\n    data.entries.push(entry)\n    data.total += 1\n    if (entry.isCorrect) data.correct += 1\n    else data.incorrect += 1\n\n    try {\n      localStorage.setItem(key, JSON.stringify(data))\n    } catch {}\n  }\n\n  const loadDetails = (sessionId: string): SessionDetails | null => {\n    try {\n      const raw = localStorage.getItem(makeKey(sessionId))\n      return raw ? (JSON.parse(raw) as SessionDetails) : null\n    } catch {\n      return null\n    }\n  }\n\n  const clearDetails = (sessionId: string) => {\n    try {\n      localStorage.removeItem(makeKey(sessionId))\n    } catch {}\n  }\n\n  return {\n    currentSessionId,\n    currentMode,\n    startSessionDetails,\n    appendAnswer,\n    loadDetails,\n    clearDetails,\n  }\n}\n","<template>\n  <div class=\"min-h-screen overflow-x-hidden bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-dark-bg-soft dark:to-dark-bg-mute relative\">\n    <!-- Animated Background Elements (match Dashboard) -->\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      <div class=\"floating-shapes\">\n        <div class=\"absolute top-24 left-8 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\n        <div class=\"absolute top-40 right-10 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\n        <div class=\"absolute -bottom-10 left-24 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\n      </div>\n    </div>\n    <!-- Header -->\n    <FlashcardHeader\n      :current-index=\"currentIndex\"\n      :total-cards=\"currentFlashcards.length\"\n      :practice-mode=\"practiceMode\"\n      :shuffle-enabled=\"shuffleEnabled\"\n      :practice-started=\"practiceStarted\"\n      :image-quiz-enabled=\"imageQuizEnabled\"\n      :listening-quiz-enabled=\"listeningQuizEnabled\"\n      :typing-quiz-enabled=\"typingQuizEnabled\"\n      :image-mode-available=\"imageModeAvailable\"\n      :pictionary-mode-available=\"pictionaryModeAvailable\"\n      :flip-tile-mode-available=\"flipTileModeAvailable\"\n      :bubble-shooter-mode-available=\"bubbleShooterModeAvailable\"\n      :bubble-shooter-vietnamese-mode=\"bubbleShooterVietnameseMode\"\n      :snake-double-bait-enabled=\"snakeDoubleBaitMode\"\n      :pictionary-definition-mode=\"pictionaryDefinitionMode\"\n      :scramble-words-enabled=\"scrambleWordsEnabled\"\n      :words-crush-enabled=\"wordsCrushEnabled\"\n      :use-flip-tile-hints=\"flashcardSettings.useFlipTileHints\"\n      @go-back=\"goBack\"\n      @show-history=\"showHistory = true\"\n      @change-practice-mode=\"changePracticeMode($event)\"\n      @show-settings=\"showSettingsDialog = true\"\n      @toggle-shuffle=\"toggleShuffle\"\n      @update:image-quiz-enabled=\"imageQuizEnabled = $event\"\n      @update:listening-quiz-enabled=\"listeningQuizEnabled = $event\"\n      @update:typing-quiz-enabled=\"typingQuizEnabled = $event\"\n      @update:bubble-shooter-vietnamese-mode=\"bubbleShooterVietnameseMode = $event\"\n      @update:snake-double-bait-enabled=\"snakeDoubleBaitMode = $event\"\n      @update:pictionary-definition-mode=\"pictionaryDefinitionMode = $event\"\n      @update:scramble-words-enabled=\"scrambleWordsEnabled = $event\"\n      @update:words-crush-enabled=\"wordsCrushEnabled = $event\"\n      @update:use-flip-tile-hints=\"handleFlipTileHintsToggle\"\n    />\n\n    <!-- Progress Bar -->\n    <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.1\" root-margin=\"-50px\">\n      <FlashcardProgress :progress-percentage=\"currentProgressPercentage\" />\n    </LazyLoadComponent>\n\n    <!-- Voice Settings -->\n    <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.1\" root-margin=\"-50px\">\n      <div class=\"max-w-4xl mx-auto px-3 sm:px-4 md:px-6 py-2 sm:py-3 md:py-4\">\n        <div class=\"group bg-white/80 dark:bg-dark-bg-soft/80 backdrop-blur-md rounded-2xl shadow-xl hover:shadow-2xl border border-white/20 dark:border-dark-bg-mute transition-all duration-500 hover:scale-[1.01] hover:-translate-y-0.5 p-3 sm:p-4 md:p-5\">\n          <VoiceSelector :show-voice-info=\"false\" />\n        </div>\n      </div>\n    </LazyLoadComponent>\n\n    <!-- Date Filter -->\n    <LazyLoadComponent animation-type=\"slide-right\" :threshold=\"0.1\" root-margin=\"-50px\">\n      <div class=\"max-w-4xl mx-auto px-3 sm:px-4 md:px-6 py-2 sm:py-3 md:py-4\">\n        <div class=\"group relative overflow-visible bg-white/80 dark:bg-dark-bg-soft/80 backdrop-blur-md rounded-2xl shadow-xl hover:shadow-2xl border border-white/20 dark:border-dark-bg-mute transition-all duration-500 hover:scale-[1.01] hover:-translate-y-0.5 p-3 sm:p-4 md:p-5\">\n          <FlashcardDateFilter\n            :vocabularies=\"allVocabularies\"\n            :selectedDate=\"selectedDate\"\n            :practice-started=\"practiceStarted\"\n            @update:selectedDate=\"selectedDate = $event\"\n          />\n        </div>\n      </div>\n    </LazyLoadComponent>\n\n    <!-- Practice Container -->\n    <div class=\"max-w-4xl mx-auto px-3 sm:px-4 md:px-6 py-4 sm:py-6 md:py-8\">\n      <div v-if=\"currentFlashcards.length > 0\" class=\"relative\">\n        <!-- Practice Glass Container -->\n        <div class=\"group relative overflow-hidden bg-white/80 dark:bg-dark-bg-soft/80 backdrop-blur-md rounded-2xl shadow-xl hover:shadow-2xl border border-white/20 dark:border-dark-bg-mute transition-all duration-500 p-3 sm:p-4 md:p-6\">\n          <div class=\"space-y-4 sm:space-y-5 md:space-y-6\">\n            <!-- Practice Timer / Start Button -->\n            <LazyLoadComponent animation-type=\"fade-up\" :threshold=\"0.1\" root-margin=\"-50px\">\n              <div class=\"flex justify-center max-w-md mx-auto\">\n                <!-- Simple Start Button for Bubble Shooter & Snake modes (no countdown timer) -->\n                <template v-if=\"practiceMode === 'bubble-shooter' || practiceMode === 'snake-game'\">\n                  <button\n                    v-if=\"!practiceStarted\"\n                    @click=\"handlePracticeStart\"\n                    class=\"px-8 py-4 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 dark:from-purple-700 dark:to-pink-700 dark:hover:from-purple-800 dark:hover:to-pink-800 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200\"\n                  >\n                    {{ t('practice.startGame', 'Start Game') }}\n                  </button>\n                </template>\n                <!-- Normal Timer for Other Modes -->\n                <template v-else>\n                  <PracticeTimer\n                    ref=\"practiceTimerRef\"\n                    :max-time=\"30\"\n                    @start=\"handlePracticeStart\"\n                    @timeout=\"handleTimeout\"\n                    @restart=\"handleTimerRestart\"\n                    @skip=\"handleSkip\"\n                  />\n                </template>\n              </div>\n            </LazyLoadComponent>\n\n            <!-- Practice Content (only show after started) -->\n            <div v-if=\"practiceStarted\">\n              <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.1\" root-margin=\"-50px\">\n                <template v-if=\"practiceMode === 'flashcard'\">\n                  <FlashcardCard\n                    :current-card=\"currentShuffledCard\"\n                    :is-flipped=\"isFlipped\"\n                    :scramble-words-enabled=\"scrambleWordsEnabled\"\n                    :current-index=\"currentIndex\"\n                    :total-cards=\"currentFlashcards.length\"\n                    @flip-card=\"flipCard\"\n                    @next-card=\"enhancedNextCard\"\n                    @show-results=\"completeSession\"\n                    @scramble-answer=\"handleScrambleAnswer\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'pictionary'\">\n                  <PictionaryMode\n                    :card=\"currentShuffledCard\"\n                    :pictionary-answer=\"pictionaryAnswer\"\n                    :pictionary-answered=\"pictionaryAnswered\"\n                    :pictionary-correct=\"pictionaryCorrect\"\n                    :definition-mode=\"pictionaryDefinitionMode\"\n                    :get-topic-name=\"getTopicName\"\n                    @update:pictionary-answer=\"pictionaryAnswer = $event\"\n                    @check-answer=\"handlePictionaryAnswer\"\n                    @pictionary-snapshot=\"onPictionarySnapshot\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'quiz'\">\n                  <FlashcardQuiz\n                    :current-card=\"currentShuffledCard\"\n                    :quiz-options=\"quizOptions\"\n                    :selected-answer=\"selectedAnswer\"\n                    :quiz-answered=\"quizAnswered\"\n                    @select-answer=\"handleQuizAnswer\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'typing'\">\n                  <FlashcardTyping\n                    :current-card=\"currentShuffledCard\"\n                    :typing-answer=\"typingAnswer\"\n                    :typing-answered=\"typingAnswered\"\n                    :typing-correct=\"typingCorrect\"\n                    :typing-quiz-enabled=\"typingQuizEnabled\"\n                    :typing-quiz-options=\"typingQuizOptions\"\n                    :typing-quiz-selected=\"typingQuizSelected\"\n                    :typing-quiz-answered=\"typingQuizAnswered\"\n                    @update:typing-answer=\"typingAnswer = $event\"\n                    @check-answer=\"handleTypingAnswer\"\n                    @select-typing-quiz-answer=\"handleTypingQuizAnswer($event)\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'image'\">\n                  <FlashcardImage\n                    :current-card=\"currentShuffledCard\"\n                    :image-answer=\"imageAnswer\"\n                    :image-answered=\"imageAnswered\"\n                    :image-correct=\"imageCorrect\"\n                    :image-quiz-enabled=\"imageQuizEnabled\"\n                    :image-quiz-options=\"imageQuizOptions\"\n                    :image-quiz-selected=\"imageQuizSelected\"\n                    :image-quiz-answered=\"imageQuizAnswered\"\n                    @update:image-answer=\"imageAnswer = $event\"\n                    @check-answer=\"handleImageAnswer\"\n                    @update:image-quiz-enabled=\"onToggleImageQuiz($event)\"\n                    @select-image-quiz-answer=\"handleImageQuizAnswer($event)\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'listening'\">\n                  <ListeningMode\n                    :card=\"currentShuffledCard\"\n                    :listening-answer=\"listeningAnswer\"\n                    @update:listening-answer=\"listeningAnswer = $event\"\n                    :listening-answered=\"listeningAnswered\"\n                    :listening-correct=\"listeningCorrect\"\n                    :listening-quiz-enabled=\"listeningQuizEnabled\"\n                    :listening-quiz-options=\"listeningQuizOptions\"\n                    :listening-quiz-selected=\"listeningQuizSelected\"\n                    :listening-quiz-answered=\"listeningQuizAnswered\"\n                    :get-topic-name=\"getTopicName\"\n                    @check-answer=\"handleListeningAnswer\"\n                    @play-audio=\"playAudio\"\n                    @select-listening-quiz-answer=\"handleListeningQuizAnswer($event)\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'pronunciation'\">\n                  <PronunciationMode\n                    :card=\"currentShuffledCard\"\n                    :is-recording=\"isRecording\"\n                    :pronunciation-result=\"pronunciationResult\"\n                    :pronunciation-answered=\"pronunciationAnswered\"\n                    :pronunciation-correct=\"pronunciationCorrect\"\n                    :is-speech-recognition-supported=\"isSpeechRecognitionSupported\"\n                    :get-topic-name=\"getTopicName\"\n                    :words-crush-enabled=\"wordsCrushEnabled\"\n                    @start-recording=\"startRecording\"\n                    @game-completed=\"handleWordsCrushCompleted\"\n                    @play-audio=\"playAudio\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'bubble-shooter'\">\n                  <BubbleShooterMode\n                    :words=\"currentFlashcards\"\n                    :vietnamese-mode=\"bubbleShooterVietnameseMode\"\n                    @game-complete=\"handleBubbleShooterComplete\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'snake-game'\">\n                  <SnakeGameMode\n                    :words=\"currentFlashcards\"\n                    :vietnamese-mode=\"bubbleShooterVietnameseMode\"\n                    :double-bait-mode=\"snakeDoubleBaitMode\"\n                    :record-timeline=\"true\"\n                    @game-complete=\"handleSnakeGameComplete\"\n                    @correct-food-eaten=\"handleSnakeCorrectFoodEaten\"\n                    @wrong-food-eaten=\"handleSnakeWrongFoodEaten\"\n                  />\n                </template>\n                <template v-else-if=\"practiceMode === 'flip-tile'\">\n                  <FlipTileMode\n                    :card=\"currentShuffledCard\"\n                    :flip-tile-answer=\"flipTileAnswer\"\n                    :flip-tile-answered=\"flipTileAnswered\"\n                    :flip-tile-correct=\"flipTileCorrect\"\n                    :get-topic-name=\"getTopicName\"\n                    :use-hints=\"flashcardSettings.useFlipTileHints\"\n                    @update:flip-tile-answer=\"flipTileAnswer = $event\"\n                    @check-answer=\"handleFlipTileAnswer\"\n                  />\n                </template>\n              </LazyLoadComponent>\n\n              <!-- Controls -->\n              <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.1\" root-margin=\"-50px\">\n                <FlashcardControls\n                  :practice-mode=\"practiceMode\"\n                  :current-index=\"currentIndex\"\n                  :total-cards=\"currentFlashcards.length\"\n                  :can-proceed=\"getCanProceed()[practiceMode]\"\n                  :practice-started=\"practiceStarted\"\n                  :scramble-words-enabled=\"scrambleWordsEnabled\"\n                  :typing-answer=\"typingAnswer\"\n                  :typing-answered=\"typingAnswered\"\n                  :listening-answer=\"listeningAnswer\"\n                  :listening-answered=\"listeningAnswered\"\n                  :image-answer=\"imageAnswer\"\n                  :image-answered=\"imageAnswered\"\n                  @mark-difficult=\"enhancedMarkDifficult\"\n                  @mark-easy=\"enhancedMarkEasy\"\n                  @previous-card=\"enhancedPreviousCard\"\n                  @next-card=\"enhancedNextCard\"\n                  @check-typing-answer=\"handleTypingAnswer\"\n                  @check-listening-answer=\"handleListeningAnswer\"\n                  @check-image-answer=\"handleImageAnswer\"\n                  @exit-practice=\"handleExitPractice\"\n                />\n              </LazyLoadComponent>\n\n              <!-- Stats -->\n              <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.1\" root-margin=\"-50px\">\n                <PracticeStats :stats=\"stats\" :mode=\"practiceMode\" />\n              </LazyLoadComponent>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Empty State -->\n      <LazyLoadComponent animation-type=\"fade-up\" :threshold=\"0.1\" root-margin=\"-50px\">\n        <FlashcardEmptyState v-if=\"currentFlashcards.length === 0\" @go-to-vocabulary=\"goToVocabulary\" />\n      </LazyLoadComponent>\n    </div>\n\n    <!-- Settings Modal -->\n    <SettingsModal\n      :show=\"showSettingsDialog\"\n      :settings=\"settings\"\n      :local-settings=\"localSettings\"\n      :date-filter-enabled=\"dateFilterEnabled\"\n      :selected-date=\"selectedDate\"\n      @update:local-settings=\"localSettings = $event\"\n      @cancel=\"cancelSettings\"\n      @apply=\"applyGameSettings\"\n    />\n\n    <!-- History Modal -->\n    <HistoryModal\n      :show=\"showHistory\"\n      :history=\"practiceHistory\"\n      :get-mode-color=\"getModeColor\"\n      :get-mode-text=\"getModeText\"\n      :format-date=\"formatDate\"\n      :format-duration=\"formatDuration\"\n      @close=\"showHistory = false\"\n      @open-details=\"openHistoryDetails\"\n      @delete-session=\"handleDeleteSession\"\n    />\n\n    <!-- Session Detail Modal -->\n    <SessionDetailModal\n      :show=\"showSessionDetail\"\n      :details=\"selectedSessionDetails\"\n      @close=\"showSessionDetail = false\"\n    />\n\n    <!-- Completion Modal -->\n    <CompletionModal\n      :show=\"showCompletionModal\"\n      :stats=\"stats\"\n      :card-count=\"flashcards.length\"\n      @restart=\"handleRestartSession\"\n      @go-back=\"handleCompletionGoBack\"\n    />\n\n    <!-- Exit Warning Modal -->\n    <ExitWarningModal\n      :show=\"showExitWarning\"\n      @continue=\"continueSession\"\n      @confirm=\"confirmExit\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, onUnmounted, watch, defineAsyncComponent } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useI18n } from 'vue-i18n'\nimport { useToast } from 'vue-toastification'\nimport { useVocabularyStore } from '../../composables/useVocabularyStore'\nimport type { Vocabulary } from '../../composables/useVocabularyStore'\nimport { getDateKey } from '../../utils/dateUtils'\nimport { useModalStore } from '../../stores/modalStore'\n\nconst ConfirmToast = defineAsyncComponent(() => import('../../components/common/ConfirmToast.vue'))\n\n// Initialize i18n and toast\nconst { t } = useI18n()\nconst router = useRouter()\nconst toast = useToast()\n\n// Single-line import of all async components (local composable)\nimport AsyncComponents from './composables/asyncComponents'\n\n// Register all async components for template usage\ndefineOptions({ components: AsyncComponents })\n\n// Composables\nimport { useFlashcardGame } from './composables/useFlashcardGame'\nimport { useFlashcardModes } from './composables/useFlashcardModes'\nimport { useFlashcardHistory } from './composables/useFlashcardHistory'\nimport { useFlashcardSettings } from './composables/useFlashcardSettings'\nimport { useFlashcardStats } from './composables/useFlashcardStats'\nimport { getTopicName } from '../../utils/topicUtils'\nimport { usePracticeSessionDetails } from './composables/usePracticeSessionDetails'\n\n// Vocabulary store\nconst { allVocabularies } = useVocabularyStore()\n\n// Modal store for controlling back to top and body scroll\nconst modalStore = useModalStore()\n\n// Session details logging\nconst {\n  startSessionDetails,\n  appendAnswer,\n  loadDetails,\n} = usePracticeSessionDetails()\nconst activeSessionId = ref<string | null>(null)\nconst showSessionDetail = ref(false)\nconst selectedSessionDetails = ref<ReturnType<typeof loadDetails>>(null)\n\n// Capture pictionary slot snapshots emitted by PictionaryMode for detailed history\nconst latestPictionarySnapshot = ref<{ slots: { char: string; fixed: boolean; separator?: boolean }[] } | null>(null)\nconst onPictionarySnapshot = (payload: { slots: { char: string; fixed: boolean; separator?: boolean }[] }) => {\n  latestPictionarySnapshot.value = payload\n}\n\n// Open details modal from history list\nconst openHistoryDetails = (sessionId: string) => {\n  const details = loadDetails(sessionId)\n  selectedSessionDetails.value = details\n  showSessionDetail.value = true\n}\n\n// Handle delete session from history modal with confirmation\nconst handleDeleteSession = (sessionId: string) => {\n  const toastId = toast(\n    {\n      component: ConfirmToast,\n      props: {\n        message: t('flashcard.history.confirmDelete.message', 'Are you sure you want to delete this practice session? This action cannot be undone.'),\n        confirmText: t('flashcard.history.confirmDelete.confirm', 'Delete'),\n        cancelText: t('flashcard.history.confirmDelete.cancel', 'Cancel'),\n        onConfirm: () => {\n          deleteSession(sessionId)\n          toast.success(t('flashcard.history.confirmDelete.success', 'Session deleted successfully'))\n          toast.dismiss(toastId)\n        },\n        onCancel: () => {\n          toast.dismiss(toastId)\n        }\n      }\n    },\n    {\n      timeout: 0,\n      closeOnClick: false,\n      showCloseButtonOnHover: false,\n      hideProgressBar: true\n    }\n  )\n}\n\n// Date filter state with localStorage persistence\nconst STORAGE_KEY = 'flashcard-date-filter'\n\n// Load date filter state from localStorage (always enabled)\nconst loadDateFilterState = () => {\n  try {\n    const saved = localStorage.getItem(STORAGE_KEY)\n    if (saved) {\n      const parsed = JSON.parse(saved)\n      return {\n        selectedDate: parsed.selectedDate || ''\n      }\n    }\n  } catch (error) {\n    console.error('Error loading date filter state:', error)\n  }\n  return { selectedDate: '' }\n}\n\n// Save date filter state to localStorage (enabled is implicitly true)\nconst saveDateFilterState = () => {\n  try {\n    const state = { selectedDate: selectedDate.value }\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(state))\n  } catch (error) {\n    console.error('Error saving date filter state:', error)\n  }\n}\n\n// Initialize state from localStorage\nconst initialState = loadDateFilterState()\n// Keep ref for SettingsModal compatibility; always true\nconst dateFilterEnabled = ref(true)\nconst selectedDate = ref(initialState.selectedDate)\n\n// Persist date filter changes\nwatch(selectedDate, () => {\n  saveDateFilterState()\n})\n\n// Bubble Shooter Vietnamese Mode Toggle State with localStorage support\nconst bubbleShooterVietnameseMode = ref(false)\n// Snake Game Double Bait Mode Toggle State with localStorage support\nconst snakeDoubleBaitMode = ref(false)\n// Pictionary Definition Mode Toggle State with localStorage support\nconst pictionaryDefinitionMode = ref(false)\n// Scramble Words Mode Toggle State with localStorage support\nconst scrambleWordsEnabled = ref(false)\n// Words Crush Mode Toggle State with localStorage support\nconst wordsCrushEnabled = ref(false)\n\n// Load from localStorage on init\nconst loadBubbleShooterVietnameseModeFromStorage = () => {\n  try {\n    const saved = localStorage.getItem('pe_bubbleShooterVietnameseMode')\n    return saved === null ? false : saved === 'true'\n  } catch {\n    return false\n  }\n}\n\n// Save to localStorage\nconst saveBubbleShooterVietnameseModeToStorage = (enabled: boolean) => {\n  try {\n    localStorage.setItem('pe_bubbleShooterVietnameseMode', String(enabled))\n  } catch {}\n}\n\n// Load/Save helpers for Snake Double Bait mode\nconst loadSnakeDoubleBaitModeFromStorage = () => {\n  try {\n    const saved = localStorage.getItem('pe_snakeDoubleBaitMode')\n    return saved === null ? false : saved === 'true'\n  } catch {\n    return false\n  }\n}\n\nconst saveSnakeDoubleBaitModeToStorage = (enabled: boolean) => {\n  try {\n    localStorage.setItem('pe_snakeDoubleBaitMode', String(enabled))\n  } catch {}\n}\n\n// Load/Save helpers for Pictionary Definition mode\nconst loadPictionaryDefinitionModeFromStorage = () => {\n  try {\n    const saved = localStorage.getItem('pe_pictionaryDefinitionMode')\n    return saved === null ? false : saved === 'true'\n  } catch {\n    return false\n  }\n}\n\nconst savePictionaryDefinitionModeToStorage = (enabled: boolean) => {\n  try {\n    localStorage.setItem('pe_pictionaryDefinitionMode', String(enabled))\n  } catch {}\n}\n\n// Load/Save helpers for Scramble Words mode\nconst loadScrambleWordsModeFromStorage = () => {\n  try {\n    const saved = localStorage.getItem('pe_scrambleWordsEnabled')\n    return saved === null ? false : saved === 'true'\n  } catch {\n    return false\n  }\n}\n\nconst saveScrambleWordsModeToStorage = (enabled: boolean) => {\n  try {\n    localStorage.setItem('pe_scrambleWordsEnabled', String(enabled))\n  } catch {}\n}\n\n// Load/Save helpers for Words Crush mode\nconst loadWordsCrushModeFromStorage = () => {\n  try {\n    const saved = localStorage.getItem('pe_wordsCrushEnabled')\n    return saved === null ? false : saved === 'true'\n  } catch {\n    return false\n  }\n}\n\nconst saveWordsCrushModeToStorage = (enabled: boolean) => {\n  try {\n    localStorage.setItem('pe_wordsCrushEnabled', String(enabled))\n  } catch {}\n}\n\n// Initialize from localStorage\nbubbleShooterVietnameseMode.value = loadBubbleShooterVietnameseModeFromStorage()\nsnakeDoubleBaitMode.value = loadSnakeDoubleBaitModeFromStorage()\npictionaryDefinitionMode.value = loadPictionaryDefinitionModeFromStorage()\nscrambleWordsEnabled.value = loadScrambleWordsModeFromStorage()\nwordsCrushEnabled.value = loadWordsCrushModeFromStorage()\n\n// Watch for changes and save to localStorage\nwatch(bubbleShooterVietnameseMode, (newVal) => {\n  saveBubbleShooterVietnameseModeToStorage(newVal)\n})\nwatch(snakeDoubleBaitMode, (newVal) => {\n  saveSnakeDoubleBaitModeToStorage(newVal)\n})\nwatch(pictionaryDefinitionMode, (newVal) => {\n  savePictionaryDefinitionModeToStorage(newVal)\n})\nwatch(scrambleWordsEnabled, (newVal) => {\n  saveScrambleWordsModeToStorage(newVal)\n})\nwatch(wordsCrushEnabled, (newVal) => {\n  saveWordsCrushModeToStorage(newVal)\n})\n\n// Toggle function for FlashcardHeader\nconst toggleBubbleShooterVietnameseMode = () => {\n  bubbleShooterVietnameseMode.value = !bubbleShooterVietnameseMode.value\n}\n\n// Event handlers for FlashcardHeader events - using existing implementations\n\n// Settings composable  \nconst {\n  showSettings: showSettingsDialog,\n  settings: flashcardSettings,\n  localSettings,\n  applySettings: applyGameSettings,\n  resetSettings,\n  cancelSettings,\n  openSettings\n} = useFlashcardSettings()\n\n// Filter flashcards by date and category\nconst filteredVocabularies = computed(() => {\n  let vocabularies = allVocabularies.value\n\n  // Filter by date (always enabled)\n  if (selectedDate.value) {\n    vocabularies = vocabularies.filter((vocab: Vocabulary) => {\n      const vocabDateKey = getDateKey(vocab.createdAt)\n      return vocabDateKey === selectedDate.value\n    })\n  }\n\n  // Filter by category if a category is selected\n  if (flashcardSettings.value.category) {\n    vocabularies = vocabularies.filter((vocab: Vocabulary) => vocab.category === flashcardSettings.value.category)\n  }\n\n  return vocabularies\n})\n\n// Combine filter and shuffle logic\nconst baseFlashcards = computed(() => {\n  return filteredVocabularies.value.filter((vocab: Vocabulary) => {\n    const category = flashcardSettings.value.category\n    const difficulty = flashcardSettings.value.difficulty\n    const categoryMatch = !category || vocab.category === category\n    const levelMatch = !difficulty || difficulty === 'all' || vocab.level === difficulty\n    return categoryMatch && levelMatch\n  })\n})\n\n// Determine if Image mode is available for the CURRENT effective set (date + category + difficulty)\n// This ensures that when a date contains multiple topics, Image mode is only enabled if the selected\n// topic (and difficulty) actually has images.\nconst imageModeAvailable = computed(() => {\n  const cards = baseFlashcards.value\n  if (cards.length === 0) return false\n  // Image mode is available only if ALL cards in the current effective set have a non-empty image\n  return cards.every((v: Vocabulary) => {\n    const img: any = (v as any).image\n    if (img == null) return false\n    const s = typeof img === 'string' ? img : String(img)\n    return s.trim().length > 0\n  })\n})\n\n// Determine if Pictionary mode is available for the CURRENT effective set (date + category + difficulty)\n// This ensures that when a date contains multiple topics, Pictionary mode is only enabled if the selected\n// topic (and difficulty) actually has images.\nconst pictionaryModeAvailable = computed(() => {\n  const cards = baseFlashcards.value\n  if (cards.length === 0) return false\n  // Pictionary mode is available only if ALL cards in the current effective set have a non-empty image\n  return cards.every((v: Vocabulary) => {\n    const img: any = (v as any).image\n    if (img == null) return false\n    const s = typeof img === 'string' ? img : String(img)\n    return s.trim().length > 0\n  })\n})\n\n// Determine if Flip Tile mode is available for the CURRENT effective set (date + category + difficulty)\n// This ensures that when a date contains multiple topics, Flip Tile mode is only enabled if the selected\n// topic (and difficulty) actually has images.\nconst flipTileModeAvailable = computed(() => {\n  const cards = baseFlashcards.value\n  if (cards.length === 0) return false\n  // Flip Tile mode is available only if ALL cards in the current effective set have a non-empty image\n  return cards.every((v: Vocabulary) => {\n    const img: any = (v as any).image\n    if (img == null) return false\n    const s = typeof img === 'string' ? img : String(img)\n    return s.trim().length > 0\n  })\n})\n\n// Determine if Bubble Shooter mode is available based on vocabulary count\n// Bubble Shooter mode is disabled when the selected date contains more than 8 vocabulary words\n// to avoid gameplay issues with too many balls\nconst bubbleShooterModeAvailable = computed(() => {\n  // If no date is selected, count all vocabularies\n  if (!selectedDate.value) {\n    return filteredVocabularies.value.length <= 8\n  }\n  \n  // Count vocabularies for the selected date (before category/difficulty filtering)\n  const dateFilteredVocabs = allVocabularies.value.filter((vocab: Vocabulary) => {\n    const vocabDateKey = getDateKey(vocab.createdAt)\n    return vocabDateKey === selectedDate.value\n  })\n  \n  return dateFilteredVocabs.length <= 8\n})\n\n// Practice Timer State\nconst practiceStarted = ref(false)\nconst practiceTimerRef = ref()\n\n// Exit Warning State\nconst showExitWarning = ref(false)\nconst allowExit = ref(false)\n\n// Modal states (showSettingsDialog and showHistory are imported from composables)\n\n// Timer Event Handlers\nconst handlePracticeStart = () => {\n  practiceStarted.value = true\n  console.log('Practice started!')\n  // Start a new session details log\n  activeSessionId.value = `${Date.now()}`\n  startSessionDetails(activeSessionId.value, practiceMode.value)\n}\n\nconst handleExitPractice = () => {\n  if (practiceStarted.value && !allowExit.value) {\n    showExitWarning.value = true\n  } else {\n    router.push('/practice/flashcard')\n  }\n}\n\nconst handleTimeout = () => {\n  console.log('Time out for current card!')\n  // Timer modal will handle the UI\n}\n\nconst handleTimerRestart = () => {\n  // Restart the session from the FIRST card when user clicks \"Try again\" in the Time's Up modal\n  // If shuffle is enabled, reshuffle to get a new random order, then go back to index 0.\n  // Clear any per-card saved states and reset the practice timer and card UI state.\n  console.log('Timer restarted: restarting from the first card')\n  \n  // Ensure we are in practice mode\n  practiceStarted.value = true\n\n  // If shuffle is enabled, reshuffle to provide a new order for the new attempt\n  if (flashcardSettings.value.shuffleCards && baseFlashcards.value.length > 0) {\n    shuffleFlashcards()\n  }\n\n  // Clear saved states and reset to first card\n  cardStateStorage.value = {}\n  currentIndex.value = 0\n  resetAndRestoreCard()\n\n  // Start the timer immediately (avoid showing the Start button)\n  if (practiceTimerRef.value) {\n    // Start the timer directly - hasStarted will be set internally\n    practiceTimerRef.value.startTimer()\n  }\n}\n\nconst handleSkip = () => {\n  console.log('Skip current card')\n  // Reset game state and navigate back to the main flashcard page\n  practiceStarted.value = false\n  if (practiceTimerRef.value) {\n    practiceTimerRef.value.resetPractice()\n  }\n  // Reset indices/state managed by composable\n  restartSession()\n  router.push('/practice/flashcard')\n}\n\n// Exit Warning Handlers\nconst continueSession = () => {\n  showExitWarning.value = false\n}\n\nconst confirmExit = () => {\n  allowExit.value = true\n  showExitWarning.value = false\n  // End the practice session\n  practiceStarted.value = false\n  if (practiceTimerRef.value) {\n    practiceTimerRef.value.resetPractice()\n  }\n  // Remove navigation guard to allow exit\n  removeNavigationGuard()\n  // Navigate back to Flashcard main page\n  router.push('/practice/flashcard')\n}\n\n// Navigation guard to prevent leaving page during practice\nlet unregisterGuard: (() => void) | null = null\n\nconst setupNavigationGuard = () => {\n  if (unregisterGuard) {\n    unregisterGuard()\n  }\n  \n  unregisterGuard = router.beforeEach((to, from, next) => {\n    if (practiceStarted.value && !allowExit.value && from.path.includes('/practice/flashcard')) {\n      showExitWarning.value = true\n      // Prevent navigation temporarily\n      return false\n    }\n    next()\n  })\n}\n\nconst removeNavigationGuard = () => {\n  if (unregisterGuard) {\n    unregisterGuard()\n    unregisterGuard = null\n  }\n}\n\n// Image Answer Handler\nconst handleImageAnswer = () => {\n  checkImageAnswer()\n  recordAnswer(imageCorrect.value)\n  \n  // Auto-advance on xs/sm only (viewport < md) for Image mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handleBeforeUnload = (event: BeforeUnloadEvent) => {\n  if (practiceStarted.value && !allowExit.value) {\n    event.preventDefault()\n    event.returnValue = ''\n    return ''\n  }\n}\n\n// History composable\nconst {\n  showHistory,\n  practiceHistory,\n  saveSessionToHistory,\n  getModeColor,\n  getModeText,\n  formatDate,\n  formatDuration,\n  deleteSession\n} = useFlashcardHistory()\n\n// Main game composable - must be after baseFlashcards\nconst {\n  currentIndex,\n  isFlipped,\n  practiceMode,\n  showSettings,\n  showCompletionModal,\n  isCompleted,\n  settings,\n  stats,\n  flashcards,\n  currentCard,\n  nextCard,\n  previousCard,\n  flipCard,\n  resetCurrentCard,\n  completeSession,\n  restartSession,\n  changePracticeMode,\n  applySettings,\n  goBack,\n  goToVocabulary,\n  markEasy,\n  markDifficult,\n  cleanup\n} = useFlashcardGame(baseFlashcards)\n\n// Auto-switch away from Image mode if it becomes unavailable\nwatch(imageModeAvailable, (available) => {\n  if (practiceMode.value === 'image' && !available) {\n    // Respect rule: do not change mode during active session\n    if (practiceStarted.value) {\n      console.log('[Flashcard] Image mode became unavailable but practice is active; not switching mode.')\n      return\n    }\n    console.log('[Flashcard] Image mode unavailable for current filter; switching to flashcard mode.')\n    changePracticeMode('flashcard')\n  }\n}, { immediate: true })\n\n// Auto-switch away from Pictionary mode if it becomes unavailable\nwatch(pictionaryModeAvailable, (available) => {\n  if (practiceMode.value === 'pictionary' && !available) {\n    // Respect rule: do not change mode during active session\n    if (practiceStarted.value) {\n      console.log('[Flashcard] Pictionary mode became unavailable but practice is active; not switching mode.')\n      return\n    }\n    console.log('[Flashcard] Pictionary mode unavailable for current filter; switching to flashcard mode.')\n    changePracticeMode('flashcard')\n  }\n}, { immediate: true })\n\n// Stats composable - must be after useFlashcardGame\nconst {\n  sessionStats,\n  initializeStats,\n  recordAnswer,\n  nextCardStats,\n  getDetailedStats\n} = useFlashcardStats(stats)\n\n// Get current flashcards (filtered + shuffled if enabled)\nconst currentFlashcards = computed(() => {\n  if (flashcardSettings.value.shuffleCards && shuffledFlashcards.value.length > 0) {\n    return shuffledFlashcards.value\n  }\n  return baseFlashcards.value\n})\n\n// Current card (works with both filtered and shuffled)\nconst currentShuffledCard = computed(() => {\n  if (currentFlashcards.value.length === 0) return null\n  return currentFlashcards.value[currentIndex.value]\n})\n\n// Progress (works with current flashcards)\nconst currentProgressPercentage = computed(() => {\n  if (currentFlashcards.value.length === 0) return 0\n  if (typeof currentIndex.value !== 'number' || isNaN(currentIndex.value)) return 0\n  if (currentIndex.value >= currentFlashcards.value.length) return 100\n  return ((currentIndex.value + 1) / currentFlashcards.value.length) * 100\n})\n\n// Shuffle functionality\nconst shuffleEnabled = computed(() => flashcardSettings.value.shuffleCards)\nconst shuffledFlashcards = ref<any[]>([])\n\nconst shuffleFlashcards = (cards = baseFlashcards.value) => {\n  // Fisher-Yates shuffle algorithm - use filtered flashcards\n  const shuffled = [...cards]\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]\n  }\n  \n  shuffledFlashcards.value = shuffled\n}\n\n// Modes composable\nconst {\n  quizOptions,\n  selectedAnswer,\n  quizAnswered,\n  generateQuizOptions,\n  selectQuizAnswer,\n  resetQuizMode,\n  typingAnswer,\n  typingAnswered,\n  typingCorrect,\n  checkTypingAnswer,\n  resetTypingMode,\n  // Typing-quiz\n  typingQuizEnabled,\n  typingQuizOptions,\n  typingQuizSelected,\n  typingQuizAnswered,\n  generateTypingQuizOptions,\n  selectTypingQuizAnswer,\n  listeningAnswer,\n  listeningAnswered,\n  listeningCorrect,\n  checkListeningAnswer,\n  playAudio,\n  resetListeningMode,\n  imageAnswer,\n  imageAnswered,\n  imageCorrect,\n  checkImageAnswer,\n  resetImageMode,\n  // Pictionary mode\n  pictionaryAnswer,\n  pictionaryAnswered,\n  pictionaryCorrect,\n  checkPictionaryAnswer,\n  resetPictionaryMode,\n  // Flip tile mode\n  flipTileAnswer,\n  flipTileAnswered,\n  flipTileCorrect,\n  checkFlipTileAnswer,\n  resetFlipTileMode,\n  imageQuizEnabled,\n  imageQuizOptions,\n  imageQuizSelected,\n  imageQuizAnswered,\n  generateImageQuizOptions,\n  selectImageQuizAnswer,\n  resetAllModes,\n  getCanProceed,\n  getShortMeaning,\n  // Pronunciation mode\n  isRecording,\n  pronunciationResult,\n  pronunciationAnswered,\n  pronunciationCorrect,\n  isSpeechRecognitionSupported,\n  startRecording,\n  resetPronunciationMode,\n  listeningQuizEnabled,\n  listeningQuizOptions,\n  listeningQuizSelected,\n  listeningQuizAnswered,\n  generateListeningQuizOptions,\n  selectListeningQuizAnswer,\n} = useFlashcardModes(currentShuffledCard, currentFlashcards, allVocabularies)\n\n// Card state storage for preserving answers when navigating back/forward\ninterface CardState {\n  // Quiz mode\n  quizAnswer?: string;\n  quizAnswered?: boolean;\n  quizOptions?: string[]; // The options shown for the quiz\n  \n  // Typing mode  \n  typingAnswer?: string\n  typingAnswered?: boolean\n  typingCorrect?: boolean\n  // Typing-quiz\n  typingQuizOptions?: string[]\n  typingQuizSelected?: string\n  typingQuizAnswered?: boolean\n  \n  // Listening mode\n  listeningAnswer?: string\n  listeningAnswered?: boolean\n  listeningCorrect?: boolean\n  // Listening-quiz\n  listeningQuizOptions?: string[]\n  listeningQuizSelected?: string\n  listeningQuizAnswered?: boolean\n  \n  // Image mode\n  imageAnswer?: string\n  imageAnswered?: boolean\n  imageCorrect?: boolean\n  // Image-quiz state (within image mode)\n  imageQuizOptions?: string[]\n  imageQuizSelected?: string\n  imageQuizAnswered?: boolean\n  \n  // Pronunciation mode\n  pronunciationResult?: string\n  pronunciationAnswered?: boolean\n  pronunciationCorrect?: boolean\n\n  // Pictionary mode\n  pictionaryAnswer?: string\n  pictionaryAnswered?: boolean\n  pictionaryCorrect?: boolean\n  \n  // Flip tile mode\n  flipTileAnswer?: string\n  flipTileAnswered?: boolean\n  flipTileCorrect?: boolean\n}\n\nconst cardStateStorage = ref<Record<number, CardState>>({})\n\n// Save current card state before navigation\nconst saveCurrentCardState = () => {\n  if (!currentShuffledCard.value) return\n  \n  const cardId = currentShuffledCard.value.id\n  cardStateStorage.value[cardId] = {\n    // Quiz mode\n    quizAnswer: selectedAnswer.value,\n    quizAnswered: quizAnswered.value,\n    quizOptions: quizOptions.value,\n    \n    // Typing mode\n    typingAnswer: typingAnswer.value || undefined,\n    typingAnswered: typingAnswered.value || undefined,\n    typingCorrect: typingCorrect.value || undefined,\n    // Typing-quiz\n    typingQuizOptions: typingQuizOptions.value || undefined,\n    typingQuizSelected: typingQuizSelected.value || undefined,\n    typingQuizAnswered: typingQuizAnswered.value || undefined,\n    \n    // Listening mode\n    listeningAnswer: listeningAnswer.value || undefined,\n    listeningAnswered: listeningAnswered.value || undefined,\n    listeningCorrect: listeningCorrect.value || undefined,\n    // Listening-quiz\n    listeningQuizOptions: listeningQuizOptions.value || undefined,\n    listeningQuizSelected: listeningQuizSelected.value || undefined,\n    listeningQuizAnswered: listeningQuizAnswered.value || undefined,\n    \n    // Image mode\n    imageAnswer: imageAnswer.value || undefined,\n    imageAnswered: imageAnswered.value || undefined,\n    imageCorrect: imageCorrect.value || undefined,\n    imageQuizOptions: imageQuizOptions.value && imageQuizOptions.value.length ? imageQuizOptions.value : undefined,\n    imageQuizSelected: imageQuizSelected.value || undefined,\n    imageQuizAnswered: imageQuizAnswered.value || undefined,\n    \n    // Pronunciation mode\n    pronunciationResult: pronunciationResult.value || undefined,\n    pronunciationAnswered: pronunciationAnswered.value || undefined,\n    pronunciationCorrect: pronunciationCorrect.value || undefined,\n\n    // Pictionary mode\n    pictionaryAnswer: pictionaryAnswer.value || undefined,\n    pictionaryAnswered: pictionaryAnswered.value || undefined,\n    pictionaryCorrect: pictionaryCorrect.value || undefined,\n    \n    // Flip tile mode\n    flipTileAnswer: flipTileAnswer.value || undefined,\n    flipTileAnswered: flipTileAnswered.value || undefined,\n    flipTileCorrect: flipTileCorrect.value || undefined,\n  }\n}\n\n// Restore card state when navigating to a card\nconst restoreCardState = () => {\n  if (!currentShuffledCard.value) return\n  \n  const cardId = currentShuffledCard.value.id\n  const savedState = cardStateStorage.value[cardId]\n  \n  if (savedState) {\n    // Restore quiz mode\n    if (savedState.quizOptions) {\n      quizOptions.value = savedState.quizOptions;\n    }\n    if (savedState.quizAnswer !== undefined) {\n      selectedAnswer.value = savedState.quizAnswer;\n    }\n    if (savedState.quizAnswered !== undefined) {\n      quizAnswered.value = savedState.quizAnswered;\n    }\n    \n    // Restore typing mode\n    if (savedState.typingAnswer !== undefined) {\n      typingAnswer.value = savedState.typingAnswer\n    }\n    if (savedState.typingAnswered !== undefined) {\n      typingAnswered.value = savedState.typingAnswered\n    }\n    if (savedState.typingCorrect !== undefined) {\n      typingCorrect.value = savedState.typingCorrect\n    }\n    // Restore typing-quiz\n    if (savedState.typingQuizOptions !== undefined) {\n      typingQuizOptions.value = savedState.typingQuizOptions\n    }\n    if (savedState.typingQuizSelected !== undefined) {\n      typingQuizSelected.value = savedState.typingQuizSelected\n    }\n    if (savedState.typingQuizAnswered !== undefined) {\n      typingQuizAnswered.value = savedState.typingQuizAnswered\n    }\n    \n    // Restore listening mode\n    if (savedState.listeningAnswer !== undefined) {\n      listeningAnswer.value = savedState.listeningAnswer\n    }\n    if (savedState.listeningAnswered !== undefined) {\n      listeningAnswered.value = savedState.listeningAnswered\n    }\n    if (savedState.listeningCorrect !== undefined) {\n      listeningCorrect.value = savedState.listeningCorrect\n    }\n    // Restore listening-quiz\n    if (savedState.listeningQuizOptions !== undefined) {\n      listeningQuizOptions.value = savedState.listeningQuizOptions\n    }\n    if (savedState.listeningQuizSelected !== undefined) {\n      listeningQuizSelected.value = savedState.listeningQuizSelected\n    }\n    if (savedState.listeningQuizAnswered !== undefined) {\n      listeningQuizAnswered.value = savedState.listeningQuizAnswered\n    }\n    \n    // Restore image mode\n    if (savedState.imageAnswer !== undefined) {\n      imageAnswer.value = savedState.imageAnswer\n    }\n    if (savedState.imageAnswered !== undefined) {\n      imageAnswered.value = savedState.imageAnswered\n    }\n    if (savedState.imageCorrect !== undefined) {\n      imageCorrect.value = savedState.imageCorrect\n    }\n    if (savedState.imageQuizOptions !== undefined) {\n      imageQuizOptions.value = savedState.imageQuizOptions\n    }\n    if (savedState.imageQuizSelected !== undefined) {\n      imageQuizSelected.value = savedState.imageQuizSelected\n    }\n    if (savedState.imageQuizAnswered !== undefined) {\n      imageQuizAnswered.value = savedState.imageQuizAnswered\n    }\n    \n    // Restore pronunciation mode\n    if (savedState.pronunciationResult !== undefined) {\n      pronunciationResult.value = savedState.pronunciationResult\n    }\n    if (savedState.pronunciationAnswered !== undefined) {\n      pronunciationAnswered.value = savedState.pronunciationAnswered\n    }\n    if (savedState.pronunciationCorrect !== undefined) {\n      pronunciationCorrect.value = savedState.pronunciationCorrect\n    }\n\n    // Restore pictionary mode\n    if (savedState.pictionaryAnswer !== undefined) {\n      pictionaryAnswer.value = savedState.pictionaryAnswer\n    }\n    if (savedState.pictionaryAnswered !== undefined) {\n      pictionaryAnswered.value = savedState.pictionaryAnswered\n    }\n    if (savedState.pictionaryCorrect !== undefined) {\n      pictionaryCorrect.value = savedState.pictionaryCorrect\n    }\n    \n    // Restore flip tile mode\n    if (savedState.flipTileAnswer !== undefined) {\n      flipTileAnswer.value = savedState.flipTileAnswer\n    }\n    if (savedState.flipTileAnswered !== undefined) {\n      flipTileAnswered.value = savedState.flipTileAnswered\n    }\n    if (savedState.flipTileCorrect !== undefined) {\n      flipTileCorrect.value = savedState.flipTileCorrect\n    }\n  }\n}\n\n// Override resetCurrentCard to use modes composable\nconst handleQuizAnswer = (answer: string) => {\n  const isCorrect = selectQuizAnswer(answer)\n  recordAnswer(!!isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: answer,\n      correctAnswer: getShortMeaning(currentShuffledCard.value.meaning),\n      isCorrect: !!isCorrect,\n      mode: 'quiz',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Quiz mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handleTypingAnswer = () => {\n  checkTypingAnswer()\n  recordAnswer(typingCorrect.value)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: typingAnswer.value,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!typingCorrect.value,\n      mode: 'typing',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Typing mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n// Typing-quiz handlers\n\nconst handleTypingQuizAnswer = (answer: string) => {\n  const isCorrect = selectTypingQuizAnswer(answer)\n  recordAnswer(!!isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: answer,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!isCorrect,\n      mode: 'typing-quiz',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Typing-quiz\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handleListeningAnswer = () => {\n  checkListeningAnswer()\n  recordAnswer(listeningCorrect.value)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: listeningAnswer.value,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!listeningCorrect.value,\n      mode: 'listening',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Listening mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n// Listening-quiz handlers (within listening mode)\nconst onToggleListeningQuiz = (enabled: boolean) => {\n  listeningQuizEnabled.value = enabled\n  resetListeningMode()\n  if (enabled) {\n    generateListeningQuizOptions()\n  }\n}\n\nconst handleListeningQuizAnswer = (answer: string) => {\n  const isCorrect = selectListeningQuizAnswer(answer)\n  recordAnswer(!!isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: answer,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!isCorrect,\n      mode: 'listening-quiz',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Listening-quiz\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n// Image-quiz handlers (image mode multiple-choice)\nconst onToggleImageQuiz = (enabled: boolean) => {\n  imageQuizEnabled.value = enabled\n  // Reset image mode state, but keep toggle as per composable's behavior\n  resetImageMode()\n  if (enabled) {\n    // Prepare options for current card\n    generateImageQuizOptions()\n  }\n}\n\nconst handleImageQuizAnswer = (answer: string) => {\n  const isCorrect = selectImageQuizAnswer(answer)\n  recordAnswer(!!isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: answer,\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!isCorrect,\n      mode: 'image-quiz',\n    })\n  }\n\n  // Auto-advance on xs/sm only (viewport < md) for Image-quiz\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handleFlipTileAnswer = () => {\n  checkFlipTileAnswer()\n  recordAnswer(flipTileCorrect.value)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: flipTileAnswer.value || '',\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!flipTileCorrect.value,\n      mode: 'flip-tile',\n    })\n  }\n  \n  // Auto-advance on xs/sm only (viewport < md) for Flip Tile mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handlePictionaryAnswer = () => {\n  checkPictionaryAnswer()\n  recordAnswer(pictionaryCorrect.value)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: pictionaryAnswer.value || '',\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: !!pictionaryCorrect.value,\n      mode: 'pictionary',\n      extra: {\n        pictionary: {\n          image: currentShuffledCard.value.image,\n          slots: latestPictionarySnapshot.value?.slots || [],\n        }\n      }\n    })\n    // Clear snapshot after recording\n    latestPictionarySnapshot.value = null\n  }\n\n  // Auto-advance on xs/sm only (viewport < md) for Pictionary mode\n  if (\n    practiceStarted.value &&\n    typeof window !== 'undefined' &&\n    window.innerWidth < 768\n  ) {\n    // Slight delay so feedback is visible before advancing\n    setTimeout(() => {\n      enhancedNextCard()\n    }, 2100)\n  }\n}\n\nconst handleScrambleAnswer = (isCorrect: boolean) => {\n  recordAnswer(isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: 'scrambled', // User assembled the scrambled word\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: isCorrect,\n      mode: 'scramble-words',\n    })\n  }\n}\n\n// Bubble Shooter mode handler\nconst handleBubbleShooterComplete = () => {\n  // Record completion as successful\n  recordAnswer(true)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: 'completed',\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: true,\n      mode: 'bubble-shooter',\n    })\n  }\n  // Complete the session since Bubble Shooter is a complete game mode\n  handleSessionComplete()\n}\n\n// Words Crush mode handler\nconst handleWordsCrushCompleted = (isCorrect: boolean) => {\n  // Record the answer result\n  recordAnswer(isCorrect)\n  if (currentShuffledCard.value && activeSessionId.value) {\n    appendAnswer({\n      cardId: currentShuffledCard.value.id,\n      word: currentShuffledCard.value.word,\n      meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n      userAnswer: isCorrect ? currentShuffledCard.value.word : 'incomplete',\n      correctAnswer: currentShuffledCard.value.word,\n      isCorrect: isCorrect,\n      mode: 'words-crush',\n    })\n  }\n  \n  // Set pronunciation answered state to enable Next button for large screens\n  pronunciationAnswered.value = true\n  pronunciationCorrect.value = isCorrect\n  \n  // Auto-advance only for small screens (xs, sm)\n  // For large screens (md+), user needs to manually click next\n  const isSmallScreen = window.innerWidth < 768 // md breakpoint\n  if (isSmallScreen) {\n    setTimeout(() => {\n      nextCard()\n    }, 2000)\n  }\n}\n\nconst resetAndRestoreCard = () => {\n  // First, reset all modes to ensure a clean slate from the previous card.\n  resetAllModes();\n\n  // Second, restore the state for the new current card, if it exists.\n  restoreCardState();\n\n  // Third, generate new quiz options if needed (i.e., for a card seen for the first time).\n  if (practiceMode.value === 'quiz' && currentShuffledCard.value) {\n    const cardId = currentShuffledCard.value.id;\n    const savedState = cardStateStorage.value[cardId];\n    // Only generate options if the card hasn't been answered in a quiz before.\n    if (!savedState || savedState.quizAnswer === undefined) {\n      generateQuizOptions();\n    }\n  }\n  // For image mode with quiz enabled, ensure options exist\n  if (practiceMode.value === 'image' && imageQuizEnabled.value && currentShuffledCard.value) {\n    if (!imageQuizOptions.value || imageQuizOptions.value.length === 0) {\n      generateImageQuizOptions()\n    }\n  }\n  // For typing mode with quiz enabled, ensure options exist\n  if (practiceMode.value === 'typing' && typingQuizEnabled.value && currentShuffledCard.value) {\n    if (!typingQuizOptions.value || typingQuizOptions.value.length === 0) {\n      generateTypingQuizOptions()\n    }\n  }\n  // For listening mode with quiz enabled, ensure options exist\n  if (practiceMode.value === 'listening' && listeningQuizEnabled.value && currentShuffledCard.value) {\n    if (!listeningQuizOptions.value || listeningQuizOptions.value.length === 0) {\n      generateListeningQuizOptions()\n    }\n  }\n};\n\nconst toggleShuffle = () => {\n  // Update settings through the settings composable to ensure localStorage persistence\n  flashcardSettings.value.shuffleCards = !flashcardSettings.value.shuffleCards\n  \n  // If shuffle is enabled, create shuffled array\n  if (flashcardSettings.value.shuffleCards) {\n    shuffleFlashcards()\n  } else {\n    // Clear shuffled array when shuffle is disabled\n    shuffledFlashcards.value = []\n  }\n  \n  // Reset to first card after shuffle and clear state (order changed)\n  cardStateStorage.value = {}\n  currentIndex.value = 0\n  resetAndRestoreCard() // Will reset and generate new quiz options as there's no state\n}\n\n// Override navigation functions to work with shuffled cards\nconst enhancedNextCard = () => {\n  // Save current card state before navigation\n  saveCurrentCardState()\n  \n  // For pronunciation mode, record the answer just before proceeding.\n  if (practiceMode.value === 'pronunciation' && pronunciationAnswered.value) {\n    recordAnswer(pronunciationCorrect.value)\n    if (currentShuffledCard.value && activeSessionId.value) {\n      appendAnswer({\n        cardId: currentShuffledCard.value.id,\n        word: currentShuffledCard.value.word,\n        meaningShort: getShortMeaning(currentShuffledCard.value.meaning),\n        userAnswer: pronunciationResult.value,\n        correctAnswer: currentShuffledCard.value.word,\n        isCorrect: !!pronunciationCorrect.value,\n        mode: 'pronunciation',\n      })\n    }\n  }\n\n  if (currentIndex.value < currentFlashcards.value.length - 1) {\n    currentIndex.value++\n    resetAndRestoreCard()\n    // Resume timer when moving to next card\n    if (practiceStarted.value && practiceTimerRef.value) {\n      practiceTimerRef.value.nextCard()\n    }\n  } else {\n    handleSessionComplete()\n  }\n}\n\nconst enhancedPreviousCard = () => {\n  // Save current card state before navigation\n  saveCurrentCardState()\n  \n  if (currentIndex.value > 0) {\n    currentIndex.value--\n    resetAndRestoreCard()\n    // Pause timer when going back to review previous card (timer display remains visible)\n    if (practiceStarted.value && practiceTimerRef.value) {\n      practiceTimerRef.value.stopTimer()\n    }\n  }\n}\n\nconst enhancedMarkEasy = () => {\n  recordAnswer(true)\n  enhancedNextCard()\n}\n\nconst enhancedMarkDifficult = () => {\n  recordAnswer(false)\n  enhancedNextCard()\n}\n\n// Enhanced completion handling\nconst handleSessionComplete = () => {\n  completeSession()\n  const totalCards = currentFlashcards.value.length\n  const id = saveSessionToHistory(stats.value, totalCards, activeSessionId.value || undefined)\n  if (!activeSessionId.value) {\n    activeSessionId.value = id\n  }\n}\n\nconst handleRestartSession = () => {\n  restartSession() // Call the original function from the composable\n  practiceStarted.value = false\n  \n  // Clear all card state storage when restarting\n  cardStateStorage.value = {}\n  \n  // Reset modal store when restarting (will hide completion modal, show back to top, enable body scroll)\n  modalStore.setCompletionModal(false)\n  \n  // Re-shuffle cards if shuffle is enabled to get new random order\n  if (flashcardSettings.value.shuffleCards && baseFlashcards.value.length > 0) {\n    shuffleFlashcards()\n  }\n  \n  // Force reset without restoring state (new session)\n  resetAndRestoreCard()\n  \n  if (practiceTimerRef.value) {\n    practiceTimerRef.value.resetPractice()\n  }\n}\n\n// Handle completion modal go back - reset modal store and navigate\nconst handleCompletionGoBack = () => {\n  // Reset modal store first (hide completion modal, show back to top, enable body scroll)\n  modalStore.setCompletionModal(false)\n  // Then navigate back\n  goBack()\n}\n\n// Snake Game completion handler\nconst handleSnakeGameComplete = () => {\n  // Handle snake game completion similar to bubble shooter\n  // Ensure final word is recorded if missed due to race condition\n  const expectedCorrect = currentFlashcards.value.length\n  const actualCorrect = stats.value.correct\n  \n  if (actualCorrect < expectedCorrect) {\n    // Missing the last word due to race condition, record it\n    recordAnswer(true)\n  }\n  \n  // Complete the session to finalize stats before showing modal\n  handleSessionComplete()\n}\n\n// Snake Game food eaten handlers\nconst handleSnakeCorrectFoodEaten = (details?: {\n  word: string\n  meaningShort: string\n  position: { x: number; y: number }\n  snakeLength: number\n  gameScore: number\n  wordsCompleted: number\n  wrongEatenCount: number\n  snakeBody: { x: number; y: number }[]\n  direction: { x: number; y: number }\n  timelineFrames?: Array<{ body: { x: number; y: number }[]; direction: { x: number; y: number } }>\n}) => {\n  // Count as a correct answer in practice stats\n  console.log('[DEBUG] Snake correct food eaten, recording answer true')\n  console.log('[DEBUG] Stats before:', { correct: stats.value.correct, incorrect: stats.value.incorrect, total: stats.value.total })\n  recordAnswer(true)\n  console.log('[DEBUG] Stats after:', { correct: stats.value.correct, incorrect: stats.value.incorrect, total: stats.value.total })\n  \n  // Record detailed session history if details provided\n  if (details && activeSessionId.value) {\n    console.log('[DEBUG] FlashcardView - Recording snake correct food:', details)\n    console.log('[DEBUG] FlashcardView - Snake body to save:', details.snakeBody)\n    console.log('[DEBUG] FlashcardView - Snake direction to save:', details.direction)\n    \n    appendAnswer({\n      cardId: Date.now(), // Unique numeric ID for snake game food eaten\n      word: details.word,\n      meaningShort: details.meaningShort,\n      userAnswer: details.word, // Correct food eaten\n      correctAnswer: details.word,\n      isCorrect: true,\n      mode: 'snake-game',\n      extra: {\n        snakeGame: {\n          position: details.position,\n          wasCorrect: true,\n          foodType: 'primary', // Correct food is always primary target\n          snakeLength: details.snakeLength,\n          gameScore: details.gameScore,\n          wordsCompleted: details.wordsCompleted,\n          wrongEatenCount: details.wrongEatenCount,\n          snakeBody: details.snakeBody,\n          direction: details.direction,\n          timelineFrames: details.timelineFrames\n        }\n      }\n    })\n  }\n}\n\nconst handleSnakeWrongFoodEaten = (details?: {\n  word: string\n  meaningShort: string\n  position: { x: number; y: number }\n  snakeLength: number\n  gameScore: number\n  wordsCompleted: number\n  wrongEatenCount: number\n  snakeBody: { x: number; y: number }[]\n  direction: { x: number; y: number }\n  timelineFrames?: Array<{ body: { x: number; y: number }[]; direction: { x: number; y: number } }>\n}) => {\n  // Count as an incorrect answer in practice stats\n  recordAnswer(false)\n  \n  // Record detailed session history if details provided\n  if (details && activeSessionId.value) {\n    appendAnswer({\n      cardId: Date.now(), // Unique numeric ID for snake game food eaten\n      word: details.word,\n      meaningShort: details.meaningShort,\n      userAnswer: details.word, // Wrong food eaten\n      correctAnswer: '', // No specific correct answer for wrong food\n      isCorrect: false,\n      mode: 'snake-game',\n      extra: {\n        snakeGame: {\n          position: details.position,\n          wasCorrect: false,\n          foodType: 'secondary', // Wrong food is secondary/decoy\n          snakeLength: details.snakeLength,\n          gameScore: details.gameScore,\n          wordsCompleted: details.wordsCompleted,\n          wrongEatenCount: details.wrongEatenCount,\n          snakeBody: details.snakeBody,\n          direction: details.direction,\n          timelineFrames: details.timelineFrames\n        }\n      }\n    })\n  }\n}\n\n// Snake Game food eaten handler -> count as a correct answer in practice stats\nconst handleSnakeFoodEaten = () => {\n  recordAnswer(true)\n}\n\n// Auto flip functionality\nlet autoFlipTimer: number | null = null\n\nwatch([currentIndex, isFlipped], () => {\n  if (autoFlipTimer) {\n    clearTimeout(autoFlipTimer)\n  }\n  \n  if (flashcardSettings.value.autoFlip && !isFlipped.value) {\n    autoFlipTimer = setTimeout(() => {\n      isFlipped.value = true\n    }, 3000) as unknown as number\n  }\n})\n\n// Watch for practice mode changes\nwatch(practiceMode, () => {\n  // When practice mode changes, reset the card.\n  // No state will be restored because we are changing modes.\n  resetAndRestoreCard();\n  \n  // Ensure shuffle is applied after mode switch (e.g., Image mode)\n  // If shuffle is enabled but no shuffled list exists yet, generate it.\n  if (flashcardSettings.value.shuffleCards && shuffledFlashcards.value.length === 0) {\n    shuffleFlashcards()\n  }\n})\n\n// Save session to history when completed and stop timer\nwatch(showCompletionModal, (newValue) => {\n  if (newValue) {\n    // Stop the timer immediately when completion modal appears\n    if (practiceTimerRef.value) {\n      practiceTimerRef.value.stopTimer()\n    }\n    // Update modal store to hide back to top and control body scroll\n    modalStore.setCompletionModal(true)\n  } else {\n    // Reset modal store when completion modal is closed\n    modalStore.setCompletionModal(false)\n  }\n})\n\n// Prevent body scroll when history modal is open\nwatch(showHistory, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open')\n  } else {\n    document.body.classList.remove('modal-open')\n  }\n})\n\n// Prevent body scroll when session detail modal is open\nwatch(showSessionDetail, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open')\n  } else {\n    document.body.classList.remove('modal-open')\n  }\n})\n\n// Prevent body scroll when settings modal is open\nwatch(showSettingsDialog, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open')\n  } else {\n    document.body.classList.remove('modal-open')\n  }\n})\n\n// Watch date filter state changes and save to localStorage\nwatch(dateFilterEnabled, () => {\n  saveDateFilterState()\n})\n\nwatch(selectedDate, () => {\n  saveDateFilterState()\n})\n\n// Watch baseFlashcards changes and re-shuffle if shuffle is enabled\nwatch(baseFlashcards, (newCards) => {\n  // If shuffle is enabled and we have cards, re-shuffle them\n  if (flashcardSettings.value.shuffleCards && newCards.length > 0) {\n    shuffleFlashcards(newCards)\n    // Reset to first card after re-shuffle\n    currentIndex.value = 0\n    resetAndRestoreCard()\n  }\n  // If no cards and shuffle was enabled, clear shuffled array\n  else if (flashcardSettings.value.shuffleCards && newCards.length === 0) {\n    shuffledFlashcards.value = []\n    currentIndex.value = 0\n  }\n}, { immediate: false })\n\n// Event handlers for toggle options  \nconst onToggleBubbleShooterVietnameseMode = (enabled: boolean) => {\n  bubbleShooterVietnameseMode.value = enabled\n}\n\nconst handleFlipTileHintsToggle = (enabled: boolean) => {\n  flashcardSettings.value.useFlipTileHints = enabled\n}\n\n// Initialize on mount\nonMounted(() => {\n  console.log('FlashcardView mounted')\n  \n  // Initialize stats\n  initializeStats(currentFlashcards.value.length)\n  \n  // Initialize quiz options if in quiz mode\n  if (practiceMode.value === 'quiz') {\n    generateQuizOptions()\n  }\n  \n  // Initialize shuffle if enabled\n  if (flashcardSettings.value.shuffleCards) {\n    shuffleFlashcards()\n  }\n  \n  // Setup navigation guard for exit warning\n  setupNavigationGuard()\n  window.addEventListener('beforeunload', handleBeforeUnload)\n})\n\n// Cleanup on unmount\nonUnmounted(() => {\n  document.body.classList.remove('modal-open')\n  cleanup()\n  \n  // Remove navigation guard and event listeners\n  removeNavigationGuard()\n  window.removeEventListener('beforeunload', handleBeforeUnload)\n})\n</script>\n\n<style scoped>\n.perspective-1000 {\n  perspective: 1000px;\n}\n\n.flashcard {\n  transform-style: preserve-3d;\n  transition: transform 0.6s;\n}\n\n.flashcard.flipped {\n  transform: rotateY(180deg);\n}\n\n.flashcard-face {\n  backface-visibility: hidden;\n}\n\n.flashcard-back {\n  transform: rotateY(180deg);\n}\n</style>\n\n<style>\n/* Global styles for modal */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 50;\n  overflow: hidden;\n}\n\nbody.modal-open {\n  overflow: hidden !important;\n}\n</style>\n"],"file":"assets/FlashcardView-CGFJt75s.js"}