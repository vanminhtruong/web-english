{"version":3,"file":"voiceStore-DiHiYd9f.js","sources":["../../src/stores/voiceStore.ts"],"sourcesContent":["import { ref, watch, onMounted } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\n// Debug function to log available voices\nconst debugAvailableVoices = () => {\n  if ('speechSynthesis' in window) {\n    const voices = speechSynthesis.getVoices()\n    console.log('=== AVAILABLE VOICES DEBUG ====')\n    console.log(`Total voices found: ${voices.length}`)\n    voices.forEach((voice, index) => {\n      console.log(`${index + 1}. Name: \"${voice.name}\" | Lang: ${voice.lang} | Local: ${voice.localService} | Default: ${voice.default}`)\n    })\n    \n    // Special debug for Korean voices\n    const koreanVoices = voices.filter(voice => voice.lang.startsWith('ko'))\n    console.log('\\n=== KOREAN VOICES DETAIL ====')\n    console.log(`Korean voices found: ${koreanVoices.length}`)\n    koreanVoices.forEach((voice, index) => {\n      const name = voice.name.toLowerCase()\n      const genderGuess = name.includes('female') || name.includes('woman') ? 'üë© Female' : \n                         name.includes('male') || name.includes('man') ? 'üë® Male' : '‚ùì Unknown'\n      console.log(`üá∞üá∑ ${index + 1}. \"${voice.name}\" | ${genderGuess} | Lang: ${voice.lang}`)\n    })\n    console.log('===============================')\n    return voices\n  }\n  return []\n}\n\nexport type VoiceType = 'female-sweet' | 'female-clear' | 'male-strong' | 'male-gentle' | 'female-professional' | 'male-deep' | 'korean-female' | 'korean-male'\n\nexport interface VoiceSettings {\n  rate: number\n  pitch: number\n  volume: number\n}\n\nexport type AllVoiceSettings = {\n  [key in VoiceType]: VoiceSettings\n}\n\n// Global reactive state - Optimized for natural human-like speech\nconst defaultSettings: AllVoiceSettings = {\n  'female-sweet': { rate: 0.85, pitch: 1.1, volume: 1.0 },\n  'female-clear': { rate: 1.0, pitch: 0.95, volume: 1.0 },\n  'female-professional': { rate: 0.9, pitch: 0.85, volume: 1.0 },\n  'male-strong': { rate: 0.8, pitch: 0.7, volume: 1.0 },\n  'male-gentle': { rate: 0.9, pitch: 0.9, volume: 1.0 },\n  'male-deep': { rate: 0.75, pitch: 0.6, volume: 1.0 },\n  'korean-female': { rate: 0.95, pitch: 1.15, volume: 1.0 },\n  'korean-male': { rate: 0.85, pitch: 0.5, volume: 1.0 }\n}\n\nconst voiceSettings = ref<AllVoiceSettings>({ ...defaultSettings })\nconst currentVoiceType = ref<VoiceType>('female-sweet')\nconst availableVoices = ref<SpeechSynthesisVoice[]>([])\nconst selectedVoice = ref<SpeechSynthesisVoice | null>(null)\n\n// Load available voices\nconst loadVoices = () => {\n  if ('speechSynthesis' in window) {\n    const voices = speechSynthesis.getVoices()\n    console.log('Loading voices, total found:', voices.length)\n    \n    // Debug: Show all available voices\n    debugAvailableVoices()\n    \n    // Filter for English and Korean voices\n    const englishVoices = voices.filter(voice => voice.lang.startsWith('en'))\n    const koreanVoices = voices.filter(voice => voice.lang.startsWith('ko'))\n    const allSupportedVoices = [...englishVoices, ...koreanVoices]\n    \n    console.log('English voices found:', englishVoices.length)\n    console.log('Korean voices found:', koreanVoices.length)\n    console.log('Total supported voices:', allSupportedVoices.length)\n    \n    availableVoices.value = allSupportedVoices\n    \n    // Only update selected voice if we have voices\n    if (allSupportedVoices.length > 0) {\n      updateSelectedVoice()\n    }\n  }\n}\n\n// Update selected voice based on settings\nconst updateSelectedVoice = () => {\n  const voices = availableVoices.value\n  console.log('Updating voice selection, available voices:', voices.length)\n  console.log('Current voice type:', currentVoiceType.value)\n  \n  if (voices.length === 0) {\n    console.log('No voices available, loading voices...')\n    loadVoices()\n    return\n  }\n\n  // Try to find voice based on specific voice type preference\n  let targetVoice: SpeechSynthesisVoice | null = null\n\n  // Separate voices by language and gender\n  const englishVoices = voices.filter(voice => voice.lang.startsWith('en'))\n  const koreanVoices = voices.filter(voice => voice.lang.startsWith('ko'))\n  \n  const femaleVoices = englishVoices.filter(voice => {\n    const name = voice.name.toLowerCase()\n    return name.includes('female') || name.includes('woman') || name.includes('zira') || \n           name.includes('hazel') || name.includes('cortana') || name.includes('helena') ||\n           name.includes('susan') || name.includes('samantha') || name.includes('karen')\n  })\n  \n  const maleVoices = englishVoices.filter(voice => {\n    const name = voice.name.toLowerCase()\n    return name.includes('male') || name.includes('man') || name.includes('david') || \n           name.includes('mark') || name.includes('daniel') || name.includes('richard') ||\n           name.includes('alex') || name.includes('tom') || name.includes('aaron')\n  })\n  \n  // Better Korean voice gender detection\n  const koreanFemaleVoices = koreanVoices.filter(voice => {\n    const name = voice.name.toLowerCase()\n    // Explicit female markers\n    if (name.includes('female') || name.includes('woman')) return true\n    // Common Korean female voice names\n    if (name.includes('heami') || name.includes('yuna') || name.includes('seoyeon') || \n        name.includes('sora') || name.includes('inha') || name.includes('nayeon') ||\n        name.includes('clara') || name.includes('aria')) return true\n    // Exclude male markers\n    if (name.includes('male') || name.includes('man')) return false\n    // If no clear gender marker, use voice name patterns or index\n    return false\n  })\n  \n  const koreanMaleVoices = koreanVoices.filter(voice => {\n    const name = voice.name.toLowerCase()\n    // Explicit male markers\n    if (name.includes('male') || name.includes('man')) return true\n    // Common Korean male voice names\n    if (name.includes('minho') || name.includes('woojin') || name.includes('taehyun') ||\n        name.includes('jun') || name.includes('alex') || name.includes('david') ||\n        name.includes('injoo')) return true\n    // Exclude female markers\n    if (name.includes('female') || name.includes('woman')) return false\n    // If no clear gender marker, use voice name patterns or index\n    return false\n  })\n  \n  // If no explicit gender voices found, split remaining voices\n  const remainingKoreanVoices = koreanVoices.filter(voice => \n    !koreanFemaleVoices.includes(voice) && !koreanMaleVoices.includes(voice)\n  )\n  \n  if (remainingKoreanVoices.length > 0) {\n    const midPoint = Math.ceil(remainingKoreanVoices.length / 2)\n    koreanFemaleVoices.push(...remainingKoreanVoices.slice(0, midPoint))\n    koreanMaleVoices.push(...remainingKoreanVoices.slice(midPoint))\n  }\n  \n  console.log(`English Female voices found: ${femaleVoices.length}`, femaleVoices.map(v => v.name))\n  console.log(`English Male voices found: ${maleVoices.length}`, maleVoices.map(v => v.name))\n  console.log(`Korean Female voices found: ${koreanFemaleVoices.length}`, koreanFemaleVoices.map(v => v.name))\n  console.log(`Korean Male voices found: ${koreanMaleVoices.length}`, koreanMaleVoices.map(v => v.name))\n  \n  // If no Korean gender-specific voices found, split Korean voices by index\n  if (koreanFemaleVoices.length === 0 && koreanMaleVoices.length === 0 && koreanVoices.length > 0) {\n    const halfPoint = Math.floor(koreanVoices.length / 2)\n    koreanFemaleVoices.push(...koreanVoices.slice(0, halfPoint))\n    koreanMaleVoices.push(...koreanVoices.slice(halfPoint))\n    console.log('No Korean gender-specific voices found, splitting by index')\n  }\n  \n  // If no English gender-specific voices found, split all English voices by index\n  if (femaleVoices.length === 0 && maleVoices.length === 0 && englishVoices.length > 0) {\n    const halfPoint = Math.floor(englishVoices.length / 2)\n    femaleVoices.push(...englishVoices.slice(0, halfPoint))\n    maleVoices.push(...englishVoices.slice(halfPoint))\n    console.log('No English gender-specific voices found, splitting by index')\n  }\n  \n  switch (currentVoiceType.value) {\n    case 'female-sweet':\n      // Use first female voice or first available\n      targetVoice = femaleVoices[0] || voices[0]\n      console.log('Selected female-sweet:', targetVoice?.name)\n      break\n      \n    case 'female-clear':\n      // Use second female voice or second available\n      targetVoice = femaleVoices[1] || femaleVoices[0] || voices[1] || voices[0]\n      console.log('Selected female-clear:', targetVoice?.name)\n      break\n      \n    case 'female-professional':\n      // Use third female voice or cycle back\n      targetVoice = femaleVoices[2] || femaleVoices[0] || voices[2] || voices[0]\n      console.log('Selected female-professional:', targetVoice?.name)\n      break\n      \n    case 'male-strong':\n      // Use first male voice\n      targetVoice = maleVoices[0] || voices[Math.floor(voices.length / 2)] || voices[0]\n      console.log('Selected male-strong:', targetVoice?.name)\n      break\n      \n    case 'male-gentle':\n      // Use second male voice\n      targetVoice = maleVoices[1] || maleVoices[0] || voices[Math.floor(voices.length / 2) + 1] || voices[0]\n      console.log('Selected male-gentle:', targetVoice?.name)\n      break\n      \n    case 'male-deep':\n      // Use third male voice or cycle back\n      targetVoice = maleVoices[2] || maleVoices[0] || voices[Math.floor(voices.length / 2) + 2] || voices[0]\n      console.log('Selected male-deep:', targetVoice?.name)\n      break\n      \n    case 'korean-female':\n      // Always use FIRST Korean voice for female\n      targetVoice = koreanVoices[0] || voices[0]\n      console.log('üá∞üá∑üë© KOREAN FEMALE - Selected voice:', targetVoice?.name, 'Lang:', targetVoice?.lang)\n      break\n      \n    case 'korean-male':\n      // Ensure we always have a valid voice\n      if (koreanVoices.length >= 2) {\n        // Use second Korean voice if available\n        targetVoice = koreanVoices[1]\n        console.log('üá∞üá∑üë® KOREAN MALE - Using second Korean voice:', targetVoice?.name)\n      } else if (koreanVoices.length === 1) {\n        // Use same Korean voice but settings will make it sound deeper\n        targetVoice = koreanVoices[0]\n        console.log('üá∞üá∑üë® KOREAN MALE - Using same Korean voice with deep pitch (0.5):', targetVoice?.name)\n      } else {\n        // No Korean voices, use first male voice or fallback\n        targetVoice = maleVoices[0] || voices[0]\n        console.log('üá∞üá∑üë® KOREAN MALE - No Korean voices, using male voice:', targetVoice?.name)\n      }\n      \n      // Ensure we have a voice\n      if (!targetVoice) {\n        targetVoice = voices[0]\n        console.log('‚ö†Ô∏è FALLBACK: Using first available voice:', targetVoice?.name)\n      }\n      \n      console.log('üá∞üá∑ Total Korean voices:', koreanVoices.length, koreanVoices.map(v => v.name))\n      console.log('üéØ Final selected voice for Korean Male:', targetVoice?.name, 'Lang:', targetVoice?.lang)\n      break\n  }\n\n  console.log(`Looking for ${currentVoiceType.value} voice, found:`, targetVoice?.name)\n\n  // Fallback: use first available voice or default system voice\n  const previousVoice = selectedVoice.value?.name\n  selectedVoice.value = targetVoice || voices[0] || null\n  \n  console.log('Voice changed from', previousVoice, 'to', selectedVoice.value?.name)\n}\n\n// Load settings from localStorage\nconst loadSettings = () => {\n  const saved = localStorage.getItem('voice-settings')\n  const savedType = localStorage.getItem('voice-type')\n  \n  if (saved) {\n    try {\n      const parsedSettings = JSON.parse(saved)\n      // Deep merge with defaults to ensure all keys exist\n      voiceSettings.value = {\n        ...defaultSettings,\n        ...Object.keys(parsedSettings).reduce((acc, key) => {\n          const voiceType = key as VoiceType\n          if (defaultSettings[voiceType]) {\n            acc[voiceType] = { ...defaultSettings[voiceType], ...parsedSettings[voiceType] }\n          }\n          return acc\n        }, {} as AllVoiceSettings)\n      }\n    } catch (error) {\n      console.error('Error loading voice settings:', error)\n      voiceSettings.value = { ...defaultSettings }\n    }\n  }\n  \n  if (savedType) {\n    currentVoiceType.value = savedType as VoiceType\n  }\n}\n\n// Save settings to localStorage\nconst saveSettings = () => {\n  localStorage.setItem('voice-settings', JSON.stringify(voiceSettings.value))\n  localStorage.setItem('voice-type', currentVoiceType.value)\n}\n\n// Create and configure speech utterance with voice-specific settings\nconst createUtterance = (text: string): SpeechSynthesisUtterance => {\n  // Force update selected voice to ensure we have the latest\n  updateSelectedVoice()\n  \n  const utterance = new SpeechSynthesisUtterance(text)\n  utterance.lang = 'en-US'\n  \n  // Get settings for the current voice type\n  const settings = voiceSettings.value[currentVoiceType.value]\n  \n  utterance.rate = Math.max(0.1, Math.min(10, settings.rate))\n  utterance.pitch = Math.max(0, Math.min(2, settings.pitch))\n  utterance.volume = Math.max(0, Math.min(1, settings.volume))\n  \n  console.log('Creating utterance with voice type:', currentVoiceType.value)\n  console.log('Selected voice for utterance:', selectedVoice.value?.name)\n  \n  if (selectedVoice.value) {\n    utterance.voice = selectedVoice.value\n  }\n  \n  return utterance\n}\n\n// Play audio with current voice settings\nconst playAudio = (text: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (!('speechSynthesis' in window)) {\n      console.warn('Speech synthesis not supported')\n      reject(new Error('Speech synthesis not supported'))\n      return\n    }\n\n    const utterance = createUtterance(text)\n    \n    utterance.onend = () => resolve()\n    utterance.onerror = (event) => reject(event.error)\n    \n    speechSynthesis.speak(utterance)\n  })\n}\n\n// Update voice type\nconst setVoiceType = (type: VoiceType) => {\n  console.log('Setting voice type to:', type)\n  currentVoiceType.value = type\n  \n  // Force reload voices if not available\n  if (availableVoices.value.length === 0) {\n    loadVoices()\n  }\n  \n  // Update selected voice immediately\n  updateSelectedVoice()\n  \n  // Save settings\n  saveSettings()\n  \n  console.log('Voice updated to:', selectedVoice.value?.name)\n}\n\n// Update settings for a specific voice\nconst updateVoiceSettings = (type: VoiceType, newSettings: Partial<VoiceSettings>) => {\n  if (voiceSettings.value[type]) {\n    voiceSettings.value[type] = { ...voiceSettings.value[type], ...newSettings }\n    saveSettings()\n  }\n}\n\n// Reset settings for a specific voice\nconst resetVoiceSettings = (type: VoiceType) => {\n  if (defaultSettings[type]) {\n    voiceSettings.value[type] = { ...defaultSettings[type] }\n    saveSettings()\n  }\n}\n\n// Get voice type options for UI\nconst getVoiceTypeOptions = (): Array<{value: VoiceType, label: string, icon: string}> => {\n  const { t } = useI18n()\n  \n  return [\n    { value: 'female-sweet', label: t('voice.types.female_sweet', 'Female Sweet'), icon: 'üë©üíñ' },\n    { value: 'female-clear', label: t('voice.types.female_clear', 'Female Clear'), icon: 'üë©üíº' },\n    { value: 'female-professional', label: t('voice.types.female_professional', 'Female Professional'), icon: 'üë©üéØ' },\n    { value: 'male-strong', label: t('voice.types.male_strong', 'Male Strong'), icon: 'üë®üí™' },\n    { value: 'male-gentle', label: t('voice.types.male_gentle', 'Male Gentle'), icon: 'üë®üòä' },\n    { value: 'male-deep', label: t('voice.types.male_deep', 'Male Deep'), icon: 'üë®üé≠' },\n    { value: 'korean-female', label: t('voice.types.korean_female', 'Korean Female'), icon: 'üá∞üá∑üë©' },\n    { value: 'korean-male', label: t('voice.types.korean_male', 'Korean Male'), icon: 'üá∞üá∑üë®' }\n  ]\n}\n\n// Get current voice info\nconst getCurrentVoiceInfo = () => {\n  if (!selectedVoice.value) return null\n  \n  // Extract gender from voice type\n  const gender = currentVoiceType.value.includes('female') ? 'female' : 'male'\n  \n  return {\n    name: selectedVoice.value.name,\n    lang: selectedVoice.value.lang,\n    gender: gender\n  }\n}\n\n// Watch for settings changes\nwatch(voiceSettings, () => {\n  saveSettings()\n}, { deep: true })\n\n// Watch specifically for voice type changes\nwatch(currentVoiceType, (newType, oldType) => {\n  if (newType !== oldType) {\n    console.log('Voice type changed from', oldType, 'to', newType)\n    updateSelectedVoice()\n    saveSettings()\n  }\n})\n\n// Initialize voices when available\nif ('speechSynthesis' in window) {\n  speechSynthesis.onvoiceschanged = () => {\n    loadVoices()\n  }\n}\n\n// Load settings on module initialization\nloadSettings()\nloadVoices()\n\n// Force reload and debug voices\nconst forceReloadVoices = () => {\n  console.log('üîÑ Force reloading voices...')\n  if ('speechSynthesis' in window) {\n    // Cancel any ongoing speech\n    speechSynthesis.cancel()\n    \n    // Force reload voices\n    speechSynthesis.getVoices()\n    loadVoices()\n    \n    // Debug Korean voices\n    debugAvailableVoices()\n  }\n}\n\n// Export the composable\nexport function useVoiceStore() {\n  return {\n    voiceSettings,\n    currentVoiceType,\n    availableVoices,\n    selectedVoice,\n    setVoiceType,\n    updateVoiceSettings,\n    resetVoiceSettings,\n    playAudio,\n    createUtterance,\n    getVoiceTypeOptions,\n    getCurrentVoiceInfo,\n    loadVoices,\n    forceReloadVoices,\n    debugAvailableVoices\n  }\n}\n"],"names":[],"mappings":"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"}