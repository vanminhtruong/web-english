{"version":3,"mappings":"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","names":["_openBlock","_createElementBlock","_createElementVNode","_normalizeClass","isFlipped","scrambleWordsEnabled","$emit","_toDisplayString","_unref","currentCard","_Fragment","_renderList","_vShow","_createVNode"],"ignoreList":[],"sources":["../../src/views/practice/components/FlashcardCard.vue"],"sourcesContent":["<template>\r\n  <div class=\"perspective-1000\">\r\n    <div\r\n      :class=\"['flashcard', { 'flipped': isFlipped }]\"\r\n      @click=\"!scrambleWordsEnabled && $emit('flip-card')\"\r\n      class=\"relative w-full cursor-pointer h-80 sm:h-96 md:h-[28rem] xl:h-[30rem] 2xl:h-[32rem] select-none\"\r\n      @copy.prevent\r\n      @cut.prevent\r\n      @contextmenu.prevent\r\n    >\r\n    <!-- Prevent click event when in scramble mode to avoid flipping -->\r\n      <!-- Front Side -->\r\n      <div class=\"flashcard-face flashcard-front absolute inset-0 bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-800 flex items-center justify-center p-4 sm:p-6 md:p-8\">\r\n        <div class=\"text-center\">\r\n          <div class=\"mb-3 sm:mb-4 md:mb-5\">\r\n            <span class=\"px-2 py-1 sm:px-3 sm:py-1 md:px-4 md:py-2 xl:px-3 xl:py-1 2xl:px-3 2xl:py-1 bg-blue-100 dark:bg-gray-800 text-blue-800 dark:text-blue-300 text-xs sm:text-sm md:text-base xl:text-sm 2xl:text-sm font-medium rounded-full\">\r\n              {{ getTopicName(currentCard.category) }}\r\n            </span>\r\n          </div>\r\n          \r\n          <!-- Normal Flashcard Mode -->\r\n          <template v-if=\"!scrambleWordsEnabled\">\r\n            <h2 class=\"text-xl sm:text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-3 sm:mb-4 md:mb-5\">\r\n              {{ currentCard.word }}\r\n            </h2>\r\n            <p class=\"text-sm sm:text-base md:text-lg text-gray-600 dark:text-gray-300 mb-4 sm:mb-5 md:mb-6\">\r\n              {{ currentCard.pronunciation }}\r\n            </p>\r\n            <p class=\"text-xs sm:text-sm md:text-base text-gray-500 dark:text-gray-400\">\r\n              {{ t('flashcard.card.flip_to_meaning', 'Click to see meaning') }}\r\n            </p>\r\n          </template>\r\n          \r\n          <!-- Scramble Words Mode -->\r\n          <template v-else>\r\n            <h3 class=\"text-base sm:text-lg md:text-xl xl:text-lg 2xl:text-xl font-bold text-gray-900 dark:text-white mb-2 sm:mb-3 md:mb-4 xl:mb-3 2xl:mb-3\">\r\n              {{ t('flashcard.scrambleWords.instruction', 'Arrange the letters to form the word') }}\r\n            </h3>\r\n            <p class=\"text-sm sm:text-base md:text-lg xl:text-base 2xl:text-lg text-gray-600 dark:text-gray-300 mb-4 sm:mb-5 md:mb-6 xl:mb-4 2xl:mb-5\">\r\n              {{ currentCard.pronunciation }}\r\n            </p>\r\n            \r\n            <!-- User's assembled word -->\r\n            <div class=\"mb-4 sm:mb-5 md:mb-6 xl:mb-4 2xl:mb-5\">\r\n              <div class=\"flex flex-wrap justify-center items-center gap-1 sm:gap-2 xl:gap-1.5 2xl:gap-2 mb-2 sm:mb-3 md:mb-4 xl:mb-3 2xl:mb-3 min-h-[3rem] xl:min-h-[2.5rem] 2xl:min-h-[3rem] max-w-full px-2 sm:px-0\">\r\n                <div \r\n                  v-for=\"(letter, index) in assembledWord\" \r\n                  :key=\"`assembled-${index}`\"\r\n                  class=\"w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 xl:w-10 xl:h-10 2xl:w-11 2xl:h-11 border-2 border-gray-300 dark:border-dark-bg-mute rounded-lg flex items-center justify-center bg-blue-50 dark:bg-[#0f0f0f] text-lg sm:text-xl md:text-2xl xl:text-xl 2xl:text-2xl font-bold text-gray-900 dark:text-white cursor-pointer hover:bg-blue-100 dark:hover:bg-[#1a1a1a] transition-colors\"\r\n                  @click=\"removeLetter(index)\"\r\n                >\r\n                  {{ letter }}\r\n                </div>\r\n                <!-- Empty slots -->\r\n                <div \r\n                  v-for=\"n in Math.max(0, currentCard.word.length - assembledWord.length)\" \r\n                  :key=\"`empty-${n}`\"\r\n                  class=\"w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 xl:w-10 xl:h-10 2xl:w-11 2xl:h-11 border-2 border-dashed border-gray-300 dark:border-dark-bg-mute rounded-lg bg-gray-50 dark:bg-[#0f0f0f]\"\r\n                ></div>\r\n              </div>\r\n              \r\n              <!-- Feedback -->\r\n              <div v-if=\"scrambleAnswered\" class=\"text-center max-w-full px-2\">\r\n                <div v-if=\"scrambleCorrect\" class=\"text-green-600 dark:text-green-400\">\r\n                  <p class=\"font-semibold text-sm sm:text-base mb-2\">\r\n                    ✅ {{ t('flashcard.scrambleWords.correct', 'Correct!') }}\r\n                  </p>\r\n                  <div class=\"bg-green-50 dark:bg-[#0f0f0f] border border-green-200 dark:border-dark-bg-mute rounded-lg p-3 sm:p-4\">\r\n                    <p class=\"text-green-700 dark:text-green-400 font-medium text-sm sm:text-base\">\r\n                      {{ currentCard.meaning }}\r\n                    </p>\r\n                    <p v-if=\"currentCard.partOfSpeech\" class=\"text-green-600 dark:text-green-500 text-xs sm:text-sm mt-1 opacity-80\">\r\n                      {{ t(`vocabulary.wordTypes.${currentCard.partOfSpeech}`, currentCard.partOfSpeech) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div v-else class=\"text-red-600 dark:text-red-400\">\r\n                  <p class=\"font-semibold text-sm sm:text-base mb-2\">\r\n                    ❌ {{ t('flashcard.scrambleWords.incorrect', 'Try again!') }}\r\n                  </p>\r\n                  <div class=\"bg-red-50 dark:bg-[#0f0f0f] border border-red-200 dark:border-dark-bg-mute rounded-lg p-3 sm:p-4\">\r\n                    <p class=\"text-red-700 dark:text-red-400 font-bold text-base sm:text-lg mb-1\">\r\n                      {{ currentCard.word.toUpperCase() }}\r\n                    </p>\r\n                    <p class=\"text-red-600 dark:text-red-500 text-sm sm:text-base\">\r\n                      {{ currentCard.meaning }}\r\n                    </p>\r\n                    <p v-if=\"currentCard.partOfSpeech\" class=\"text-red-500 dark:text-red-600 text-xs sm:text-sm mt-1 opacity-80\">\r\n                      {{ t(`vocabulary.wordTypes.${currentCard.partOfSpeech}`, currentCard.partOfSpeech) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Scrambled letters to choose from -->\r\n            <div class=\"flex justify-center flex-wrap gap-2 sm:gap-3 md:gap-4 xl:gap-2 2xl:gap-2.5 mb-4 sm:mb-5 md:mb-6 xl:mb-4 2xl:mb-4 px-2 sm:px-4 md:px-6 xl:px-4 2xl:px-6 max-w-full\">\r\n              <button \r\n                v-for=\"(letter, index) in availableLetters\" \r\n                :key=\"`scrambled-${index}`\"\r\n                v-show=\"!letter.used\"\r\n                class=\"w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 xl:w-10 xl:h-10 2xl:w-11 2xl:h-11 border-2 border-gray-400 dark:border-dark-bg-soft rounded-lg flex items-center justify-center bg-white dark:bg-[#0f0f0f] hover:bg-gray-100 dark:hover:bg-[#1a1a1a] text-lg sm:text-xl md:text-2xl xl:text-xl 2xl:text-2xl font-bold text-gray-900 dark:text-white cursor-pointer transition-all duration-200 hover:scale-105 active:scale-95\"\r\n                @click=\"selectLetter(index)\"\r\n                :disabled=\"scrambleAnswered && scrambleCorrect\"\r\n              >\r\n                {{ letter.char }}\r\n              </button>\r\n            </div>\r\n            \r\n            <!-- Control buttons -->\r\n            <div class=\"flex flex-wrap justify-center gap-1.5 xs:gap-2 sm:gap-3 md:gap-4 xl:gap-2 2xl:gap-3 px-2 sm:px-4 xl:px-2 2xl:px-4 max-w-full\">\r\n              <button \r\n                @click=\"backspaceAssembledWord\"\r\n                class=\"px-2 py-1 xs:px-2 xs:py-1.5 sm:px-3 sm:py-2 md:px-4 md:py-2.5 xl:px-3 xl:py-2 2xl:px-4 2xl:py-2.5 bg-orange-500 hover:bg-orange-600 dark:bg-orange-600 dark:hover:bg-orange-700 text-white text-xs sm:text-sm md:text-base xl:text-sm 2xl:text-base font-semibold rounded-md sm:rounded-lg transition-colors flex items-center gap-1 sm:gap-2 xl:gap-1 2xl:gap-2 min-w-0 flex-shrink-0\"\r\n                :disabled=\"assembledWord.length === 0 || (scrambleAnswered && scrambleCorrect)\"\r\n                :title=\"t('flashcard.scrambleWords.backspace', 'Backspace')\"\r\n              >\r\n                <svg class=\"w-3 h-3 sm:w-4 sm:h-4 xl:w-3 xl:h-3 2xl:w-4 2xl:h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path fill-rule=\"evenodd\" d=\"M6.707 4.879A3 3 0 018.828 4H15a3 3 0 013 3v6a3 3 0 01-3 3H8.828a3 3 0 01-2.12-.879l-4.415-4.414a1 1 0 010-1.414l4.414-4.414zm4 3.707a1 1 0 00-1.414-1.414L8 8.586 6.707 7.293a1 1 0 10-1.414 1.414L6.586 10l-1.293 1.293a1 1 0 101.414 1.414L8 11.414l1.293 1.293a1 1 0 001.414-1.414L9.414 10l1.293-1.293z\" clip-rule=\"evenodd\"/>\r\n                </svg>\r\n                <span class=\"hidden xs:hidden sm:inline\">{{ t('flashcard.scrambleWords.backspace', 'Backspace') }}</span>\r\n              </button>\r\n              <button \r\n                @click=\"clearAssembledWord\"\r\n                class=\"px-2 py-1 xs:px-3 xs:py-1.5 sm:px-4 sm:py-2 md:px-5 md:py-2.5 xl:px-4 xl:py-2 2xl:px-5 2xl:py-2.5 bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-700 text-white text-xs sm:text-sm md:text-base xl:text-sm 2xl:text-base font-semibold rounded-md sm:rounded-lg transition-colors min-w-0 flex-shrink-0\"\r\n                :disabled=\"assembledWord.length === 0 || (scrambleAnswered && scrambleCorrect)\"\r\n              >\r\n                {{ t('flashcard.scrambleWords.clear', 'Clear') }}\r\n              </button>\r\n              <button \r\n                @click=\"checkScrambleAnswer\"\r\n                class=\"px-2 py-1 xs:px-3 xs:py-1.5 sm:px-4 sm:py-2 md:px-5 md:py-2.5 xl:px-4 xl:py-2 2xl:px-5 2xl:py-2.5 bg-blue-600 hover:bg-blue-700 text-white text-xs sm:text-sm md:text-base xl:text-sm 2xl:text-base font-semibold rounded-md sm:rounded-lg transition-colors min-w-0 flex-shrink-0\"\r\n                :disabled=\"assembledWord.length !== currentCard.word.length || (scrambleAnswered && scrambleCorrect)\"\r\n              >\r\n                {{ t('flashcard.scrambleWords.check', 'Check') }}\r\n              </button>\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Back Side -->\r\n      <div class=\"flashcard-face flashcard-back absolute inset-0 bg-gradient-to-br from-green-400 to-green-600 dark:from-green-700 dark:to-green-900 rounded-xl shadow-2xl border border-gray-200 dark:border-gray-800 flex items-center justify-center p-4 sm:p-6 md:p-8\">\r\n        <div class=\"text-center text-white\">\r\n          <h3 class=\"text-base sm:text-lg md:text-xl font-bold mb-3 sm:mb-4 md:mb-5\">\r\n            {{ currentCard.meaning }}\r\n          </h3>\r\n          <p class=\"text-sm sm:text-base md:text-lg mb-3 sm:mb-4 md:mb-5\" v-if=\"currentCard.partOfSpeech\">\r\n            {{ t(`vocabulary.wordTypes.${currentCard.partOfSpeech}`, currentCard.partOfSpeech) }}\r\n          </p>\r\n          <p class=\"text-xs sm:text-sm md:text-base mb-3 sm:mb-4 md:mb-5 leading-relaxed\" v-if=\"currentCard.example\">\r\n            {{ currentCard.example }}\r\n          </p>\r\n          <p class=\"text-xs sm:text-sm md:text-base opacity-75\">\r\n            {{ t('flashcard.card.flip_back', 'Click to flip back') }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Fireworks + Sound effect (non-intrusive, fixed overlay) -->\r\n    <FireworkSoundEffect \r\n      ref=\"fireworkEffect\"\r\n      :trigger-firework=\"triggerFirework\"\r\n      :trigger-sound=\"triggerSound\"\r\n      :is-correct=\"isCorrectAnswer\"\r\n      @effect-complete=\"resetTriggers\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { getTopicName } from '../../../utils/topicUtils'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { ref, computed, watch, defineAsyncComponent, nextTick } from 'vue'\r\nimport { useVoiceStore } from '../../../stores/voiceStore'\r\n\r\ninterface FlashcardData {\r\n  word: string\r\n  meaning: string\r\n  pronunciation: string\r\n  category: string\r\n  partOfSpeech?: string\r\n  example?: string\r\n}\r\n\r\ninterface Props {\r\n  currentCard: FlashcardData\r\n  isFlipped: boolean\r\n  scrambleWordsEnabled?: boolean\r\n  currentIndex?: number\r\n  totalCards?: number\r\n}\r\n\r\nconst { t } = useI18n()\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst emit = defineEmits<{\r\n  'flip-card': []\r\n  'next-card': []\r\n  'show-results': []\r\n  'scramble-answer': [isCorrect: boolean]\r\n}>()\r\n\r\n// Firework/Sound effect (reuse existing project component)\r\nconst FireworkSoundEffect = defineAsyncComponent(() => import('./FireworkSoundEffect.vue'))\r\nconst triggerFirework = ref(false)\r\nconst triggerSound = ref(false)\r\nconst isCorrectAnswer = ref(false)\r\nconst fireworkEffect = ref()\r\nconst resetTriggers = () => {\r\n  triggerFirework.value = false\r\n  triggerSound.value = false\r\n}\r\n\r\n// Voice pronunciation\r\nconst { playAudio } = useVoiceStore()\r\n\r\n// Auto-advance timer\r\nlet autoAdvanceTimer: number | null = null\r\n\r\nconst clearAutoAdvanceTimer = () => {\r\n  if (autoAdvanceTimer) {\r\n    clearTimeout(autoAdvanceTimer)\r\n    autoAdvanceTimer = null\r\n  }\r\n}\r\n\r\n// Check if current screen is xs or sm (reactive to window resize)\r\nconst isSmallScreen = ref(false)\r\n\r\nconst updateScreenSize = () => {\r\n  if (typeof window !== 'undefined') {\r\n    isSmallScreen.value = window.innerWidth < 768 // Tailwind md breakpoint\r\n  }\r\n}\r\n\r\n// Initialize and listen for resize\r\nif (typeof window !== 'undefined') {\r\n  updateScreenSize()\r\n  window.addEventListener('resize', updateScreenSize)\r\n}\r\n\r\n// Scramble Words logic\r\ninterface ScrambledLetter {\r\n  char: string\r\n  used: boolean\r\n  originalIndex: number\r\n}\r\n\r\nconst assembledWord = ref<string[]>([])\r\nconst availableLetters = ref<ScrambledLetter[]>([])\r\nconst scrambleAnswered = ref(false)\r\nconst scrambleCorrect = ref(false)\r\n\r\n// Track previous shuffle results to avoid repetition\r\nconst previousShuffles = ref<string[][]>([])\r\nconst MAX_SHUFFLE_HISTORY = 3\r\n\r\n// Enhanced scramble algorithm with better randomization\r\nconst createAdvancedShuffle = (letters: string[]): string[] => {\r\n  const shuffled = [...letters]\r\n  \r\n  // Multi-pass shuffle with different entropy sources\r\n  const passes = Math.max(3, Math.floor(letters.length / 2) + 1)\r\n  \r\n  for (let pass = 0; pass < passes; pass++) {\r\n    // Use different entropy sources for each pass\r\n    const timeSeed = Date.now() + pass * 1000\r\n    const randomSeed = Math.random() * 10000\r\n    const passEntropy = (timeSeed + randomSeed) % 1\r\n    \r\n    // Enhanced Fisher-Yates with entropy injection\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      // Add multiple randomness sources\r\n      const baseRandom = Math.random()\r\n      const timeRandom = (Date.now() % 997) / 997 // Use prime number for better distribution\r\n      const passRandom = (pass + 1) / passes\r\n      const combinedRandom = (baseRandom + timeRandom + passRandom + passEntropy) % 1\r\n      \r\n      const j = Math.floor(combinedRandom * (i + 1))\r\n      ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]\r\n    }\r\n    \r\n    // Additional scrambling pass with reverse iteration\r\n    if (pass % 2 === 0) {\r\n      for (let i = 0; i < shuffled.length - 1; i++) {\r\n        const entropy = (Math.random() + (Date.now() % 101) / 100) % 1\r\n        if (entropy > 0.5) {\r\n          const j = Math.min(i + 1 + Math.floor(Math.random() * 2), shuffled.length - 1)\r\n          ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return shuffled\r\n}\r\n\r\n// Check if current shuffle is too similar to previous ones\r\nconst isSimilarToPrevious = (current: string[], previous: string[][]): boolean => {\r\n  if (previous.length === 0) return false\r\n  \r\n  return previous.some(prev => {\r\n    if (prev.length !== current.length) return false\r\n    \r\n    // Count matching positions\r\n    let matches = 0\r\n    for (let i = 0; i < current.length; i++) {\r\n      if (current[i] === prev[i]) matches++\r\n    }\r\n    \r\n    // Consider similar if more than 60% positions match\r\n    return (matches / current.length) > 0.6\r\n  })\r\n}\r\n\r\n// Initialize scrambled letters when card changes\r\nconst initializeScrambledLetters = () => {\r\n  if (!props.currentCard || !props.scrambleWordsEnabled) return\r\n  \r\n  const word = props.currentCard.word.toLowerCase()\r\n  const letters = word.split('')\r\n  \r\n  // Create array of letter objects\r\n  const letterObjects: ScrambledLetter[] = letters.map((char, index) => ({\r\n    char: char.toUpperCase(),\r\n    used: false,\r\n    originalIndex: index\r\n  }))\r\n  \r\n  // Try multiple shuffles until we get a sufficiently different result\r\n  let attempts = 0\r\n  let shuffledOrder: string[]\r\n  const maxAttempts = 10\r\n  \r\n  do {\r\n    shuffledOrder = createAdvancedShuffle(letters.map(char => char.toUpperCase()))\r\n    attempts++\r\n  } while (\r\n    attempts < maxAttempts && \r\n    isSimilarToPrevious(shuffledOrder, previousShuffles.value)\r\n  )\r\n  \r\n  // Update shuffle history\r\n  previousShuffles.value.push(shuffledOrder)\r\n  if (previousShuffles.value.length > MAX_SHUFFLE_HISTORY) {\r\n    previousShuffles.value.shift()\r\n  }\r\n  \r\n  // Apply the shuffle order to letter objects\r\n  const shuffledLetterObjects: ScrambledLetter[] = []\r\n  const usedIndices = new Set<number>()\r\n  \r\n  shuffledOrder.forEach((char) => {\r\n    // Find the first unused letter object that matches this character\r\n    const originalLetterIndex = letterObjects.findIndex((obj, idx) => \r\n      obj.char === char && !usedIndices.has(idx)\r\n    )\r\n    \r\n    if (originalLetterIndex !== -1) {\r\n      const originalLetterObj = letterObjects[originalLetterIndex]\r\n      usedIndices.add(originalLetterIndex)\r\n      \r\n      shuffledLetterObjects.push({\r\n        ...originalLetterObj,\r\n        used: false\r\n      })\r\n    }\r\n  })\r\n  \r\n  // Ensure we have all letters - if shuffle failed, use original order\r\n  availableLetters.value = shuffledLetterObjects.length === letterObjects.length \r\n    ? shuffledLetterObjects \r\n    : letterObjects\r\n    \r\n  assembledWord.value = []\r\n  scrambleAnswered.value = false\r\n  scrambleCorrect.value = false\r\n  \r\n  // Debug logging\r\n  console.log('🎲 New shuffle created:', {\r\n    word: props.currentCard.word,\r\n    original: letters,\r\n    shuffled: shuffledOrder,\r\n    attempts: attempts,\r\n    historySize: previousShuffles.value.length\r\n  })\r\n}\r\n\r\n// Watch for card changes to reinitialize\r\nwatch(() => props.currentCard, () => {\r\n  clearAutoAdvanceTimer() // Clear timer when card changes\r\n  if (props.scrambleWordsEnabled) {\r\n    initializeScrambledLetters()\r\n  }\r\n}, { immediate: true })\r\n\r\n// Watch for scramble mode toggle\r\nwatch(() => props.scrambleWordsEnabled, (enabled) => {\r\n  clearAutoAdvanceTimer() // Clear timer when mode changes\r\n  if (enabled) {\r\n    initializeScrambledLetters()\r\n  } else {\r\n    // Reset state when disabled\r\n    assembledWord.value = []\r\n    availableLetters.value = []\r\n    scrambleAnswered.value = false\r\n    scrambleCorrect.value = false\r\n    // Clear shuffle history when mode is disabled\r\n    previousShuffles.value = []\r\n  }\r\n})\r\n\r\nconst selectLetter = (index: number) => {\r\n  if (availableLetters.value[index].used) return\r\n  if (scrambleAnswered.value && scrambleCorrect.value) return\r\n  \r\n  // Add letter to assembled word\r\n  assembledWord.value.push(availableLetters.value[index].char)\r\n  // Mark letter as used\r\n  availableLetters.value[index].used = true\r\n  \r\n  // Reset feedback when user makes changes\r\n  scrambleAnswered.value = false\r\n  scrambleCorrect.value = false\r\n}\r\n\r\nconst removeLetter = (assembledIndex: number) => {\r\n  if (scrambleAnswered.value && scrambleCorrect.value) return\r\n  \r\n  const removedChar = assembledWord.value[assembledIndex]\r\n  \r\n  // Remove from assembled word\r\n  assembledWord.value.splice(assembledIndex, 1)\r\n  \r\n  // Find the corresponding letter in available letters and mark as unused\r\n  const availableIndex = availableLetters.value.findIndex(\r\n    letter => letter.char === removedChar && letter.used\r\n  )\r\n  \r\n  if (availableIndex !== -1) {\r\n    availableLetters.value[availableIndex].used = false\r\n  }\r\n  \r\n  // Reset feedback when user makes changes\r\n  scrambleAnswered.value = false\r\n  scrambleCorrect.value = false\r\n}\r\n\r\nconst clearAssembledWord = () => {\r\n  if (scrambleAnswered.value && scrambleCorrect.value) return\r\n  \r\n  // Mark all letters as unused\r\n  availableLetters.value.forEach(letter => {\r\n    letter.used = false\r\n  })\r\n  \r\n  // Clear assembled word\r\n  assembledWord.value = []\r\n  \r\n  // Reset feedback\r\n  scrambleAnswered.value = false\r\n  scrambleCorrect.value = false\r\n}\r\n\r\nconst backspaceAssembledWord = () => {\r\n  if (scrambleAnswered.value && scrambleCorrect.value) return\r\n  if (assembledWord.value.length === 0) return\r\n  \r\n  // Remove last character from assembled word\r\n  const removedChar = assembledWord.value.pop()\r\n  \r\n  // Find the corresponding letter in available letters and mark as unused\r\n  const availableIndex = availableLetters.value.findIndex(\r\n    letter => letter.char === removedChar && letter.used\r\n  )\r\n  \r\n  if (availableIndex !== -1) {\r\n    availableLetters.value[availableIndex].used = false\r\n  }\r\n  \r\n  // Reset feedback when user makes changes\r\n  scrambleAnswered.value = false\r\n  scrambleCorrect.value = false\r\n}\r\n\r\nconst checkScrambleAnswer = async () => {\r\n  if (assembledWord.value.length !== props.currentCard.word.length) return\r\n  \r\n  const userAnswer = assembledWord.value.join('').toLowerCase()\r\n  const correctAnswer = props.currentCard.word.toLowerCase()\r\n  \r\n  scrambleAnswered.value = true\r\n  scrambleCorrect.value = userAnswer === correctAnswer\r\n\r\n  // Clear any existing timer\r\n  clearAutoAdvanceTimer()\r\n\r\n  // Check if this is the last card\r\n  const isLastCard = props.currentIndex !== undefined && props.totalCards !== undefined && \r\n                     (props.currentIndex + 1) >= props.totalCards\r\n  \r\n  // Debug logging\r\n  console.log('Scramble Check Debug:', {\r\n    currentIndex: props.currentIndex,\r\n    totalCards: props.totalCards,\r\n    isLastCard,\r\n    isSmallScreen: isSmallScreen.value,\r\n    scrambleCorrect: scrambleCorrect.value\r\n  })\r\n\r\n  // Emit scramble answer result to parent for stats tracking\r\n  emit('scramble-answer', scrambleCorrect.value)\r\n  \r\n  if (scrambleCorrect.value) {\r\n    // Correct answer: green fireworks + voice + auto-advance\r\n    isCorrectAnswer.value = true\r\n    triggerFirework.value = true\r\n    triggerSound.value = true\r\n\r\n    // Play voice pronunciation\r\n    try {\r\n      await nextTick()\r\n      await playAudio(props.currentCard.word)\r\n    } catch (error) {\r\n      console.warn('Voice playbook error:', error)\r\n    }\r\n\r\n    // Auto-advance on xs/sm screens after 2.5 seconds\r\n    if (isSmallScreen.value) {\r\n      console.log('Setting timer for correct answer:', isLastCard ? 'show-results' : 'next-card')\r\n      autoAdvanceTimer = setTimeout(() => {\r\n        console.log('Timer executed, emitting:', isLastCard ? 'show-results' : 'next-card')\r\n        if (isLastCard) {\r\n          emit('show-results')\r\n        } else {\r\n          emit('next-card')\r\n        }\r\n      }, 2500)\r\n    }\r\n  } else {\r\n    // Incorrect answer: red fireworks only, no voice\r\n    isCorrectAnswer.value = false\r\n    triggerFirework.value = true\r\n    triggerSound.value = true // Component handles red vs green based on isCorrectAnswer\r\n\r\n    // Auto-advance on xs/sm screens after 2.5 seconds (last card shows results)\r\n    if (isSmallScreen.value) {\r\n      console.log('Setting timer for incorrect answer:', isLastCard ? 'show-results' : 'next-card')\r\n      autoAdvanceTimer = setTimeout(() => {\r\n        console.log('Timer executed for incorrect, emitting:', isLastCard ? 'show-results' : 'next-card')\r\n        if (isLastCard) {\r\n          emit('show-results')\r\n        } else {\r\n          emit('next-card')\r\n        }\r\n      }, 2500)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.perspective-1000 {\r\n  perspective: 1000px;\r\n}\r\n\r\n.flashcard {\r\n  transform-style: preserve-3d;\r\n  transition: transform 0.6s;\r\n}\r\n\r\n.flashcard.flipped {\r\n  transform: rotateY(180deg);\r\n}\r\n\r\n.flashcard-face {\r\n  backface-visibility: hidden;\r\n}\r\n\r\n.flashcard-front {\r\n  transform: rotateY(0deg);\r\n}\r\n\r\n.flashcard-back {\r\n  transform: rotateY(180deg);\r\n}\r\n\r\n/* Remove tap highlight and touch effects on mobile for scramble mode elements */\r\n.flashcard-front * {\r\n  -webkit-tap-highlight-color: transparent;\r\n  -webkit-touch-callout: none;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  touch-action: manipulation;\r\n}\r\n\r\n/* Specifically target clickable elements in scramble mode */\r\n.flashcard-front button,\r\n.flashcard-front [role=\"button\"],\r\n.flashcard-front .cursor-pointer {\r\n  -webkit-tap-highlight-color: transparent;\r\n  -webkit-touch-callout: none;\r\n  touch-action: manipulation;\r\n  outline: none;\r\n}\r\n\r\n/* Remove focus outline on mobile for cleaner look */\r\n@media (max-width: 767px) {\r\n  .flashcard-front button:focus,\r\n  .flashcard-front [role=\"button\"]:focus,\r\n  .flashcard-front .cursor-pointer:focus {\r\n    outline: none;\r\n    box-shadow: none;\r\n  }\r\n}\r\n</style>\r\n"],"file":"assets/FlashcardCard-D-QxtB_h.js"}