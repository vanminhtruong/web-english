{"version":3,"mappings":"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","names":["response","errorMsg","ConfirmToast","isGoogleSignedIn","googleUserEmail","_openBlock","_createElementBlock","_createElementVNode","_createVNode","_unref","_toDisplayString","_Transition","_withDirectives","_createTextVNode"],"ignoreList":[],"sources":["../../src/views/vocabulary/composables/useVocabularyFilters.ts","../../src/views/vocabulary/composables/useVocabularyPagination.ts","../../src/views/vocabulary/composables/useVocabularyGrouping.ts","../../src/views/vocabulary/composables/useVocabularyDialogs.ts","../../src/views/vocabulary/composables/useTopicManager.ts","../../src/services/googleDriveAuth.ts","../../src/services/googleDriveApi.ts","../../src/views/vocabulary/composables/useVocabularySaving.ts","../../src/views/vocabulary/composables/useMoveMode.ts","../../src/views/vocabulary/VocabularyListView.vue"],"sourcesContent":["import { ref, watch } from 'vue';\r\n\r\nexport function useVocabularyFilters() {\r\n  const searchQuery = ref('');\r\n  const selectedCategory = ref('');\r\n  const selectedLevel = ref('');\r\n  const showFavoritesOnly = ref(false);\r\n  const currentPage = ref(1);\r\n  const dateGroupPages = ref<Record<string, number>>({});\r\n\r\n  function getStoredValue(key: string, defaultValue: any) {\r\n    try {\r\n      const stored = localStorage.getItem(key);\r\n      return stored !== null ? JSON.parse(stored) : defaultValue;\r\n    } catch {\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  function setStoredValue(key: string, value: any) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n\r\n  showFavoritesOnly.value = getStoredValue('vocabulary-show-favorites-only', false);\r\n  searchQuery.value = getStoredValue('vocabulary-search-query', '');\r\n  selectedCategory.value = getStoredValue('vocabulary-selected-category', '');\r\n  selectedLevel.value = getStoredValue('vocabulary-selected-level', '');\r\n\r\n  const updateShowFavoritesOnly = (value: boolean) => {\r\n    showFavoritesOnly.value = value;\r\n    setStoredValue('vocabulary-show-favorites-only', value);\r\n    currentPage.value = 1;\r\n    dateGroupPages.value = {};\r\n  };\r\n\r\n  const updateSearchQuery = (value: string) => {\r\n    searchQuery.value = value;\r\n    setStoredValue('vocabulary-search-query', value);\r\n    currentPage.value = 1;\r\n    dateGroupPages.value = {};\r\n  };\r\n\r\n  const updateSelectedCategory = (value: string) => {\r\n    selectedCategory.value = value;\r\n    setStoredValue('vocabulary-selected-category', value);\r\n    currentPage.value = 1;\r\n    dateGroupPages.value = {};\r\n  };\r\n\r\n  const updateSelectedLevel = (value: string) => {\r\n    selectedLevel.value = value;\r\n    setStoredValue('vocabulary-selected-level', value);\r\n    currentPage.value = 1;\r\n    dateGroupPages.value = {};\r\n  };\r\n\r\n  return {\r\n    searchQuery,\r\n    selectedCategory,\r\n    selectedLevel,\r\n    showFavoritesOnly,\r\n    currentPage,\r\n    dateGroupPages,\r\n    updateShowFavoritesOnly,\r\n    updateSearchQuery,\r\n    updateSelectedCategory,\r\n    updateSelectedLevel,\r\n  };\r\n} ","import { ref, computed } from 'vue';\r\n\r\nexport function useVocabularyPagination(filteredVocabulary: any, useGrouping: any, itemsPerPage: any) {\r\n  const currentPage = ref(1);\r\n\r\n  const totalPages = computed(() => {\r\n    if (useGrouping.value) return 1;\r\n    return Math.ceil(filteredVocabulary.value.length / itemsPerPage.value);\r\n  });\r\n\r\n  const paginatedVocabulary = computed(() => {\r\n    if (useGrouping.value) return filteredVocabulary.value;\r\n    const start = (currentPage.value - 1) * itemsPerPage.value;\r\n    const end = start + itemsPerPage.value;\r\n    return filteredVocabulary.value.slice(start, end);\r\n  });\r\n\r\n  const startIndex = computed(() => (currentPage.value - 1) * itemsPerPage.value + 1);\r\n  const endIndex = computed(() => Math.min(currentPage.value * itemsPerPage.value, filteredVocabulary.value.length));\r\n\r\n  const visiblePages = computed(() => {\r\n    const pages = [];\r\n    const start = Math.max(1, currentPage.value - 2);\r\n    const end = Math.min(totalPages.value, currentPage.value + 2);\r\n    for (let i = start; i <= end; i++) {\r\n      pages.push(i);\r\n    }\r\n    return pages;\r\n  });\r\n\r\n  const previousPage = () => {\r\n    if (currentPage.value > 1) currentPage.value--;\r\n  };\r\n\r\n  const nextPage = () => {\r\n    if (currentPage.value < totalPages.value) currentPage.value++;\r\n  };\r\n\r\n  const goToPage = (page: number) => {\r\n    currentPage.value = page;\r\n  };\r\n\r\n  return {\r\n    currentPage,\r\n    totalPages,\r\n    paginatedVocabulary,\r\n    startIndex,\r\n    endIndex,\r\n    visiblePages,\r\n    previousPage,\r\n    nextPage,\r\n    goToPage,\r\n  };\r\n} ","import { ref } from 'vue';\r\nimport { getDateKey } from '../../../utils/dateUtils';\r\n\r\nexport function useVocabularyGrouping() {\r\n  const useGrouping = ref(false);\r\n  const itemsPerPageGrouped = ref(5);\r\n  const dateGroupPages = ref<Record<string, number>>({});\r\n\r\n  const getStoredUseGrouping = (): boolean => {\r\n    const stored = localStorage.getItem('vocabulary-use-grouping');\r\n    return stored ? JSON.parse(stored) : false;\r\n  };\r\n\r\n  const setStoredUseGrouping = (value: boolean) => {\r\n    localStorage.setItem('vocabulary-use-grouping', JSON.stringify(value));\r\n  };\r\n\r\n  useGrouping.value = getStoredUseGrouping();\r\n\r\n  const toggleGrouping = () => {\r\n    useGrouping.value = !useGrouping.value;\r\n    setStoredUseGrouping(useGrouping.value);\r\n    // Resetting page state is handled in the main component\r\n  };\r\n  \r\n  const reloadGroupingState = () => {\r\n    useGrouping.value = getStoredUseGrouping();\r\n  };\r\n  \r\n  const dateGroupPrevious = (date: string, filteredVocabulary: any[]) => {\r\n    const currentPage = dateGroupPages.value[date] || 1;\r\n    if (currentPage > 1) {\r\n      dateGroupPages.value[date] = currentPage - 1;\r\n    }\r\n  };\r\n\r\n  const dateGroupNext = (date: string, filteredVocabulary: any[]) => {\r\n    const currentPage = dateGroupPages.value[date] || 1;\r\n    const dateGroup = filteredVocabulary.filter(word => getDateKey(word.createdAt) === date);\r\n    const totalPages = Math.ceil(dateGroup.length / itemsPerPageGrouped.value);\r\n    if (currentPage < totalPages) {\r\n      dateGroupPages.value[date] = currentPage + 1;\r\n    }\r\n  };\r\n\r\n  const dateGroupGoToPage = (date: string, page: number) => {\r\n    dateGroupPages.value[date] = page;\r\n  };\r\n\r\n  return {\r\n    useGrouping,\r\n    itemsPerPageGrouped,\r\n    dateGroupPages,\r\n    toggleGrouping,\r\n    reloadGroupingState,\r\n    dateGroupPrevious,\r\n    dateGroupNext,\r\n    dateGroupGoToPage,\r\n  };\r\n} ","import { ref } from 'vue';\r\nimport type { Vocabulary } from '../../../composables/useVocabularyStore';\r\n\r\nexport function useVocabularyDialogs() {\r\n  const showFormDialog = ref(false);\r\n  const selectedVocabulary = ref<Vocabulary | null>(null);\r\n  const showDetailDialog = ref(false);\r\n  const selectedVocabularyForDetail = ref<Vocabulary | null>(null);\r\n\r\n  const openAddDialog = () => {\r\n    selectedVocabulary.value = null;\r\n    showFormDialog.value = true;\r\n    // Dispatch edit word event\r\n    window.dispatchEvent(new CustomEvent('vocabulary-edit-word'));\r\n  };\r\n\r\n  const openEditDialog = (word: Vocabulary) => {\r\n    selectedVocabulary.value = word;\r\n    showFormDialog.value = true;\r\n    // Dispatch edit word event\r\n    window.dispatchEvent(new CustomEvent('vocabulary-edit-word'));\r\n  };\r\n\r\n  const onVocabularySaved = () => {\r\n    showFormDialog.value = false;\r\n    selectedVocabulary.value = null;\r\n  };\r\n\r\n  const openDetailsDialog = (word: Vocabulary) => {\r\n    selectedVocabularyForDetail.value = word;\r\n    showDetailDialog.value = true;\r\n    // Dispatch view details event\r\n    window.dispatchEvent(new CustomEvent('vocabulary-view-details'));\r\n  };\r\n\r\n  const openEditFromDetail = (word: Vocabulary) => {\r\n    showDetailDialog.value = false;\r\n    selectedVocabulary.value = word;\r\n    showFormDialog.value = true;\r\n    // Dispatch edit word event\r\n    window.dispatchEvent(new CustomEvent('vocabulary-edit-word'));\r\n  };\r\n\r\n  return {\r\n    showFormDialog,\r\n    selectedVocabulary,\r\n    showDetailDialog,\r\n    selectedVocabularyForDetail,\r\n    openAddDialog,\r\n    openEditDialog,\r\n    onVocabularySaved,\r\n    openDetailsDialog,\r\n    openEditFromDetail,\r\n  };\r\n} ","import { ref, watch } from 'vue';\nimport { useVocabularyStore } from '../../../composables/useVocabularyStore';\nimport { useModalStore } from '../../../stores/modalStore';\n\nexport function useTopicManager(debounceAutoSave: () => void) {\n  const showTopicManager = ref(false);\n  const vocabularyStore = useVocabularyStore();\n  const modalStore = useModalStore();\n\n  const openTopicManager = () => {\n    showTopicManager.value = true;\n    modalStore.setTopicManager(true);\n  };\n\n  // Watch for changes to sync with modal store\n  watch(showTopicManager, (newValue: boolean) => {\n    modalStore.setTopicManager(newValue);\n  });\n\n  const onTopicAdded = (topic: { key: string; vi: string; en: string }) => {\n    vocabularyStore.addCustomTopic(topic);\n    debounceAutoSave();\n    window.dispatchEvent(new CustomEvent('topics-updated'));\n  };\n\n  const onTopicUpdated = (oldKey: string, topic: { key: string; vi: string; en: string }) => {\n    vocabularyStore.allVocabularies.value.forEach(vocab => {\n      if (vocab.category === oldKey) {\n        vocabularyStore.updateVocabulary(vocab.id, { category: topic.key });\n      }\n    });\n    vocabularyStore.updateCustomTopic(oldKey, topic);\n    debounceAutoSave();\n    window.dispatchEvent(new CustomEvent('topics-updated'));\n  };\n\n  const onTopicDeleted = (key: string) => {\n    vocabularyStore.deleteCustomTopic(key);\n    debounceAutoSave();\n    window.dispatchEvent(new CustomEvent('topics-updated'));\n  };\n\n  return {\n    showTopicManager,\n    openTopicManager,\n    onTopicAdded,\n    onTopicUpdated,\n    onTopicDeleted,\n  };\n} ","import { ref, computed } from 'vue';\n\n// Google Drive API configuration\nconst GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID || '';\nconst GOOGLE_API_KEY = import.meta.env.VITE_GOOGLE_API_KEY || '';\nconst DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';\nconst SCOPES = 'https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/userinfo.email';\n\n// Global state\nconst isGoogleApiLoaded = ref(false);\nconst isGoogleSignedIn = ref(false);\nconst googleUser = ref<any>(null);\nconst googleUserEmail = ref<string>('');\nconst authError = ref<string>('');\n\n// LocalStorage keys for persistence\nconst GOOGLE_TOKEN_KEY = 'vocabulary-google-token';\nconst GOOGLE_USER_KEY = 'vocabulary-google-user';\nconst GOOGLE_USER_EMAIL_KEY = 'vocabulary-google-user-email';\nconst GOOGLE_SIGNED_IN_KEY = 'vocabulary-is-google-signed-in';\n\n/**\n * Google Drive Authentication Service\n * Handles Google OAuth 2.0 authentication for Drive API access\n */\nexport class GoogleDriveAuth {\n  private static instance: GoogleDriveAuth;\n  private gapi: any = null;\n  private tokenClient: any = null;\n  private autoRefreshTimer: number | null = null;\n\n  private constructor() {\n    // Restore saved auth state on initialization\n    this.loadSavedAuthState();\n  }\n\n  public static getInstance(): GoogleDriveAuth {\n    if (!GoogleDriveAuth.instance) {\n      GoogleDriveAuth.instance = new GoogleDriveAuth();\n    }\n    return GoogleDriveAuth.instance;\n  }\n\n  /**\n   * Load saved authentication state from localStorage\n   */\n  private loadSavedAuthState(): void {\n    try {\n      const savedToken = localStorage.getItem(GOOGLE_TOKEN_KEY);\n      const savedUser = localStorage.getItem(GOOGLE_USER_KEY);\n      const savedEmail = localStorage.getItem(GOOGLE_USER_EMAIL_KEY);\n      const savedSignedIn = localStorage.getItem(GOOGLE_SIGNED_IN_KEY);\n\n      if (savedToken && savedUser && savedSignedIn === 'true') {\n        console.log('📂 Loading saved Google authentication state...');\n        \n        // Parse saved data\n        const tokenData = JSON.parse(savedToken);\n        const userData = JSON.parse(savedUser);\n        \n        // Check if token is expired (Custom: 3 months)\n        const tokenAge = Date.now() - (tokenData.timestamp || 0);\n        const isTokenExpired = tokenAge > (90 * 24 * 60 * 60 * 1000); // 90 days (3 months)\n        \n        // Persist login state even if token is expired; we'll refresh later\n        googleUser.value = userData;\n        googleUserEmail.value = savedEmail || '';\n        isGoogleSignedIn.value = true;\n        if (isTokenExpired) {\n          console.log('⏰ Saved Google token expired, will attempt silent refresh later');\n        } else {\n          console.log('✅ Google authentication state restored from localStorage');\n        }\n      } else {\n        console.log('ℹ️ No saved Google authentication state found');\n      }\n    } catch (error) {\n      console.error('❌ Error loading saved auth state:', error);\n      // Do not clear saved state aggressively; keep as-is to allow later recovery\n    }\n  }\n\n  /**\n   * Save authentication state to localStorage\n   */\n  private saveAuthState(token: any, user: any, email?: string): void {\n    try {\n      localStorage.setItem(GOOGLE_TOKEN_KEY, JSON.stringify({\n        access_token: token.access_token,\n        timestamp: Date.now()\n      }));\n      localStorage.setItem(GOOGLE_USER_KEY, JSON.stringify(user));\n      localStorage.setItem(GOOGLE_SIGNED_IN_KEY, 'true');\n      if (email) {\n        localStorage.setItem(GOOGLE_USER_EMAIL_KEY, email);\n      }\n      console.log('💾 Google auth state saved to localStorage');\n    } catch (error) {\n      console.error('❌ Error saving auth state:', error);\n    }\n  }\n\n  /**\n   * Clear saved authentication state from localStorage\n   */\n  private clearSavedAuthState(): void {\n    try {\n      localStorage.removeItem(GOOGLE_TOKEN_KEY);\n      localStorage.removeItem(GOOGLE_USER_KEY);\n      localStorage.removeItem(GOOGLE_USER_EMAIL_KEY);\n      localStorage.removeItem(GOOGLE_SIGNED_IN_KEY);\n      console.log('🗑️ Google auth state cleared from localStorage');\n    } catch (error) {\n      console.error('❌ Error clearing auth state:', error);\n    }\n  }\n\n  /**\n   * Initialize Google APIs\n   */\n  async initialize(): Promise<void> {\n    if (isGoogleApiLoaded.value && this.tokenClient && this.gapi) {\n      console.log('Google APIs already initialized');\n      return;\n    }\n\n    try {\n      console.log('🚀 Initializing Google APIs...');\n      \n      // Clear any previous errors\n      authError.value = '';\n      \n      // Load Google API scripts\n      await this.loadGoogleScripts();\n      \n      // Initialize GAPI and GIS\n      await Promise.all([\n        this.initializeGapi(),\n        this.initializeGIS()\n      ]);\n      \n      // Verify initialization\n      if (!this.tokenClient || !this.gapi) {\n        throw new Error('Google APIs initialization incomplete');\n      }\n      \n      isGoogleApiLoaded.value = true;\n      console.log('✅ Google APIs initialized successfully');\n      \n      // Restore saved token to gapi if available\n      await this.restoreTokenToGapi();\n\n      // Start auto refresh if user is signed in\n      if (isGoogleSignedIn.value) {\n        this.startAutoRefresh();\n        this.attachLifecycleListeners();\n      }\n    } catch (error) {\n      console.error('❌ Failed to initialize Google APIs:', error);\n      authError.value = 'Failed to initialize Google APIs';\n      isGoogleApiLoaded.value = false;\n      throw error;\n    }\n  }\n\n  /**\n   * Restore saved token to gapi client\n   */\n  private async restoreTokenToGapi(): Promise<void> {\n    try {\n      const savedToken = localStorage.getItem(GOOGLE_TOKEN_KEY);\n      if (savedToken && this.gapi && isGoogleSignedIn.value) {\n        const tokenData = JSON.parse(savedToken);\n        \n        // Check if token is still valid\n        const tokenAge = Date.now() - (tokenData.timestamp || 0);\n        const isTokenExpired = tokenAge > (90 * 24 * 60 * 60 * 1000); // 90 days (3 months)\n        \n        if (!isTokenExpired) {\n          console.log('🔑 Restoring token to GAPI client...');\n          this.gapi.client.setToken({ access_token: tokenData.access_token });\n          console.log('✅ Token restored to GAPI client');\n          \n          // Verify token works by making a test API call\n          await this.verifyTokenValidity();\n        } else {\n          console.log('⏰ Token expired during restoration, attempting silent refresh...');\n          const refreshSuccess = await this.attemptSilentRefresh();\n          if (!refreshSuccess) {\n            // Keep login state; user may need to interact later, but do not clear saved state\n            console.log('⚠️ Silent refresh failed during restoration. Keeping saved login state.');\n            authError.value = 'Token expired; will require refresh on next action';\n          }\n        }\n      }\n    } catch (error) {\n      console.error('❌ Error restoring token to GAPI:', error);\n      authError.value = 'Failed to restore authentication';\n    }\n  }\n\n  /**\n   * Load Google API scripts dynamically\n   */\n  private async loadGoogleScripts(): Promise<void> {\n    const loadScript = (src: string): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const existingScript = document.querySelector(`script[src=\"${src}\"]`);\n        if (existingScript && (window as any).gapi && (window as any).google) {\n          resolve();\n          return;\n        }\n        \n        const script = document.createElement('script');\n        script.src = src;\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          console.log(`✅ Script loaded: ${src}`);\n          resolve();\n        };\n        script.onerror = () => {\n          console.error(`❌ Failed to load script: ${src}`);\n          reject(new Error(`Failed to load script: ${src}`));\n        };\n        document.head.appendChild(script);\n      });\n    };\n\n    try {\n      await Promise.all([\n        loadScript('https://apis.google.com/js/api.js'),\n        loadScript('https://accounts.google.com/gsi/client')\n      ]);\n      \n      // Wait a bit for scripts to be ready\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Verify global objects are available\n      if (!(window as any).gapi) {\n        throw new Error('Google API (gapi) not loaded');\n      }\n      if (!(window as any).google?.accounts) {\n        throw new Error('Google Identity Services not loaded');\n      }\n      \n      console.log('📚 Google scripts loaded and verified');\n    } catch (error) {\n      console.error('❌ Error loading Google scripts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize Google API client\n   */\n  private async initializeGapi(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      window.gapi.load('client', async () => {\n        try {\n          await window.gapi.client.init({\n            apiKey: GOOGLE_API_KEY,\n            discoveryDocs: [DISCOVERY_DOC],\n          });\n          \n          this.gapi = window.gapi;\n          console.log('✅ GAPI client initialized');\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  /**\n   * Initialize Google Identity Services\n   */\n  private async initializeGIS(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.tokenClient = window.google.accounts.oauth2.initTokenClient({\n          client_id: GOOGLE_CLIENT_ID,\n          scope: SCOPES,\n          callback: (response: any) => {\n            if (response.error) {\n              console.error('❌ Token client error:', response.error);\n              authError.value = response.error_description || 'Authentication failed';\n              isGoogleSignedIn.value = false;\n            } else {\n              console.log('✅ Token received successfully');\n              this.handleAuthSuccess(response);\n            }\n          },\n        });\n        \n        console.log('✅ Google Identity Services initialized');\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Sign in to Google account\n   */\n  async signIn(): Promise<boolean> {\n    try {\n      console.log('🔐 Initiating Google sign-in...');\n      \n      // Auto-initialize if not already done\n      if (!this.tokenClient || !isGoogleApiLoaded.value) {\n        console.log('📡 Auto-initializing Google APIs for sign-in...');\n        await this.initialize();\n      }\n\n      if (!this.tokenClient) {\n        throw new Error('Failed to initialize Google Identity Services');\n      }\n\n      // Clear any previous errors\n      authError.value = '';\n\n      // Request access token\n      this.tokenClient.requestAccessToken({ prompt: 'consent' });\n\n      // Return promise that resolves when auth completes\n      return new Promise((resolve) => {\n        const timeoutId = setTimeout(() => {\n          console.warn('⚠️ Google sign-in timeout');\n          authError.value = 'Sign-in timeout';\n          resolve(false);\n        }, 30000); // 30 second timeout\n\n        const checkAuth = () => {\n          if (isGoogleSignedIn.value) {\n            clearTimeout(timeoutId);\n            this.startAutoRefresh();\n            this.attachLifecycleListeners();\n            resolve(true);\n          } else if (authError.value) {\n            clearTimeout(timeoutId);\n            resolve(false);\n          } else {\n            setTimeout(checkAuth, 100);\n          }\n        };\n        checkAuth();\n      });\n\n    } catch (error) {\n      console.error('❌ Sign-in failed:', error);\n      authError.value = 'Sign-in failed';\n      return false;\n    }\n  }\n\n  /**\n   * Sign out from Google account\n   */\n  async signOut(): Promise<void> {\n    try {\n      if (this.gapi?.client?.getToken()) {\n        window.google.accounts.oauth2.revoke(this.gapi.client.getToken().access_token);\n      }\n      \n      // Clear local state\n      isGoogleSignedIn.value = false;\n      googleUser.value = null;\n      googleUserEmail.value = '';\n      authError.value = '';\n      this.stopAutoRefresh();\n      this.detachLifecycleListeners();\n      \n      // Clear saved authentication state from localStorage\n      this.clearSavedAuthState();\n      \n      console.log('✅ Signed out successfully and cleared saved state');\n    } catch (error) {\n      console.error('❌ Sign-out failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle successful authentication\n   */\n  private async handleAuthSuccess(response: any): Promise<void> {\n    googleUser.value = response;\n    isGoogleSignedIn.value = true;\n    this.gapi.client.setToken({ access_token: response.access_token });\n    \n    // Fetch user email from Google API\n    const userEmail = await this.fetchUserEmail();\n    console.log('🔍 Fetched user email:', userEmail);\n    if (userEmail) {\n      googleUserEmail.value = userEmail;\n      console.log('✅ Email set to reactive state:', googleUserEmail.value);\n    } else {\n      console.log('❌ No email received from API');\n    }\n    \n    // Save authentication state to localStorage for persistence\n    this.saveAuthState({ access_token: response.access_token }, response, userEmail || undefined);\n    \n    console.log('🔑 Authentication successful and persisted');\n    // Ensure auto refresh is running\n    this.startAutoRefresh();\n  }\n\n  /**\n   * Verify token validity with a test API call\n   */\n  private async verifyTokenValidity(): Promise<boolean> {\n    try {\n      if (!this.gapi?.client) return false;\n      \n      // Make a simple API call to verify token works\n      const response = await this.gapi.client.request({\n        path: 'https://www.googleapis.com/drive/v3/about?fields=user'\n      });\n      \n      if (response.status === 200) {\n        console.log('✅ Token verification successful');\n        return true;\n      } else {\n        console.log('❌ Token verification failed:', response.status);\n        return false;\n      }\n    } catch (error) {\n      console.log('❌ Token verification error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Attempt silent token refresh\n   */\n  private async attemptSilentRefresh(): Promise<boolean> {\n    try {\n      if (!this.tokenClient) {\n        console.log('❌ No token client available for refresh');\n        return false;\n      }\n      \n      console.log('🔄 Attempting silent token refresh...');\n      \n      // Use prompt: 'none' for true silent refresh (no user interaction at all)\n      return new Promise((resolve) => {\n        const originalCallback = this.tokenClient.callback;\n        let timeoutId: number | undefined;\n        \n        this.tokenClient.callback = (response: any) => {\n          // Restore original callback\n          this.tokenClient.callback = originalCallback;\n          if (timeoutId !== undefined) {\n            clearTimeout(timeoutId);\n          }\n          \n          if (response.error) {\n            console.log('❌ Silent refresh failed:', response.error);\n            // If error indicates user interaction required, don't retry\n            if (response.error === 'interaction_required' || response.error === 'login_required') {\n              console.log('⚠️ Silent refresh requires user interaction, skipping');\n            }\n            resolve(false);\n          } else {\n            console.log('✅ Silent refresh successful');\n            this.handleAuthSuccess(response);\n            resolve(true);\n          }\n        };\n        \n        try {\n          // Use prompt: 'none' for true silent refresh\n          this.tokenClient.requestAccessToken({ prompt: 'none' });\n          \n          // Set timeout for silent refresh\n          timeoutId = setTimeout(() => {\n            this.tokenClient.callback = originalCallback;\n            console.log('⏰ Silent refresh timeout');\n            resolve(false);\n          }, 5000); // Shorter 5 second timeout for silent operations\n        } catch (error) {\n          this.tokenClient.callback = originalCallback;\n          if (timeoutId !== undefined) {\n            clearTimeout(timeoutId);\n          }\n          console.log('❌ Silent refresh request failed:', error);\n          resolve(false);\n        }\n      });\n    } catch (error) {\n      console.error('❌ Silent refresh error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current access token with automatic refresh if needed\n   */\n  async getAccessToken(): Promise<string | null> {\n    try {\n      let currentToken = this.gapi?.client?.getToken()?.access_token;\n      \n      if (!currentToken) {\n        console.log('❌ No current token available, trying silent refresh...');\n        const refreshed = await this.attemptSilentRefresh();\n        if (!refreshed) {\n          return null;\n        }\n        currentToken = this.gapi?.client?.getToken()?.access_token;\n      }\n      \n      // Check if token is about to expire (refresh 3 months early)\n      const savedToken = localStorage.getItem(GOOGLE_TOKEN_KEY);\n      if (savedToken) {\n        const tokenData = JSON.parse(savedToken);\n        const tokenAge = Date.now() - (tokenData.timestamp || 0);\n        const isNearExpiry = tokenAge > (90 * 24 * 60 * 60 * 1000); // 90 days (3 months)\n        \n        if (isNearExpiry) {\n          console.log('🔄 Token near expiry, attempting refresh...');\n          const refreshSuccess = await this.attemptSilentRefresh();\n          if (refreshSuccess) {\n            return this.gapi?.client?.getToken()?.access_token || null;\n          } else {\n            console.log('⚠️ Token refresh failed, keeping saved login state');\n            return null;\n          }\n        }\n      }\n      \n      return currentToken;\n    } catch (error) {\n      console.error('❌ Error getting access token:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if user is signed in with token validation\n   */\n  async isSignedIn(): Promise<boolean> {\n    if (!isGoogleSignedIn.value) {\n      return false;\n    }\n    \n    // Verify we actually have a valid token\n    const token = await this.getAccessToken();\n    return token !== null || isGoogleSignedIn.value;\n  }\n\n  /**\n   * Synchronous check for signed in state (for compatibility)\n   */\n  isSignedInSync(): boolean {\n    return isGoogleSignedIn.value; // Persist login state regardless of token presence\n  }\n\n  /**\n   * Get current authentication error\n   */\n  getAuthError(): string {\n    return authError.value;\n  }\n\n  /**\n   * Auto refresh helpers\n   */\n  private startAutoRefresh() {\n    this.stopAutoRefresh();\n    // Refresh every 3 months\n    this.autoRefreshTimer = window.setInterval(async () => {\n      if (!isGoogleSignedIn.value) return;\n      \n      // Only refresh if token is actually near expiry\n      const needsRefresh = await this.shouldRefreshToken();\n      if (needsRefresh) {\n        console.log('⏱️ Auto-refresh timer triggered - token needs refresh');\n        await this.attemptSilentRefresh();\n      } else {\n        console.log('⏱️ Auto-refresh timer checked - token still valid');\n      }\n    }, 90 * 24 * 60 * 60 * 1000); // 90 days (3 months)\n    console.log('🕒 Auto-refresh timer started');\n  }\n\n  private stopAutoRefresh() {\n    if (this.autoRefreshTimer) {\n      clearInterval(this.autoRefreshTimer);\n      this.autoRefreshTimer = null;\n      console.log('🛑 Auto-refresh timer stopped');\n    }\n  }\n\n  private visibilityHandler = async () => {\n    if (document.visibilityState === 'visible' && isGoogleSignedIn.value) {\n      // Only refresh if token is actually near expiry\n      const needsRefresh = await this.shouldRefreshToken();\n      if (needsRefresh) {\n        console.log('👀 Page visible, token needs refresh');\n        await this.attemptSilentRefresh();\n      } else {\n        console.log('👀 Page visible, token still valid');\n      }\n    }\n  };\n\n  private onlineHandler = async () => {\n    if (navigator.onLine && isGoogleSignedIn.value) {\n      // Only refresh if token is actually near expiry\n      const needsRefresh = await this.shouldRefreshToken();\n      if (needsRefresh) {\n        console.log('🌐 Back online, token needs refresh');\n        await this.attemptSilentRefresh();\n      } else {\n        console.log('🌐 Back online, token still valid');\n      }\n    }\n  };\n\n  private attachLifecycleListeners() {\n    document.addEventListener('visibilitychange', this.visibilityHandler);\n    window.addEventListener('online', this.onlineHandler);\n    console.log('🔗 Lifecycle listeners attached');\n  }\n\n  private detachLifecycleListeners() {\n    document.removeEventListener('visibilitychange', this.visibilityHandler);\n    window.removeEventListener('online', this.onlineHandler);\n    console.log('🔌 Lifecycle listeners detached');\n  }\n\n  /**\n   * Fetch user email from Google API\n   */\n  private async fetchUserEmail(): Promise<string | null> {\n    try {\n      if (!this.gapi?.client) {\n        console.log('❌ No GAPI client available for fetching user email');\n        return null;\n      }\n      \n      // Make API call to get user info\n      const response = await this.gapi.client.request({\n        path: 'https://www.googleapis.com/oauth2/v2/userinfo'\n      });\n      \n      if (response.status === 200 && response.result?.email) {\n        console.log('✅ User email fetched successfully');\n        return response.result.email;\n      } else {\n        console.log('❌ Failed to fetch user email from API response');\n        return null;\n      }\n    } catch (error) {\n      console.error('❌ Error fetching user email:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get current user email\n   */\n  async getUserEmail(): Promise<string> {\n    return googleUserEmail.value;\n  }\n\n  /**\n   * Check if token actually needs refreshing\n   */\n  private async shouldRefreshToken(): Promise<boolean> {\n    try {\n      // Check if we have a current token\n      const currentToken = this.gapi?.client?.getToken()?.access_token;\n      if (!currentToken) {\n        console.log('🔍 No current token, refresh needed');\n        return true;\n      }\n\n      // Check token age from localStorage\n      const savedToken = localStorage.getItem(GOOGLE_TOKEN_KEY);\n      if (!savedToken) {\n        console.log('🔍 No saved token data, refresh needed');\n        return true;\n      }\n\n      const tokenData = JSON.parse(savedToken);\n      const tokenAge = Date.now() - (tokenData.timestamp || 0);\n      const isNearExpiry = tokenAge > (90 * 24 * 60 * 60 * 1000); // 90 days (3 months) - conservative\n      \n      if (isNearExpiry) {\n        console.log('🔍 Token is near expiry, refresh needed');\n        return true;\n      }\n\n      console.log('🔍 Token is still valid, no refresh needed');\n      return false;\n    } catch (error) {\n      console.error('❌ Error checking token refresh need:', error);\n      return false; // Don't refresh if we can't determine\n    }\n  }\n}\n\n// Export reactive states for use in components\nexport const useGoogleDriveAuth = () => {\n  const authService = GoogleDriveAuth.getInstance();\n\n  return {\n    // Reactive states\n    isGoogleApiLoaded: computed(() => isGoogleApiLoaded.value),\n    isGoogleSignedIn: computed(() => isGoogleSignedIn.value),\n    googleUser: computed(() => googleUser.value),\n    googleUserEmail: computed(() => googleUserEmail.value),\n    authError: computed(() => authError.value),\n\n    // Methods\n    initialize: () => authService.initialize(),\n    signIn: () => authService.signIn(), \n    signOut: () => authService.signOut(),\n    isSignedIn: () => authService.isSignedIn(),\n    isSignedInSync: () => authService.isSignedInSync(),\n    getAccessToken: () => authService.getAccessToken(),\n    getUserEmail: () => authService.getUserEmail(),\n  };\n};\n\n// Export singleton instance\nexport const googleDriveAuth = GoogleDriveAuth.getInstance();\n","import { googleDriveAuth } from './googleDriveAuth';\n\nexport interface DriveFile {\n  id: string;\n  name: string;\n  modifiedTime: string;\n  size: string;\n  mimeType: string;\n}\n\nexport interface UploadOptions {\n  fileName: string;\n  data: any;\n  folderId?: string;\n  description?: string;\n}\n\nexport interface DownloadResult {\n  success: boolean;\n  data?: any;\n  error?: string;\n  lastModified?: string;\n}\n\n/**\n * Google Drive API Service\n * Handles file operations on Google Drive\n */\nexport class GoogleDriveApi {\n  private static instance: GoogleDriveApi;\n  private readonly VOCABULARY_FOLDER_NAME = 'Vocabulary Backup';\n  private readonly BACKUP_FILE_NAME = 'vocabulary-auto-backup.json';\n  private vocabularyFolderId: string | null = null;\n\n  private constructor() {}\n\n  public static getInstance(): GoogleDriveApi {\n    if (!GoogleDriveApi.instance) {\n      GoogleDriveApi.instance = new GoogleDriveApi();\n    }\n    return GoogleDriveApi.instance;\n  }\n\n  /**\n   * Ensure user is authenticated before making API calls\n   */\n  private async ensureAuthenticated(): Promise<boolean> {\n    // Check if user is signed in with async validation\n    if (!(await googleDriveAuth.isSignedIn())) {\n      console.log('⚠️ User not signed in, attempting to sign in...');\n      return await googleDriveAuth.signIn();\n    }\n    return true;\n  }\n\n  /**\n   * Handle 401 errors by refreshing token and retrying\n   */\n  private async handleAuthError(operation: () => Promise<Response>): Promise<Response> {\n    try {\n      const response = await operation();\n      \n      if (response.status === 401) {\n        console.log('🔄 Received 401 error, attempting token refresh...');\n        \n        // Try to get a fresh token\n        const newToken = await googleDriveAuth.getAccessToken();\n        if (!newToken) {\n          throw new Error('Unable to refresh authentication token');\n        }\n        \n        // Retry the operation with fresh token\n        console.log('♻️ Retrying operation with refreshed token...');\n        const retryResponse = await operation();\n        \n        if (retryResponse.status === 401) {\n          throw new Error('Authentication failed even after token refresh');\n        }\n        \n        return retryResponse;\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('❌ Auth error handling failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Find or create the vocabulary backup folder\n   */\n  async findOrCreateVocabularyFolder(): Promise<string | null> {\n    try {\n      if (!await this.ensureAuthenticated()) {\n        throw new Error('Authentication failed');\n      }\n\n      console.log('📁 Finding or creating vocabulary backup folder...');\n\n      // Search for existing folder\n      const response = await window.gapi.client.drive.files.list({\n        q: `name='${this.VOCABULARY_FOLDER_NAME}' and mimeType='application/vnd.google-apps.folder' and trashed=false`,\n        spaces: 'drive',\n        fields: 'files(id, name)',\n      });\n\n      if (response.result.files && response.result.files.length > 0) {\n        this.vocabularyFolderId = response.result.files[0].id;\n        console.log('✅ Found existing vocabulary folder:', this.vocabularyFolderId);\n        return this.vocabularyFolderId;\n      }\n\n      // Create new folder if not found\n      const createResponse = await window.gapi.client.drive.files.create({\n        resource: {\n          name: this.VOCABULARY_FOLDER_NAME,\n          mimeType: 'application/vnd.google-apps.folder',\n          description: 'Automatically created folder for vocabulary backup files',\n        },\n        fields: 'id',\n      });\n\n      this.vocabularyFolderId = createResponse.result.id;\n      console.log('✅ Created new vocabulary folder:', this.vocabularyFolderId);\n      return this.vocabularyFolderId;\n\n    } catch (error) {\n      console.error('❌ Failed to find or create vocabulary folder:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Upload vocabulary data to Google Drive\n   */\n  async uploadVocabularyData(data: any): Promise<{ success: boolean; fileId?: string; error?: string }> {\n    let dataSizeKB = 0;\n    \n    try {\n      if (!await this.ensureAuthenticated()) {\n        throw new Error('Authentication failed');\n      }\n\n      console.log('📤 Starting vocabulary data upload to Google Drive...');\n\n      // Ensure vocabulary folder exists\n      const folderId = await this.findOrCreateVocabularyFolder();\n      if (!folderId) {\n        throw new Error('Failed to create vocabulary folder');\n      }\n\n      // Check if backup file already exists\n      const existingFile = await this.findVocabularyBackupFile();\n      \n      const jsonData = JSON.stringify(data, null, 2);\n      dataSizeKB = Math.round(jsonData.length / 1024);\n      console.log(`📊 Preparing upload: ${dataSizeKB}KB of vocabulary data`);\n      \n      const blob = new Blob([jsonData], { type: 'application/json' });\n\n      let response;\n\n      if (existingFile) {\n        // Update existing file\n        console.log('🔄 Updating existing backup file:', existingFile.id);\n        \n        const createUpdateRequest = async (): Promise<Response> => {\n          const accessToken = await googleDriveAuth.getAccessToken();\n          if (!accessToken) {\n            throw new Error('No access token available');\n          }\n          \n          console.log(`🔄 Starting update request for ${dataSizeKB}KB data...`);\n          \n          const form = new FormData();\n          form.append('metadata', new Blob([JSON.stringify({\n            name: this.BACKUP_FILE_NAME,\n            description: `Vocabulary backup - Updated: ${new Date().toISOString()}`,\n          })], { type: 'application/json' }));\n          form.append('file', blob);\n\n          const controller = new AbortController();\n          // Dynamic timeout: 1min base + 1min per MB, max 10min\n          const timeoutMs = Math.max(60000, Math.min(600000, 60000 + (dataSizeKB * 60))); // 1-10min range\n          const timeoutMinutes = Math.round(timeoutMs / 60000);\n          \n          console.log(`⏱️ Setting ${timeoutMinutes} minute timeout for ${dataSizeKB}KB file`);\n          const timeoutId = setTimeout(() => {\n            console.log(`⏰ Upload timeout after ${timeoutMinutes} minutes, aborting request...`);\n            controller.abort();\n          }, timeoutMs);\n\n          try {\n            const response = await fetch(`https://www.googleapis.com/upload/drive/v3/files/${existingFile.id}?uploadType=multipart&fields=id,name,modifiedTime,size`, {\n              method: 'PATCH',\n              headers: {\n                'Authorization': `Bearer ${accessToken}`,\n              },\n              body: form,\n              signal: controller.signal,\n            });\n            \n            clearTimeout(timeoutId);\n            console.log(`✅ Update request completed with status: ${response.status}`);\n            return response;\n          } catch (error) {\n            clearTimeout(timeoutId);\n            if ((error as Error).name === 'AbortError') {\n              throw new Error(`Upload timeout after ${timeoutMinutes} minutes for ${dataSizeKB}KB file`);\n            }\n            throw error;\n          }\n        };\n        \n        response = await this.handleAuthError(createUpdateRequest);\n\n      } else {\n        // Create new file\n        console.log('📄 Creating new backup file...');\n        \n        const createNewRequest = async (): Promise<Response> => {\n          const accessToken = await googleDriveAuth.getAccessToken();\n          if (!accessToken) {\n            throw new Error('No access token available');\n          }\n          \n          console.log(`📄 Starting new file creation for ${dataSizeKB}KB data...`);\n          \n          const form = new FormData();\n          form.append('metadata', new Blob([JSON.stringify({\n            name: this.BACKUP_FILE_NAME,\n            parents: [folderId],\n            description: `Vocabulary backup - Created: ${new Date().toISOString()}`,\n          })], { type: 'application/json' }));\n          form.append('file', blob);\n\n          const controller = new AbortController();\n          // Dynamic timeout: 1min base + 1min per MB, max 10min\n          const timeoutMs = Math.max(60000, Math.min(600000, 60000 + (dataSizeKB * 60))); // 1-10min range\n          const timeoutMinutes = Math.round(timeoutMs / 60000);\n          \n          console.log(`⏱️ Setting ${timeoutMinutes} minute timeout for ${dataSizeKB}KB file`);\n          const timeoutId = setTimeout(() => {\n            console.log(`⏰ Upload timeout after ${timeoutMinutes} minutes, aborting request...`);\n            controller.abort();\n          }, timeoutMs);\n\n          try {\n            const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id,name,modifiedTime,size', {\n              method: 'POST',\n              headers: {\n                'Authorization': `Bearer ${accessToken}`,\n              },\n              body: form,\n              signal: controller.signal,\n            });\n            \n            clearTimeout(timeoutId);\n            console.log(`✅ New file creation completed with status: ${response.status}`);\n            return response;\n          } catch (error) {\n            clearTimeout(timeoutId);\n            if ((error as Error).name === 'AbortError') {\n              throw new Error(`Upload timeout after ${timeoutMinutes} minutes for ${dataSizeKB}KB file`);\n            }\n            throw error;\n          }\n        };\n        \n        response = await this.handleAuthError(createNewRequest);\n      }\n\n      console.log(`🔍 Checking response status: ${response.status}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        console.error(`❌ HTTP error ${response.status} for ${dataSizeKB}KB upload:`, errorText);\n        \n        if (response.status === 401) {\n          throw new Error('Authentication failed - please sign in to Google Drive again');\n        } else if (response.status === 403) {\n          throw new Error('Permission denied - please check Google Drive permissions');\n        } else if (response.status === 413) {\n          throw new Error(`File too large (${dataSizeKB}KB) - Google Drive limit exceeded`);\n        } else if (response.status === 429) {\n          throw new Error('Rate limit exceeded - please try again later');\n        } else {\n          throw new Error(`Upload failed with status ${response.status}: ${errorText}`);\n        }\n      }\n\n      console.log('📥 Parsing response JSON...');\n      const result = await response.json();\n      console.log(`✅ Vocabulary data (${dataSizeKB}KB) uploaded successfully:`, {\n        fileId: result.id,\n        fileName: result.name,\n        size: result.size,\n        modifiedTime: result.modifiedTime\n      });\n\n      return {\n        success: true,\n        fileId: result.id,\n      };\n\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      const sizeInfo = typeof dataSizeKB !== 'undefined' ? `${dataSizeKB}KB` : 'unknown size';\n      console.error(`❌ Failed to upload vocabulary data (${sizeInfo}):`, {\n        error: errorMessage,\n        stack: (error as Error).stack\n      });\n      \n      return {\n        success: false,\n        error: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * Download vocabulary data from Google Drive\n   */\n  async downloadVocabularyData(): Promise<DownloadResult> {\n    try {\n      if (!await this.ensureAuthenticated()) {\n        throw new Error('Authentication failed');\n      }\n\n      console.log('⬇️ Starting vocabulary data download from Google Drive...');\n\n      // Find the backup file\n      const backupFile = await this.findVocabularyBackupFile();\n      if (!backupFile) {\n        return {\n          success: false,\n          error: 'No vocabulary backup file found on Google Drive',\n        };\n      }\n\n      console.log('📄 Found backup file:', backupFile.name, backupFile.id);\n\n      // Download file content\n      const response = await window.gapi.client.drive.files.get({\n        fileId: backupFile.id,\n        alt: 'media',\n      });\n\n      if (!response.body) {\n        throw new Error('Empty response body');\n      }\n\n      // Parse JSON data\n      const data = JSON.parse(response.body);\n      console.log('✅ Vocabulary data downloaded successfully');\n\n      return {\n        success: true,\n        data: data,\n        lastModified: backupFile.modifiedTime,\n      };\n\n    } catch (error) {\n      console.error('❌ Failed to download vocabulary data:', error);\n      return {\n        success: false,\n        error: (error as Error).message,\n      };\n    }\n  }\n\n  /**\n   * Find the vocabulary backup file in the vocabulary folder\n   */\n  private async findVocabularyBackupFile(): Promise<DriveFile | null> {\n    try {\n      const folderId = await this.findOrCreateVocabularyFolder();\n      if (!folderId) return null;\n\n      const response = await window.gapi.client.drive.files.list({\n        q: `name='${this.BACKUP_FILE_NAME}' and parents in '${folderId}' and trashed=false`,\n        spaces: 'drive',\n        fields: 'files(id, name, modifiedTime, size, mimeType)',\n      });\n\n      if (response.result.files && response.result.files.length > 0) {\n        return response.result.files[0] as DriveFile;\n      }\n\n      return null;\n\n    } catch (error) {\n      console.error('❌ Failed to find vocabulary backup file:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get vocabulary backup file info\n   */\n  async getVocabularyBackupInfo(): Promise<{ exists: boolean; file?: DriveFile; error?: string }> {\n    try {\n      if (!await this.ensureAuthenticated()) {\n        throw new Error('Authentication failed');\n      }\n\n      const backupFile = await this.findVocabularyBackupFile();\n      \n      return {\n        exists: !!backupFile,\n        file: backupFile || undefined,\n      };\n\n    } catch (error) {\n      return {\n        exists: false,\n        error: (error as Error).message,\n      };\n    }\n  }\n\n  /**\n   * Delete vocabulary backup file\n   */\n  async deleteVocabularyBackup(): Promise<{ success: boolean; error?: string }> {\n    try {\n      if (!await this.ensureAuthenticated()) {\n        throw new Error('Authentication failed');\n      }\n\n      const backupFile = await this.findVocabularyBackupFile();\n      if (!backupFile) {\n        return { success: true }; // File doesn't exist, consider it deleted\n      }\n\n      await window.gapi.client.drive.files.delete({\n        fileId: backupFile.id,\n      });\n\n      console.log('🗑️ Vocabulary backup file deleted successfully');\n      return { success: true };\n\n    } catch (error) {\n      console.error('❌ Failed to delete vocabulary backup:', error);\n      return {\n        success: false,\n        error: (error as Error).message,\n      };\n    }\n  }\n\n  /**\n   * Check if there are any conflicts between local and remote data\n   */\n  async checkForConflicts(localData: any): Promise<{ \n    hasConflicts: boolean; \n    localModified?: string; \n    remoteModified?: string; \n    remoteData?: any;\n    error?: string;\n  }> {\n    try {\n      const downloadResult = await this.downloadVocabularyData();\n      \n      if (!downloadResult.success) {\n        return { \n          hasConflicts: false,\n          error: downloadResult.error,\n        };\n      }\n\n      const localModified = localData.exportDate || new Date().toISOString();\n      const remoteModified = downloadResult.lastModified;\n\n      // Compare modification times\n      const hasConflicts = new Date(remoteModified!) > new Date(localModified);\n\n      return {\n        hasConflicts,\n        localModified,\n        remoteModified,\n        remoteData: downloadResult.data,\n      };\n\n    } catch (error) {\n      return {\n        hasConflicts: false,\n        error: (error as Error).message,\n      };\n    }\n  }\n}\n\n// Export composable for use in components\nexport const useGoogleDriveApi = () => {\n  const driveApi = GoogleDriveApi.getInstance();\n\n  return {\n    uploadVocabularyData: (data: any) => driveApi.uploadVocabularyData(data),\n    downloadVocabularyData: () => driveApi.downloadVocabularyData(),\n    getVocabularyBackupInfo: () => driveApi.getVocabularyBackupInfo(),\n    deleteVocabularyBackup: () => driveApi.deleteVocabularyBackup(),\n    checkForConflicts: (localData: any) => driveApi.checkForConflicts(localData),\n  };\n};\n\n// Export singleton instance\nexport const googleDriveApi = GoogleDriveApi.getInstance();\n","import { ref, computed, watch, onMounted, onUnmounted, defineAsyncComponent } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport { useToast, POSITION } from 'vue-toastification';\nimport { useVocabularyStore } from '../../../composables/useVocabularyStore';\nimport { getCustomTopics } from '../../../utils/topicUtils';\nimport { useGoogleDriveAuth } from '../../../services/googleDriveAuth';\nimport { useGoogleDriveApi } from '../../../services/googleDriveApi';\n\nconst ConfirmToast = defineAsyncComponent(() => import(\"../../../components/common/ConfirmToast.vue\"));\n\nexport function useVocabularySaving() {\n  const { t } = useI18n();\n  const vocabularyStore = useVocabularyStore();\n  const toast = useToast();\n  const googleAuth = useGoogleDriveAuth();\n  const googleDriveApi = useGoogleDriveApi();\n\n  const autoSaveEnabled = ref(true);\n  const isSaving = ref(false);\n  const lastSaveTime = ref('');\n  const saveStatus = ref<'idle' | 'saving' | 'success' | 'error'>('idle');\n  const autoSaveFileHandle = ref<any>(null);\n  const hasAutoSaveFile = ref<boolean>(false);\n  const hasGoogleDriveFile = ref<boolean>(false);\n  const storageType = ref<'local' | 'google-drive'>('local');\n  const autoSaveFileName = 'vocabulary-auto-backup.json';\n  let autoSaveTimer: number | null = null;\n  let debounceTimer: number | null = null;\n\n  // Add a new ref to store the file path for debugging\n  const autoSaveFilePath = ref<string>('');\n  \n  // IndexedDB setup for persisting file handles\n  const DB_NAME = 'vocabulary-file-handles';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'file-handles';\n  const FILE_HANDLE_KEY = 'auto-save-file-handle';\n  \n  // IndexedDB operations\n  const openDB = (): Promise<IDBDatabase> => {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          db.createObjectStore(STORE_NAME);\n        }\n      };\n    });\n  };\n  \n  const saveFileHandleToIDB = async (fileHandle: any): Promise<void> => {\n    try {\n      const db = await openDB();\n      const transaction = db.transaction([STORE_NAME], 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      await new Promise<void>((resolve, reject) => {\n        const request = store.put(fileHandle, FILE_HANDLE_KEY);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => resolve();\n      });\n      console.log('File handle saved to IndexedDB');\n    } catch (error) {\n      console.error('Error saving file handle to IndexedDB:', error);\n    }\n  };\n  \n  const loadFileHandleFromIDB = async (): Promise<any | null> => {\n    try {\n      const db = await openDB();\n      const transaction = db.transaction([STORE_NAME], 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      return new Promise<any | null>((resolve, reject) => {\n        const request = store.get(FILE_HANDLE_KEY);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => resolve(request.result || null);\n      });\n    } catch (error) {\n      console.error('Error loading file handle from IndexedDB:', error);\n      return null;\n    }\n  };\n  \n  const clearFileHandleFromIDB = async (): Promise<void> => {\n    try {\n      const db = await openDB();\n      const transaction = db.transaction([STORE_NAME], 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      await new Promise<void>((resolve, reject) => {\n        const request = store.delete(FILE_HANDLE_KEY);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => resolve();\n      });\n      console.log('File handle cleared from IndexedDB');\n    } catch (error) {\n      console.error('Error clearing file handle from IndexedDB:', error);\n    }\n  };\n\n  const getStoredValue = (key: string, defaultValue: any) => {\n    try {\n      const stored = localStorage.getItem(key);\n      return stored !== null ? JSON.parse(stored) : defaultValue;\n    } catch {\n      return defaultValue;\n    }\n  };\n\n  const setStoredValue = (key: string, value: any) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  autoSaveEnabled.value = getStoredValue('vocabulary-auto-save-enabled', true);\n  hasAutoSaveFile.value = getStoredValue('vocabulary-has-auto-save-file', false);\n  hasGoogleDriveFile.value = getStoredValue('vocabulary-has-google-drive-file', false);\n  storageType.value = getStoredValue('vocabulary-storage-type', 'local');\n  lastSaveTime.value = getStoredValue('vocabulary-last-save-time', '');\n  \n  // Restore file handle from IndexedDB on mount\n  const initializeAutoSave = async () => {\n    console.log('🔧 Initializing auto-save, hasAutoSaveFile:', hasAutoSaveFile.value);\n    \n    if (hasAutoSaveFile.value && 'showSaveFilePicker' in window) {\n      try {\n        console.log('🔍 Attempting to restore file handle from IndexedDB...');\n        const savedFileHandle = await loadFileHandleFromIDB();\n        \n        if (savedFileHandle) {\n          console.log('✅ Found saved file handle in IndexedDB');\n          // Verify the file handle is still valid\n          try {\n            const opts = { mode: 'readwrite' as const };\n            const permission = await savedFileHandle.queryPermission(opts);\n            console.log('🔐 File handle permission:', permission);\n            \n            if (permission === 'granted' || permission === 'prompt') {\n              autoSaveFileHandle.value = savedFileHandle;\n              console.log('✅ File handle restored to autoSaveFileHandle');\n              \n              // Try to get file info for display\n              try {\n                const fileProps = await savedFileHandle.getFile();\n                autoSaveFilePath.value = fileProps.name;\n                console.log('📁 File handle restored successfully:', fileProps.name);\n                \n                // If permission is prompt, request it silently\n                if (permission === 'prompt') {\n                  console.log('🔄 Requesting permission for file handle...');\n                  await savedFileHandle.requestPermission(opts);\n                }\n              } catch (e) {\n                console.log('⚠️ Could not get file properties, but handle seems valid:', e);\n              }\n            } else {\n              console.log('❌ File handle permission denied, clearing stored handle');\n              await clearFileHandleFromIDB();\n              hasAutoSaveFile.value = false;\n              setStoredValue('vocabulary-has-auto-save-file', false);\n            }\n          } catch (error) {\n            console.log('❌ Saved file handle is invalid, clearing:', error);\n            await clearFileHandleFromIDB();\n            hasAutoSaveFile.value = false;\n            setStoredValue('vocabulary-has-auto-save-file', false);\n          }\n        } else {\n          console.log('❌ No file handle found in IndexedDB');\n          hasAutoSaveFile.value = false;\n          setStoredValue('vocabulary-has-auto-save-file', false);\n        }\n      } catch (error) {\n        console.error('❌ Error initializing auto-save:', error);\n        hasAutoSaveFile.value = false;\n        setStoredValue('vocabulary-has-auto-save-file', false);\n      }\n    } else {\n      console.log('ℹ️ Auto-save not enabled or File System API not supported');\n    }\n  };\n\n  const saveToFileSystem = async (data: any) => {\n    try {\n      const fileHandle = await (window as any).showSaveFilePicker({\n        suggestedName: `vocabulary-backup-${new Date().toISOString().split('T')[0]}.json`,\n        types: [{\n          description: 'JSON files',\n          accept: { 'application/json': ['.json'] }\n        }]\n      });\n      const writable = await fileHandle.createWritable();\n      await writable.write(JSON.stringify(data, null, 2));\n      await writable.close();\n      autoSaveFileHandle.value = fileHandle;\n      hasAutoSaveFile.value = true;\n      setStoredValue('vocabulary-has-auto-save-file', true);\n      \n      // Save file handle to IndexedDB for persistence\n      await saveFileHandleToIDB(fileHandle);\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        await downloadJsonFile(data);\n      }\n    }\n  };\n\n  const downloadJsonFile = async (data: any) => {\n    const jsonString = JSON.stringify(data, null, 2);\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `vocabulary-backup-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const getVocabularyData = () => {\n    const getGroupTopics = (): Record<string, string> => {\n        try {\n            const stored = localStorage.getItem('vocabulary-group-topics');\n            return stored ? JSON.parse(stored) : {};\n        } catch (error) {\n            return {};\n        }\n    };\n    \n    // Get vocabulary notes\n    const getVocabularyNotes = (): Record<string, string> => {\n        try {\n            const stored = localStorage.getItem('vocabulary-notes');\n            return stored ? JSON.parse(stored) : {};\n        } catch (error) {\n            return {};\n        }\n    };\n    \n    // Get marked vocabulary words\n    const getMarkedWords = (): Record<string, string[]> => {\n        try {\n            const stored = localStorage.getItem('vocabulary-marked-words');\n            return stored ? JSON.parse(stored) : {};\n        } catch (error) {\n            return {};\n        }\n    };\n    \n    // Helper function to get grammar rules\n    const getGrammarRules = (): any[] => {\n        try {\n            const stored = localStorage.getItem('grammar-rules');\n            return stored ? JSON.parse(stored) : [];\n        } catch (error) {\n            return [];\n        }\n    };\n    \n    // Helper function to get practice history\n    const getPracticeHistory = (): any[] => {\n        try {\n            const stored = localStorage.getItem('flashcard-practice-history');\n            return stored ? JSON.parse(stored) : [];\n        } catch (error) {\n            return [];\n        }\n    };\n    \n    // Helper function to get category name without Vue composables\n    const getCategoryName = (categoryKey: string): string => {\n      // Check custom topics first\n      const customTopics = getCustomTopics()\n      const customTopic = customTopics.find(topic => topic.key === categoryKey)\n      \n      if (customTopic) {\n        // Default to English name for export\n        return customTopic.en\n      }\n      \n      // Built-in categories mapping\n      const builtInCategories: { [key: string]: string } = {\n        'technology': 'Technology',\n        'business': 'Business',\n        'travel': 'Travel',\n        'food': 'Food',\n        'health': 'Health',\n        'education': 'Education',\n        'sports': 'Sports',\n        'entertainment': 'Entertainment',\n        'science': 'Science',\n        'art': 'Art',\n        'music': 'Music',\n        'literature': 'Literature',\n        'politics': 'Politics',\n        'environment': 'Environment',\n        'fashion': 'Fashion',\n        'finance': 'Finance'\n      }\n      \n      return builtInCategories[categoryKey] || categoryKey.charAt(0).toUpperCase() + categoryKey.slice(1)\n    }\n    \n    // Enhance vocabularies with category names\n    const enhancedVocabularies = vocabularyStore.allVocabularies.value.map(vocab => ({\n        ...vocab,\n        categoryName: getCategoryName(vocab.category) // Add category name alongside category key\n    }));\n    \n    return {\n        vocabularies: enhancedVocabularies,\n        customTopics: vocabularyStore.customTopics.value,\n        groupTopics: getGroupTopics(),\n        vocabularyNotes: getVocabularyNotes(),\n        markedWords: getMarkedWords(),\n        grammarRules: getGrammarRules(), // Include grammar rules in export\n        practiceHistory: getPracticeHistory(), // Include practice history in export\n        accordionState: JSON.parse(localStorage.getItem('vocabulary-accordion-state') || '{}'),\n        useGrouping: JSON.parse(localStorage.getItem('vocabulary-use-grouping') || 'false'), // Save grouping state\n        exportDate: new Date().toISOString(),\n        version: '1.6', // Increment version to indicate practice history support\n        totalCount: vocabularyStore.totalCount.value\n    };\n  };\n\n  const manualSave = async () => {\n    if (isSaving.value) return;\n    isSaving.value = true;\n    saveStatus.value = 'saving';\n    try {\n      const vocabularyData = getVocabularyData();\n      if ('showSaveFilePicker' in window) {\n        await saveToFileSystem(vocabularyData);\n      } else {\n        await downloadJsonFile(vocabularyData);\n      }\n      vocabularyStore.saveToLocalStorage();\n      const now = new Date().toLocaleString('vi-VN');\n      lastSaveTime.value = now;\n      setStoredValue('vocabulary-last-save-time', now);\n      saveStatus.value = 'success';\n      setTimeout(() => { if (saveStatus.value === 'success') saveStatus.value = 'idle'; }, 2000);\n    } catch (error) {\n      saveStatus.value = 'error';\n      setTimeout(() => { if (saveStatus.value === 'error') saveStatus.value = 'idle'; }, 3000);\n    } finally {\n      isSaving.value = false;\n    }\n  };\n\n  const performAutoSave = async () => {\n    if (!autoSaveEnabled.value) return;\n    try {\n      saveStatus.value = 'saving';\n      const vocabularyData = getVocabularyData();\n      \n      // First, save to localStorage\n      vocabularyStore.saveToLocalStorage();\n      \n      // Then, try to save based on storage type\n      let saveSuccess = false;\n      if (storageType.value === 'google-drive') {\n        saveSuccess = await tryAutoSaveToGoogleDrive(vocabularyData);\n      } else if (storageType.value === 'local' && hasAutoSaveFile.value) {\n        saveSuccess = await tryAutoSaveToFile(vocabularyData);\n      } else {\n        // For localStorage only, consider it successful\n        saveSuccess = true;\n      }\n      \n      // Update timestamps and status based on actual save result\n      const now = new Date().toLocaleString('vi-VN');\n      lastSaveTime.value = now;\n      setStoredValue('vocabulary-last-save-time', now);\n      \n      if (saveSuccess) {\n        saveStatus.value = 'success';\n        console.log('✅ Auto-save completed successfully');\n        setTimeout(() => { \n          if (saveStatus.value === 'success') {\n            saveStatus.value = 'idle';\n          }\n        }, 1000);\n      } else {\n        saveStatus.value = 'error';\n        console.error('❌ Auto-save failed');\n        setTimeout(() => { \n          if (saveStatus.value === 'error') {\n            saveStatus.value = 'idle';\n          }\n        }, 2000);\n      }\n      \n      return saveSuccess;\n    } catch (error) {\n      console.error(\"Auto-save error:\", error);\n      saveStatus.value = 'error';\n      setTimeout(() => { \n        if (saveStatus.value === 'error') {\n          saveStatus.value = 'idle';\n        }\n      }, 2000);\n      return false;\n    }\n  };\n\n  const tryAutoSaveToFile = async (data: any) => {\n    if (!('showSaveFilePicker' in window)) {\n      console.log(\"Browser doesn't support File System Access API\");\n      return false;\n    }\n    \n    if (!autoSaveFileHandle.value) {\n      console.log(\"No auto-save file handle available\");\n      return false;\n    }\n    \n    try {\n      console.log(\"Attempting to auto-save to file...\", autoSaveFilePath.value);\n      \n      // Verify the file handle is valid by checking permissions\n      const opts = { mode: 'readwrite' as const };\n      const permission = await autoSaveFileHandle.value.queryPermission(opts);\n      \n      if (permission !== 'granted') {\n        console.log(\"Requesting permission to write to file...\");\n        const newPermission = await autoSaveFileHandle.value.requestPermission(opts);\n        if (newPermission !== 'granted') {\n          console.error(\"Permission to write to file denied\");\n          toast.error(t('vocabulary.save.errors.permissionDenied', 'Permission denied'));\n          return false;\n        }\n      }\n      \n      // Create a writable stream\n      console.log(\"Creating writable stream...\");\n      const writable = await autoSaveFileHandle.value.createWritable();\n      \n      // Convert data to JSON string\n      const jsonString = JSON.stringify(data, null, 2);\n      console.log(`Writing ${jsonString.length} characters to file...`);\n      \n      // Write the data\n      await writable.write(jsonString);\n      \n      // Close the stream\n      console.log(\"Closing writable stream...\");\n      await writable.close();\n      \n      console.log(\"Auto-save to file completed successfully:\", autoSaveFilePath.value);\n      \n      // Update last save time after successful file save\n      const now = new Date().toLocaleString('vi-VN');\n      lastSaveTime.value = now;\n      setStoredValue('vocabulary-last-save-time', now);\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error auto-saving to file:\", error);\n      \n      // Check if it's a permission error\n      if (error instanceof DOMException && error.name === 'NotAllowedError') {\n        toast.error(t('vocabulary.save.errors.permissionDenied', 'Permission denied'));\n      } else {\n        toast.error(t('vocabulary.save.errors.autoSaveFileFailed', 'Auto save file failed'));\n      }\n      \n      // Reset file handle only if it's not a permission error\n      if (!(error instanceof DOMException && error.name === 'NotAllowedError')) {\n        autoSaveFileHandle.value = null;\n        hasAutoSaveFile.value = false;\n        setStoredValue('vocabulary-has-auto-save-file', false);\n        // Clear from IndexedDB as well\n        await clearFileHandleFromIDB();\n      }\n      \n      return false;\n    }\n  };\n\n  const debounceAutoSave = () => {\n    if (!autoSaveEnabled.value) {\n      console.log(\"Auto-save is disabled, skipping debounce\");\n      return;\n    }\n    \n    console.log(\"Setting up debounce auto-save timer...\");\n    \n    // Clear any existing debounce timer\n    if (debounceTimer) {\n      console.log(\"Clearing existing debounce timer\");\n      clearTimeout(debounceTimer);\n      debounceTimer = null;\n    }\n    \n    // Set a new debounce timer\n    console.log(\"Creating new debounce timer\");\n    debounceTimer = setTimeout(async () => {\n      console.log(\"Debounce timer triggered, performing auto-save...\");\n      \n      // For localStorage only save\n      if (storageType.value === 'local' && !hasAutoSaveFile.value) {\n        console.log(\"No auto-save file selected, saving to localStorage only\");\n        vocabularyStore.saveToLocalStorage();\n        return;\n      }\n      \n      // For Google Drive, check authentication (async check for token validity)\n      if (storageType.value === 'google-drive') {\n        const isSignedIn = await googleAuth.isSignedIn();\n        if (!isSignedIn) {\n          console.log(\"Google Drive selected but not signed in or token invalid, saving to localStorage only\");\n          vocabularyStore.saveToLocalStorage();\n          return;\n        }\n      }\n      \n      const result = await performAutoSave();\n      console.log(\"Auto-save result:\", result ? \"Success\" : \"Failed\");\n      \n      if (!result) {\n        // If auto-save failed, show appropriate retry message\n        const retryMessage = storageType.value === 'google-drive' \n          ? t('vocabulary.save.googleDriveRetry', 'Google Drive save failed. Check connection.') || 'Google Drive save failed. Check connection.'\n          : t('vocabulary.save.autoSaveRetry', 'Auto save failed. Click to select a new file.') || 'Auto save failed. Click to select a new file.';\n        \n        toast.info(retryMessage, {\n          timeout: 5000,\n          onClick: () => {\n            if (storageType.value === 'local') {\n              setupAutoSaveFile();\n            }\n          }\n        });\n      }\n    }, 500) as unknown as number;\n  };\n\n  const scheduleAutoSave = () => {\n    if (autoSaveTimer) clearTimeout(autoSaveTimer);\n    autoSaveTimer = window.setTimeout(() => {\n      if (autoSaveEnabled.value) {\n        performAutoSave();\n        scheduleAutoSave();\n      }\n    }, 10000);\n  };\n\n  const setupAutoSaveFile = async () => {\n    if ('showSaveFilePicker' in window) {\n      try {\n        console.log(\"Setting up auto-save file...\");\n        const fileHandle = await (window as any).showSaveFilePicker({\n          suggestedName: autoSaveFileName,\n          types: [{ description: 'JSON files', accept: { 'application/json': ['.json'] } }]\n        });\n        \n        // Store the file handle\n        autoSaveFileHandle.value = fileHandle;\n        \n        // Save file handle to IndexedDB for persistence\n        await saveFileHandleToIDB(fileHandle);\n        \n        // Try to get the file name/path for debugging\n        try {\n          const fileProps = await fileHandle.getFile();\n          autoSaveFilePath.value = fileProps.name;\n          console.log(\"Selected auto-save file:\", fileProps.name);\n        } catch (e) {\n          console.log(\"Could not get file properties:\", e);\n        }\n        \n        hasAutoSaveFile.value = true;\n        setStoredValue('vocabulary-has-auto-save-file', true);\n        \n        // Perform an immediate auto-save to verify the file handle works\n        const vocabularyData = getVocabularyData();\n        \n        console.log(\"Testing auto-save with file handle:\", autoSaveFileHandle.value);\n        const saveResult = await tryAutoSaveToFile(vocabularyData);\n        \n        if (saveResult) {\n          toast.success(t('vocabulary.save.autoSaveFileSetup', 'Auto save file setup'));\n          console.log(\"Auto-save file setup successful!\");\n        } else {\n          toast.error(t('vocabulary.save.errors.autoSaveFileFailed', 'Auto save file failed'));\n          console.error(\"Auto-save file setup failed!\");\n        }\n      } catch (error) {\n        if ((error as Error).name !== 'AbortError') {\n          console.error(\"Error setting up auto-save file:\", error);\n          toast.error(t('vocabulary.save.errors.fileSelectError', { error: (error as Error).message }) || `File selection error: ${(error as Error).message}`);\n        }\n      }\n    } else {\n      toast.error(t('vocabulary.save.errors.browserNotSupported', 'Browser not supported'));\n    }\n  };\n\n  const handleFileImport = (file: File) => {\n    if (!file || !file.name.endsWith('.json')) {\n      toast.error(t('vocabulary.save.errors.invalidFile', 'Invalid file'));\n      return;\n    }\n\n    const toastId = toast(\n      {\n        component: ConfirmToast,\n        props: {\n          message: t('vocabulary.save.import.confirmMessage', { filename: file.name }, `Import ${file.name}? This will replace all current vocabulary.`),\n          confirmText: t('common.confirm', 'Confirm'),\n          cancelText: t('common.cancel', 'Cancel'),\n          onConfirm: () => {\n            // Read the file after confirmation\n            const reader = new FileReader();\n            reader.onload = (e) => {\n              isSaving.value = true;\n              try {\n                const text = e.target?.result as string;\n                const data = JSON.parse(text);\n                if (!data.vocabularies || !Array.isArray(data.vocabularies)) {\n                  toast.error(t('vocabulary.save.errors.invalidFile', 'Invalid file'));\n                  isSaving.value = false;\n                  return;\n                }\n                vocabularyStore.importVocabularies(data.vocabularies);\n                            // Import custom topics if they exist\n               if (data.customTopics && Array.isArray(data.customTopics)) {\n                 // Clear existing custom topics and replace with imported ones\n                 localStorage.setItem('customTopics', JSON.stringify(data.customTopics));\n                 // Refresh the vocabulary store's custom topics\n                 vocabularyStore.refreshCustomTopics();\n                 console.log(\"Imported custom topics:\", data.customTopics);\n               }\n               \n               // Also handle legacy 'topics' format for backward compatibility\n               if (data.topics && Array.isArray(data.topics)) {\n                 // Clear existing custom topics and replace with imported ones (legacy format)\n                 localStorage.setItem('customTopics', JSON.stringify(data.topics));\n                 // Refresh the vocabulary store's custom topics\n                 vocabularyStore.refreshCustomTopics();\n                 console.log(\"Imported legacy topics:\", data.topics);\n               }\n              \n              // Import group topics (date group topics)\n              if (data.groupTopics && typeof data.groupTopics === 'object') {\n                localStorage.setItem('vocabulary-group-topics', JSON.stringify(data.groupTopics));\n                console.log(\"Imported group topics:\", data.groupTopics);\n              }\n              \n              // Import accordion state\n              if (data.accordionState && typeof data.accordionState === 'object') {\n                localStorage.setItem('vocabulary-accordion-state', JSON.stringify(data.accordionState));\n                console.log(\"Imported accordion state:\", data.accordionState);\n              }\n              \n              // Import grouping state\n              if (typeof data.useGrouping === 'boolean') {\n                localStorage.setItem('vocabulary-use-grouping', JSON.stringify(data.useGrouping));\n                console.log(\"Imported grouping state:\", data.useGrouping);\n              }\n              \n              // Import vocabulary notes\n              if (data.vocabularyNotes && typeof data.vocabularyNotes === 'object') {\n                localStorage.setItem('vocabulary-notes', JSON.stringify(data.vocabularyNotes));\n                console.log(\"Imported vocabulary notes:\", data.vocabularyNotes);\n              }\n              \n              // Import marked vocabulary words\n              if (data.markedWords && typeof data.markedWords === 'object') {\n                localStorage.setItem('vocabulary-marked-words', JSON.stringify(data.markedWords));\n                console.log(\"Imported marked words:\", data.markedWords);\n              }\n              \n              // Import grammar rules\n              if (data.grammarRules && Array.isArray(data.grammarRules)) {\n                localStorage.setItem('grammar-rules', JSON.stringify(data.grammarRules));\n                console.log(\"Imported grammar rules:\", data.grammarRules);\n              }\n              \n              // Import practice history\n              if (data.practiceHistory && Array.isArray(data.practiceHistory)) {\n                localStorage.setItem('flashcard-practice-history', JSON.stringify(data.practiceHistory));\n                console.log(\"Imported practice history:\", data.practiceHistory);\n              }\n              \n              isSaving.value = false;\n              \n              // Show detailed import success message\n              let importMessage = t('vocabulary.save.import.successMessage', { count: data.vocabularies.length }, `Successfully imported ${data.vocabularies.length} vocabulary words`);\n              if (data.customTopics?.length > 0) {\n                importMessage += ` + ${data.customTopics.length} custom categories`;\n              }\n              if (data.groupTopics && Object.keys(data.groupTopics).length > 0) {\n                importMessage += ` + ${Object.keys(data.groupTopics).length} group topics`;\n              }\n              if (typeof data.useGrouping === 'boolean') {\n                importMessage += ` + grouping preference`;\n              }\n              if (data.vocabularyNotes && Object.keys(data.vocabularyNotes).length > 0) {\n                importMessage += ` + ${Object.keys(data.vocabularyNotes).length} vocabulary notes`;\n              }\n              if (data.markedWords && Object.keys(data.markedWords).length > 0) {\n                let totalMarkedWords = 0;\n                Object.values(data.markedWords).forEach(words => {\n                  if (Array.isArray(words)) {\n                    totalMarkedWords += words.length;\n                  }\n                });\n                importMessage += ` + ${totalMarkedWords} marked words`;\n              }\n              if (data.grammarRules && data.grammarRules.length > 0) {\n                importMessage += ` + ${data.grammarRules.length} grammar rules`;\n              }\n              if (data.practiceHistory && data.practiceHistory.length > 0) {\n                importMessage += ` + ${data.practiceHistory.length} practice sessions`;\n              }\n              \n              toast.success(importMessage);\n              \n              // Emit custom event to signal import completion\n              window.dispatchEvent(new CustomEvent('vocabularyImportComplete', {\n                detail: { useGrouping: data.useGrouping }\n              }));\n              \n              if (autoSaveEnabled.value) {\n                debounceAutoSave();\n              }\n              } catch (error) {\n                isSaving.value = false;\n                console.error(t('vocabulary.save.errors.invalidFile'), error);\n                toast.error(t('vocabulary.save.errors.invalidFile', 'Invalid file'));\n              }\n            };\n            reader.onerror = () => {\n              isSaving.value = false;\n              console.error('Error reading file');\n              toast.error(t('vocabulary.save.errors.fileReadError', { error: reader.error?.message || 'Unknown error' }) || `Error reading file: ${reader.error?.message || 'Unknown error'}`);\n            };\n            reader.readAsText(file);\n            toast.dismiss(toastId);\n          },\n          onCancel: () => {\n            isSaving.value = false;\n            toast.dismiss(toastId);\n          },\n        },\n      },\n      {\n        position: POSITION.TOP_CENTER,\n        timeout: false,\n        closeButton: false,\n        draggable: false,\n        icon: false,\n      }\n    );\n  };\n\n  // Google Drive auto-save functions\n  const tryAutoSaveToGoogleDrive = async (data: any): Promise<boolean> => {\n    try {\n      // Check if signed in (this now includes token validation)\n      const isSignedIn = await googleAuth.isSignedIn();\n      if (!isSignedIn) {\n        console.log('❌ Not signed in to Google Drive or token invalid');\n        // Don't show error toast for auto-save, just log and fail gracefully\n        return false;\n      }\n\n      console.log('⬆️ Attempting to auto-save to Google Drive...');\n      \n      // Retry logic for Google Drive operations\n      let lastError: any = null;\n      const maxAttempts = 2; // Reduce retries for large files to avoid excessive wait times\n      \n      for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n        try {\n          console.log(`📤 Google Drive upload attempt ${attempt}/${maxAttempts}...`);\n          const result = await googleDriveApi.uploadVocabularyData(data);\n          \n          if (result.success) {\n            console.log(`✅ Auto-save to Google Drive completed successfully (attempt ${attempt})`);\n            hasGoogleDriveFile.value = true;\n            setStoredValue('vocabulary-has-google-drive-file', true);\n            return true;\n          } else {\n            lastError = result.error;\n            console.error(`❌ Google Drive save failed (attempt ${attempt}):`, result.error);\n            \n            // Don't retry on timeout errors - they indicate file is too large or connection too slow\n            if (result.error?.includes('timeout')) {\n              console.log('⏰ Upload timeout detected, stopping retries to avoid excessive wait');\n              break;\n            }\n            \n            // If it's an auth error, try to refresh token and retry\n            if (result.error?.includes('401') || result.error?.includes('unauthorized')) {\n              console.log('🔄 Auth error detected, refreshing token...');\n              const token = await googleAuth.getAccessToken(); // This will auto-refresh if needed\n              if (!token) {\n                console.log('❌ Token refresh failed, stopping retries');\n                break;\n              }\n            }\n            \n            // Wait before retry (shorter backoff for large files)\n            if (attempt < maxAttempts) {\n              console.log(`⏳ Waiting ${attempt * 2}s before retry...`);\n              await new Promise(resolve => setTimeout(resolve, 2000 * attempt));\n            }\n          }\n        } catch (apiError) {\n          lastError = apiError;\n          const errorMsg = (apiError as Error)?.message || String(apiError);\n          console.error(`❌ Google Drive API error (attempt ${attempt}):`, errorMsg);\n          \n          // Don't retry on timeout errors\n          if (errorMsg.includes('timeout')) {\n            console.log('⏰ API timeout detected, stopping retries');\n            break;\n          }\n          \n          // For other errors, retry with backoff\n          if (attempt < maxAttempts) {\n            console.log(`⏳ Waiting ${attempt * 2}s before retry...`);\n            await new Promise(resolve => setTimeout(resolve, 2000 * attempt));\n          }\n        }\n      }\n      \n      // All retries failed\n      const errorMsg = lastError?.message || String(lastError);\n      console.error('❌ All Google Drive auto-save attempts failed:', errorMsg);\n      \n      // Log specific timeout issues for debugging\n      if (errorMsg?.includes('timeout')) {\n        const dataSize = Math.round(JSON.stringify(data).length / 1024);\n        console.warn(`⚠️ Auto-save failed due to timeout for ${dataSize}KB file. Consider reducing vocabulary size or checking internet connection.`);\n      }\n      \n      // Auto-save failures are silent to avoid annoying the user\n      return false;\n      \n    } catch (error) {\n      console.error('❌ Error saving to Google Drive:', error);\n      return false;\n    }\n  };\n\n  const setupGoogleDrive = async (): Promise<boolean> => {\n    try {\n      console.log('Setting up Google Drive auto-save...');\n      \n      // Check if already signed in with valid token\n      const isSignedIn = await googleAuth.isSignedIn();\n      if (!isSignedIn) {\n        const signInResult = await googleAuth.signIn();\n        if (!signInResult) {\n          toast.error(t('vocabulary.save.errors.googleSignInFailed', 'Google sign-in failed') || 'Google sign-in failed');\n          return false;\n        }\n      }\n\n      // Test upload with current data to verify everything works\n      const vocabularyData = getVocabularyData();\n      \n      // Use the same retry logic as auto-save\n      let lastError: any = null;\n      for (let attempt = 1; attempt <= 2; attempt++) {\n        try {\n          const result = await googleDriveApi.uploadVocabularyData(vocabularyData);\n          \n          if (result.success) {\n            hasGoogleDriveFile.value = true;\n            setStoredValue('vocabulary-has-google-drive-file', true);\n            toast.success(t('vocabulary.save.googleDriveSetup', 'Google Drive setup successful') || 'Google Drive setup successful');\n            return true;\n          } else {\n            lastError = result.error;\n            console.error(`❌ Google Drive setup test failed (attempt ${attempt}):`, result.error);\n            \n            if (attempt < 2) {\n              await new Promise(resolve => setTimeout(resolve, 1000));\n            }\n          }\n        } catch (apiError) {\n          lastError = apiError;\n          console.error(`❌ Google Drive setup API error (attempt ${attempt}):`, apiError);\n          \n          if (attempt < 2) {\n            await new Promise(resolve => setTimeout(resolve, 1000));\n          }\n        }\n      }\n      \n      // Setup failed after retries\n      toast.error(t('vocabulary.save.errors.googleDriveSetupFailed', 'Google Drive setup failed') || `Google Drive setup failed: ${lastError}`);\n      return false;\n      \n    } catch (error) {\n      console.error('Error setting up Google Drive:', error);\n      toast.error(t('vocabulary.save.errors.googleDriveSetupFailed', 'Google Drive setup failed') || 'Google Drive setup failed');\n      return false;\n    }\n  };\n\n  const syncFromGoogleDrive = async (): Promise<boolean> => {\n    try {\n      // Check if signed in with valid token\n      const isSignedIn = await googleAuth.isSignedIn();\n      if (!isSignedIn) {\n        toast.error(t('vocabulary.save.errors.notSignedIn', 'Not signed in to Google') || 'Not signed in to Google');\n        return false;\n      }\n\n      console.log('Syncing from Google Drive...');\n      \n      // Retry logic for download operation\n      let lastError: any = null;\n      for (let attempt = 1; attempt <= 2; attempt++) {\n        try {\n          const result = await googleDriveApi.downloadVocabularyData();\n          \n          if (result.success && result.data) {\n            // Import the data\n            if (result.data.vocabularies && Array.isArray(result.data.vocabularies)) {\n              vocabularyStore.importVocabularies(result.data.vocabularies);\n              \n              // Import other data similar to handleFileImport\n              if (result.data.customTopics && Array.isArray(result.data.customTopics)) {\n                localStorage.setItem('customTopics', JSON.stringify(result.data.customTopics));\n                vocabularyStore.refreshCustomTopics();\n              }\n              \n              if (result.data.groupTopics && typeof result.data.groupTopics === 'object') {\n                localStorage.setItem('vocabulary-group-topics', JSON.stringify(result.data.groupTopics));\n              }\n              \n              if (result.data.grammarRules && Array.isArray(result.data.grammarRules)) {\n                localStorage.setItem('grammar-rules', JSON.stringify(result.data.grammarRules));\n              }\n              \n              if (result.data.practiceHistory && Array.isArray(result.data.practiceHistory)) {\n                localStorage.setItem('flashcard-practice-history', JSON.stringify(result.data.practiceHistory));\n              }\n              \n              toast.success(t('vocabulary.save.syncFromDriveSuccess', 'Successfully synced from Google Drive') || 'Successfully synced from Google Drive');\n              return true;\n            }\n          } else {\n            lastError = result.error;\n            console.error(`❌ Google Drive sync failed (attempt ${attempt}):`, result.error);\n            \n            if (attempt < 2) {\n              await new Promise(resolve => setTimeout(resolve, 1000));\n            }\n          }\n        } catch (apiError) {\n          lastError = apiError;\n          console.error(`❌ Google Drive sync API error (attempt ${attempt}):`, apiError);\n          \n          if (attempt < 2) {\n            await new Promise(resolve => setTimeout(resolve, 1000));\n          }\n        }\n      }\n      \n      // All sync attempts failed\n      toast.error(lastError || t('vocabulary.save.errors.syncFailed', 'Sync failed') || 'Sync failed');\n      return false;\n      \n    } catch (error) {\n      console.error('Error syncing from Google Drive:', error);\n      toast.error(t('vocabulary.save.errors.syncFailed', 'Sync failed') || 'Sync failed');\n      return false;\n    }\n  };\n\n  const handleGoogleSignIn = async (): Promise<boolean> => {\n    try {\n      console.log('Initiating Google sign-in...');\n      \n      // First ensure Google APIs are initialized\n      await googleAuth.initialize();\n      \n      const result = await googleAuth.signIn();\n      \n      if (result) {\n        toast.success(t('vocabulary.save.googleSignInSuccess', 'Successfully signed in to Google') || 'Successfully signed in to Google');\n        \n        // Check if backup exists with retry logic\n        try {\n          const backupInfo = await googleDriveApi.getVocabularyBackupInfo();\n          if (backupInfo.exists) {\n            hasGoogleDriveFile.value = true;\n            setStoredValue('vocabulary-has-google-drive-file', true);\n          }\n        } catch (backupError) {\n          console.warn('⚠️ Could not check backup status after sign-in:', backupError);\n          // Don't fail the sign-in process just because backup check failed\n        }\n      } else {\n        toast.error(t('vocabulary.save.errors.googleSignInFailed', 'Google sign-in failed') || 'Google sign-in failed');\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Google sign-in error:', error);\n      toast.error(t('vocabulary.save.errors.googleSignInFailed', 'Google sign-in failed') || 'Google sign-in failed');\n      return false;\n    }\n  };\n\n  const handleGoogleSignOut = async (): Promise<void> => {\n    try {\n      await googleAuth.signOut();\n      hasGoogleDriveFile.value = false;\n      setStoredValue('vocabulary-has-google-drive-file', false);\n      toast.success(t('vocabulary.save.googleSignOutSuccess', 'Successfully signed out from Google') || 'Successfully signed out from Google');\n    } catch (error) {\n      console.error('Google sign-out error:', error);\n      toast.error(t('vocabulary.save.errors.googleSignOutFailed', 'Google sign-out failed') || 'Google sign-out failed');\n    }\n  };\n\n  const resetAutoSaveFile = async () => {\n    autoSaveFileHandle.value = null;\n    hasAutoSaveFile.value = false;\n    setStoredValue('vocabulary-has-auto-save-file', false);\n    autoSaveFilePath.value = '';\n    \n    // Clear file handle from IndexedDB\n    await clearFileHandleFromIDB();\n    \n    console.log('Auto-save file reset completed');\n  };\n\n  const getSaveStatusColor = computed(() => {\n    switch (saveStatus.value) {\n      case 'saving': return 'bg-yellow-500';\n      case 'success': return 'bg-green-500';\n      case 'error': return 'bg-red-500';\n      default: return 'bg-gray-400';\n    }\n  });\n\n  const getSaveStatusText = computed(() => {\n    switch (saveStatus.value) {\n      case 'saving': return autoSaveEnabled.value ? t('vocabulary.save.status.autoSaving', 'Auto Saving...') : t('vocabulary.save.status.saving', 'Saving...');\n      case 'success':\n        if (autoSaveEnabled.value) {\n          if (storageType.value === 'google-drive' && hasGoogleDriveFile.value) {\n            return t('vocabulary.save.status.autoGoogleDrive', 'Auto saved to Google Drive');\n          } else if (storageType.value === 'local' && hasAutoSaveFile.value) {\n            return t('vocabulary.save.status.autoWithFile', 'Auto saved to file');\n          } else {\n            return t('vocabulary.save.status.autoLocalStorage', 'Auto saved locally');\n          }\n        }\n        return t('vocabulary.save.status.fileSaved', 'Saved to file');\n      case 'error': return t('vocabulary.save.status.error', 'Save error');\n      default:\n        if (autoSaveEnabled.value) {\n          if (storageType.value === 'google-drive') {\n            return googleAuth.isSignedInSync() ? t('vocabulary.save.status.googleDriveReady', 'Google Drive ready') : t('vocabulary.save.status.googleDriveSignIn', 'Sign in to Google Drive');\n          } else {\n            return hasAutoSaveFile.value ? t('vocabulary.save.status.autoFile', 'Auto save ready') : t('vocabulary.save.status.autoNoFile', 'Auto save (no file)');\n          }\n        }\n        return t('vocabulary.save.manual', 'Manual save');\n    }\n  });\n\n  // Initialize auto-save and Google APIs on component mount\n  onMounted(async () => {\n    console.log('🚀 Component mounted, initializing auto-save...');\n    await initializeAutoSave();\n    \n    // Always initialize Google APIs to restore saved auth state if available\n    console.log('📱 Initializing Google APIs...');\n    try {\n      await googleAuth.initialize();\n      console.log('✅ Google APIs initialized');\n      \n      // Check if we have restored Google Drive authentication\n        // Check if authentication was restored (this now validates token)\n        const isSignedIn = await googleAuth.isSignedIn();\n        if (isSignedIn) {\n          console.log('✅ Google Drive authentication restored and validated');\n          // Check if backup exists to set hasGoogleDriveFile\n          try {\n            const backupInfo = await googleDriveApi.getVocabularyBackupInfo();\n            if (backupInfo.exists) {\n              hasGoogleDriveFile.value = true;\n              setStoredValue('vocabulary-has-google-drive-file', true);\n              console.log('✅ Google Drive backup file found');\n            }\n          } catch (error) {\n            console.warn('⚠️ Could not check Google Drive backup status:', error);\n          }\n        } else {\n          console.log('⚠️ Google Drive authentication could not be restored');\n        }\n    } catch (error) {\n      console.error('❌ Failed to initialize Google APIs:', error);\n    }\n  });\n\n  onUnmounted(() => {\n    if (autoSaveTimer) clearTimeout(autoSaveTimer);\n    if (debounceTimer) clearTimeout(debounceTimer);\n  });\n\n  return {\n    autoSaveEnabled,\n    isSaving,\n    lastSaveTime,\n    hasAutoSaveFile,\n    hasGoogleDriveFile,\n    storageType,\n    autoSaveFilePath,\n    saveStatus,\n    getSaveStatusColor,\n    getSaveStatusText,\n    manualSave,\n    debounceAutoSave,\n    scheduleAutoSave,\n    setupAutoSaveFile,\n    setupGoogleDrive,\n    syncFromGoogleDrive,\n    handleGoogleSignIn,\n    handleGoogleSignOut,\n    handleFileImport,\n    resetAutoSaveFile,\n    // Google auth states  \n    isGoogleSignedIn: computed(() => googleAuth.isSignedInSync()),\n    googleUserEmail: googleAuth.googleUserEmail,\n    googleAuthError: googleAuth.authError,\n  };\n} ","import { ref, computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useToast } from 'vue-toastification'\nimport { useVocabularyStore } from '../../../composables/useVocabularyStore'\nimport { groupVocabulariesByDate } from '../../../utils/dateUtils'\n\ninterface Word {\n  id: number\n  word: string\n  pronunciation: string\n  partOfSpeech: string\n  meaning: string\n  example?: string\n  level: string\n  category: string\n  favorite?: boolean\n  image?: string\n  createdAt?: string\n  updatedAt?: string\n  isBatchMove?: boolean\n  batchWords?: Word[]\n  categoryName?: string\n}\n\ninterface DateGroup {\n  date: string\n  count: number\n}\n\nexport function useMoveMode() {\n  const { t, locale } = useI18n()\n  const vocabularyStore = useVocabularyStore()\n  const toast = useToast()\n\n  // Move Mode State\n  const globalMoveMode = ref(getStoredMoveMode())\n  \n  // Move Modal State\n  const showMoveModal = ref(false)\n  const wordToMove = ref<Word | null>(null)\n  const selectedTargetDate = ref('')\n  const availableDateGroups = ref<DateGroup[]>([])\n  const currentSourceDate = ref('')\n\n  // Local Storage helpers\n  function getStoredMoveMode(): boolean {\n    try {\n      const stored = localStorage.getItem('vocabulary-global-move-mode-enabled')\n      return stored ? JSON.parse(stored) : false\n    } catch (error) {\n      console.warn('Failed to parse stored move mode preference:', error)\n      return false\n    }\n  }\n\n  function setStoredMoveMode(enabled: boolean) {\n    try {\n      localStorage.setItem('vocabulary-global-move-mode-enabled', JSON.stringify(enabled))\n    } catch (error) {\n      console.warn('Failed to store move mode preference:', error)\n    }\n  }\n\n  // Toggle Move Mode\n  const toggleMoveMode = (enabled: boolean) => {\n    globalMoveMode.value = enabled\n    setStoredMoveMode(enabled)\n  }\n\n  // Handle move vocabulary request\n  const handleMoveVocabulary = (data: { word: Word, targetDate: string, sourceDate?: string }) => {\n    // If targetDate is empty, show the modal for date selection\n    if (!data.targetDate) {\n      // Ensure categoryName is set for single word move\n      wordToMove.value = {\n        ...data.word,\n        categoryName: data.word.category,\n        isBatchMove: false\n      }\n      currentSourceDate.value = data.sourceDate || ''\n      loadAvailableDateGroups(data.word.category)\n      showMoveModal.value = true\n    } else {\n      // Direct move with specified date\n      performMoveVocabulary(data)\n    }\n  }\n\n  // Load available date groups with same topic\n  const loadAvailableDateGroups = (topic: string) => {\n    // Get all vocabularies grouped by date (all vocabularies, not just same topic)\n    // This allows moving to any existing date group\n    const allDateGroups = groupVocabulariesByDate(vocabularyStore.allVocabularies.value)\n    \n    // Filter out the current source date and map to count format\n    availableDateGroups.value = allDateGroups\n      .filter(group => group.date !== currentSourceDate.value) // Exclude current word's source date\n      .map(group => ({\n        date: group.date,\n        count: group.vocabularies.length\n      }))\n      .sort((a: DateGroup, b: DateGroup) => new Date(b.date).getTime() - new Date(a.date).getTime()) // Sort by date descending\n  }\n\n  // Perform the actual move operation\n  const performMoveVocabulary = async (data: { word: Word, targetDate: string }) => {\n    try {\n      // Find the word in store\n      const wordIndex = vocabularyStore.allVocabularies.value.findIndex((w: Word) => w.id === data.word.id)\n      if (wordIndex !== -1) {\n        // Update the word's dates\n        const updatedWord = {\n          ...data.word,\n          createdAt: data.targetDate,\n          updatedAt: data.targetDate\n        }\n        \n        // Update in store\n        vocabularyStore.allVocabularies.value[wordIndex] = updatedWord\n        \n        toast.success(\n          t('vocabulary.moveSuccess', \n            { word: data.word.word, date: formatDateForDisplay(data.targetDate) },\n            `Successfully moved \"${data.word.word}\" to ${formatDateForDisplay(data.targetDate)}`\n          ),\n          { timeout: 3000 }\n        )\n        \n        console.log(`Moved vocabulary \"${data.word.word}\" to ${data.targetDate}`)\n      } else {\n        throw new Error('Word not found')\n      }\n    } catch (error) {\n      console.error('Failed to move vocabulary:', error)\n      toast.error(\n        t('vocabulary.moveError', \n          { word: data.word.word, error: (error as Error).message },\n          `Failed to move \"${data.word.word}\": ${(error as Error).message}`\n        ),\n        { timeout: 5000 }\n      )\n    }\n  }\n\n  // Format date for display\n  const formatDateForDisplay = (dateStr: string) => {\n    const date = new Date(dateStr)\n    return date.toLocaleDateString(locale.value, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  // Close move modal\n  const closeMoveModal = () => {\n    showMoveModal.value = false\n    wordToMove.value = null\n    selectedTargetDate.value = ''\n    availableDateGroups.value = []\n    currentSourceDate.value = ''\n  }\n\n  // Confirm move from modal\n  const confirmMove = (data: { word: Word, targetDate: string }) => {\n    if (data.word.isBatchMove) {\n      performBatchMove(data.targetDate)\n    } else {\n      performMoveVocabulary(data)\n    }\n    closeMoveModal()\n  }\n\n  // Handle batch move for all words in a category\n  const handleBatchMoveCategory = (data: { topic: string, words: Word[], sourceDate: string }) => {\n    // Store batch info for move modal\n    const batchWords = data.words\n    const categoryName = data.topic\n    \n    // Use the first word as representative for the modal\n    // But we'll handle all words when confirming\n    wordToMove.value = {\n      ...batchWords[0],\n      isBatchMove: true,\n      batchWords: batchWords,\n      categoryName: categoryName\n    }\n    \n    currentSourceDate.value = data.sourceDate\n    \n    // Load available date groups (excluding source date)\n    const allGroups = groupVocabulariesByDate(vocabularyStore.allVocabularies.value)\n    \n    // Filter out source date and convert to the format needed for the modal\n    availableDateGroups.value = allGroups\n      .filter(group => group.date !== data.sourceDate)\n      .map(group => ({\n        date: group.date,\n        count: group.vocabularies.length\n      }))\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n    \n    // Show move modal\n    showMoveModal.value = true\n  }\n\n  // Perform batch move for category\n  const performBatchMove = async (targetDate: string) => {\n    try {\n      const batchWords = wordToMove.value?.batchWords || []\n      const categoryName = wordToMove.value?.categoryName || ''\n      \n      // Move all words in the batch\n      batchWords.forEach((word: Word) => {\n        const wordIndex = vocabularyStore.allVocabularies.value.findIndex((w: Word) => w.id === word.id)\n        if (wordIndex !== -1) {\n          const updatedWord = {\n            ...word,\n            createdAt: targetDate,\n            updatedAt: targetDate\n          }\n          vocabularyStore.allVocabularies.value[wordIndex] = updatedWord\n        }\n      })\n      \n      // Show success message\n      toast.success(\n        t('vocabulary.batchMoveSuccess', \n          { count: batchWords.length, category: categoryName, date: formatDateForDisplay(targetDate) },\n          `Successfully moved ${batchWords.length} words from \"${categoryName}\" to ${formatDateForDisplay(targetDate)}`\n        ),\n        { timeout: 3000 }\n      )\n      \n      console.log(`Batch moved ${batchWords.length} words from category \"${categoryName}\" to ${targetDate}`)\n    } catch (error) {\n      console.error('Failed to batch move vocabulary:', error)\n      toast.error(\n        t('vocabulary.batchMoveError', \n          { error: (error as Error).message },\n          `Failed to batch move: ${(error as Error).message}`\n        ),\n        { timeout: 5000 }\n      )\n    }\n  }\n\n  return {\n    // State\n    globalMoveMode,\n    showMoveModal,\n    wordToMove,\n    selectedTargetDate,\n    availableDateGroups,\n    currentSourceDate,\n    \n    // Actions\n    toggleMoveMode,\n    handleMoveVocabulary,\n    handleBatchMoveCategory,\n    loadAvailableDateGroups,\n    performMoveVocabulary,\n    performBatchMove,\n    closeMoveModal,\n    confirmMove,\n    formatDateForDisplay,\n    \n    // Helpers\n    getStoredMoveMode,\n    setStoredMoveMode\n  }\n}\n","<template>\n  <div class=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-[#0a0a0a] dark:to-[#0f0f0f] relative overflow-x-hidden\">\n    <!-- Animated Background Elements to match Dashboard style -->\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none z-0\">\n      <div class=\"floating-shapes\">\n        <div class=\"absolute top-20 left-10 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\n        <div class=\"absolute top-40 right-10 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\n        <div class=\"absolute -bottom-8 left-20 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\n        <!-- Extra decorative balls (responsive, subtle, non-intrusive) -->\n        <div class=\"hidden sm:block absolute top-10 left-1/2 -translate-x-1/2 w-40 h-40 bg-cyan-300 dark:bg-cyan-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-1000\"></div>\n        <div class=\"hidden sm:block absolute bottom-24 right-24 w-52 h-52 bg-indigo-300 dark:bg-indigo-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-3000\"></div>\n        <div class=\"hidden md:block absolute top-1/3 right-1/3 w-36 h-36 bg-emerald-300 dark:bg-emerald-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-1500\"></div>\n        <div class=\"hidden md:block absolute -bottom-20 -right-10 w-96 h-96 bg-blue-200 dark:bg-blue-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-20 animate-blob animation-delay-2500\"></div>\n        <div class=\"hidden lg:block absolute top-1/2 -left-16 w-72 h-72 bg-fuchsia-300 dark:bg-fuchsia-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-3500\"></div>\n        <div class=\"hidden xl:block absolute top-6 right-1/4 w-44 h-44 bg-teal-300 dark:bg-teal-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-500\"></div>\n        <!-- Even more subtle orbs for depth -->\n        <div class=\"hidden sm:block absolute top-1/4 left-6 w-24 h-24 bg-sky-300 dark:bg-sky-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-lg opacity-20 animate-blob animation-delay-4500\"></div>\n        <div class=\"hidden sm:block absolute bottom-8 left-1/3 w-28 h-28 bg-rose-300 dark:bg-rose-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-lg opacity-20 animate-blob animation-delay-5500\"></div>\n        <div class=\"hidden md:block absolute top-16 right-1/3 w-20 h-20 bg-violet-300 dark:bg-violet-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-lg opacity-20 animate-blob animation-delay-6500\"></div>\n        <div class=\"hidden md:block absolute bottom-1/3 right-6 w-24 h-24 bg-lime-300 dark:bg-lime-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-lg opacity-20 animate-blob animation-delay-7500\"></div>\n        <div class=\"hidden lg:block absolute top-3/4 left-1/4 w-32 h-32 bg-amber-300 dark:bg-amber-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-20 animate-blob animation-delay-8500\"></div>\n        <div class=\"hidden lg:block absolute top-8 right-8 w-16 h-16 bg-orange-300 dark:bg-orange-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-md opacity-25 animate-blob animation-delay-1200\"></div>\n        <div class=\"hidden xl:block absolute bottom-10 left-1/2 -translate-x-1/2 w-28 h-28 bg-cyan-200 dark:bg-cyan-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-15 animate-blob animation-delay-2200\"></div>\n        <div class=\"hidden 2xl:block absolute top-1/5 right-1/5 w-40 h-40 bg-indigo-200 dark:bg-indigo-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-15 animate-blob animation-delay-5200\"></div>\n        <!-- Ultra subtle background depth orbs (desktop only) -->\n        <div class=\"hidden lg:block absolute -top-24 left-1/3 w-96 h-96 bg-blue-100 dark:bg-blue-700 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-3xl opacity-10 animate-blob animation-delay-900\"></div>\n        <div class=\"hidden lg:block absolute bottom-[-120px] left-[-80px] w-[420px] h-[420px] bg-purple-100 dark:bg-purple-700 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-3xl opacity-10 animate-blob animation-delay-1900\"></div>\n        <div class=\"hidden xl:block absolute top-1/3 left-[70%] w-48 h-48 bg-pink-200 dark:bg-pink-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-15 animate-blob animation-delay-3300\"></div>\n        <div class=\"hidden xl:block absolute bottom-1/4 right-[35%] w-32 h-32 bg-cyan-300 dark:bg-cyan-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-15 animate-blob animation-delay-6100\"></div>\n        <div class=\"hidden 2xl:block absolute top-[12%] left-[12%] w-56 h-56 bg-emerald-200 dark:bg-emerald-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-15 animate-blob animation-delay-7100\"></div>\n        <div class=\"hidden 2xl:block absolute bottom-[8%] right-[12%] w-64 h-64 bg-teal-200 dark:bg-teal-600 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-2xl opacity-15 animate-blob animation-delay-9100\"></div>\n      </div>\n    </div>\n    <!-- Header -->\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto px-2 xs:px-3 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 pt-3 sm:pt-6\">\n      <LazyLoadComponent animation-type=\"fade-up\" :threshold=\"0.1\" root-margin=\"0px\">\n        <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6 mb-3 xs:mb-4 sm:mb-6\">\n          <div class=\"flex items-center mb-4\">\n            <div class=\"animate-pulse-slow\">\n              <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full mr-2.5\"></div>\n            </div>\n            <h1 class=\"text-lg sm:text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent\">\n              {{ t('vocabulary.header.title', 'Vocabulary') }}\n            </h1>\n          </div>\n          <VocabularyHeader @add-vocabulary=\"openAddDialog\" />\n        </div>\n      </LazyLoadComponent>\n    </div>\n\n    <!-- Filters and Search -->\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto py-3 px-2 xs:py-4 xs:px-3 sm:py-6 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 overflow-x-hidden\">\n      <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.1\" root-margin=\"-50px\">\n        <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] mb-3 xs:mb-4 sm:mb-6 p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6\">\n          <div class=\"flex items-center mb-4\">\n            <div class=\"animate-pulse-slow\">\n              <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full mr-2.5\"></div>\n            </div>\n            <h3 class=\"text-base sm:text-lg font-semibold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent\">\n              {{ t('vocabulary.filters.title', 'Filters') }}\n            </h3>\n          </div>\n          <VocabularyFilters\n            :search-query=\"searchQuery\"\n            :selected-category=\"selectedCategory\"\n            :selected-level=\"selectedLevel\"\n            :categories=\"categories\"\n            :show-favorites-only=\"showFavoritesOnly\"\n            @update:searchQuery=\"updateSearchQuery\"\n            @update:selectedCategory=\"updateSelectedCategory\"\n            @update:selectedLevel=\"updateSelectedLevel\"\n            @update:showFavoritesOnly=\"updateShowFavoritesOnly\"\n          />\n        </div>\n      </LazyLoadComponent>\n      \n      <!-- Date Grouping Toggle -->\n      <LazyLoadComponent animation-type=\"slide-right\" :threshold=\"0.1\" root-margin=\"-50px\">\n        <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] mb-3 xs:mb-4 sm:mb-6 p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6\">\n          <div class=\"flex items-center mb-4\">\n            <div class=\"animate-pulse-slow\">\n              <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-green-400 to-blue-500 rounded-full mr-2.5\"></div>\n            </div>\n            <h3 class=\"text-base sm:text-lg font-semibold bg-gradient-to-r from-green-600 to-blue-600 dark:from-green-400 dark:to-blue-400 bg-clip-text text-transparent\">\n              {{ t('vocabulary.grouping.title', 'Grouping & Move Mode') }}\n            </h3>\n          </div>\n          <GroupingToggle \n            :model-value=\"useGrouping\" \n            :hover-enabled=\"hoverToExpandEnabled\"\n            :move-mode=\"globalMoveMode\"\n            @update:model-value=\"toggleGrouping\" \n            @update:hover-enabled=\"hoverToExpandEnabled = $event\"\n            @update:move-mode=\"globalMoveMode = $event\"\n          />\n        </div>\n      </LazyLoadComponent>\n\n      <!-- Tools & Settings Accordion -->\n      <LazyLoadComponent animation-type=\"scale\" :threshold=\"0.1\" root-margin=\"-50px\">\n        <BaseAccordion\n          :title=\"t('vocabulary.tools.accordionTitle', 'Tools & Settings')\"\n          :description=\"t('vocabulary.tools.accordionDescription', 'Voice settings, topic manager, and save & sync options')\"\n          icon=\"settings\"\n          :default-open=\"true\"\n          persist-key=\"vocabulary-tools\"\n          :status-text=\"formattedSaveStatusForAccordion\"\n          :status-color=\"getSaveStatusColor\"\n          :show-status-when-closed=\"true\"\n          class=\"mb-3 xs:mb-4 sm:mb-6\"\n        >\n          <div class=\"space-y-4 sm:space-y-6\">\n            <!-- Voice Settings Panel -->\n            <div class=\"bg-white/60 dark:bg-[#0a0a0a]/60 backdrop-blur-sm rounded-xl border border-white/20 dark:border-white/10 p-3 sm:p-4 md:p-5\">\n              <div class=\"flex items-center mb-3 sm:mb-4\">\n                <div class=\"animate-pulse-slow\">\n                  <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full mr-2.5\"></div>\n                </div>\n                <h3 class=\"text-sm sm:text-base font-semibold bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400 bg-clip-text text-transparent\">\n                  {{ t('voice.settings.title', 'Voice Settings') }}\n                </h3>\n              </div>\n              <VoiceSelector :show-voice-info=\"true\" />\n            </div>\n\n            <!-- Topic Management Panel -->\n            <div class=\"bg-white/60 dark:bg-[#0a0a0a]/60 backdrop-blur-sm rounded-xl border border-white/20 dark:border-white/10 p-3 sm:p-4 md:p-5\">\n              <div class=\"flex items-center mb-3 sm:mb-4\">\n                <div class=\"animate-pulse-slow\">\n                  <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full mr-2.5\"></div>\n                </div>\n                <h3 class=\"text-sm sm:text-base font-semibold bg-gradient-to-r from-yellow-600 to-orange-600 dark:from-yellow-400 dark:to-orange-400 bg-clip-text text-transparent\">\n                  {{ t('vocabulary.topicManager.title', 'Topic Manager') }}\n                </h3>\n              </div>\n              <TopicManagerPanel @open=\"openTopicManager\" />\n            </div>\n\n            <!-- Save Control Panel -->\n            <div class=\"bg-white/60 dark:bg-[#0a0a0a]/60 backdrop-blur-sm rounded-xl border border-white/20 dark:border-white/10 p-3 sm:p-4 md:p-5\">\n              <div class=\"flex items-center mb-3 sm:mb-4\">\n                <div class=\"animate-pulse-slow\">\n                  <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full mr-2.5\"></div>\n                </div>\n                <h3 class=\"text-sm sm:text-base font-semibold bg-gradient-to-r from-cyan-600 to-blue-600 dark:from-cyan-400 dark:to-blue-400 bg-clip-text text-transparent\">\n                  {{ t('vocabulary.save.title', 'Save & Sync') }}\n                </h3>\n              </div>\n              <SaveControlPanel\n                :auto-save-enabled=\"autoSaveEnabled\"\n                @update:auto-save-enabled=\"autoSaveEnabled = $event\"\n                :is-saving=\"isSaving\"\n                :has-auto-save-file=\"hasAutoSaveFile\"\n                @update:has-auto-save-file=\"hasAutoSaveFile = $event\"\n                :has-google-drive-file=\"hasGoogleDriveFile\"\n                @update:has-google-drive-file=\"hasGoogleDriveFile = $event\"\n                :storage-type=\"storageType\"\n                @update:storage-type=\"storageType = $event\"\n                :is-google-signed-in=\"isGoogleSignedIn\"\n                @update:is-google-signed-in=\"isGoogleSignedIn = $event\"\n                :google-user-email=\"googleUserEmail\"\n                :google-auth-error=\"googleAuthError\"\n                :auto-save-file-path=\"autoSaveFilePath\"\n                @update:auto-save-file-path=\"autoSaveFilePath = $event\"\n                :last-save-time=\"lastSaveTime\"\n                :save-status-color=\"getSaveStatusColor\"\n                :save-status-text=\"getSaveStatusText\"\n                @manual-save=\"manualSave\"\n                @setup-auto-save=\"setupAutoSaveFile\"\n                @setup-google-drive=\"setupGoogleDrive\"\n                @google-sign-in=\"handleGoogleSignIn\"\n                @google-sign-out=\"handleGoogleSignOut\"\n                @sync-from-google-drive=\"syncFromGoogleDrive\"\n                @reset-auto-save=\"resetAutoSaveFile\"\n                @import-file=\"handleFileImportWithReload\"\n              />\n            </div>\n\n            <!-- Delete All Vocabularies Panel -->\n            <DeleteAllVocabulariesPanel\n              :total-count=\"filteredVocabulary.length\"\n              :auto-save-enabled=\"autoSaveEnabled\"\n              :use-grouping=\"useGrouping\"\n              @vocabularies-deleted=\"handleVocabulariesDeleted\"\n              @local-store-cleared=\"handleLocalStoreCleared\"\n            />\n          </div>\n        </BaseAccordion>\n      </LazyLoadComponent>\n\n      <!-- Vocabulary List -->\n      <LazyLoadComponent animation-type=\"slide-left\" :threshold=\"0.05\" root-margin=\"-50px\">\n        <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.003] p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6\">\n          <VocabularyList\n            :paginated-words=\"useGrouping ? [] : paginatedVocabulary\"\n            :current-page=\"currentPage\"\n            :total-pages=\"totalPages\"\n            :total-count=\"filteredVocabulary.length\"\n            :start-index=\"startIndex\"\n            :end-index=\"endIndex\"\n            :visible-pages=\"visiblePages\"\n            :use-grouping=\"useGrouping\"\n            :all-words=\"useGrouping ? filteredVocabulary : undefined\"\n            :date-group-pages=\"dateGroupPages\"\n            :items-per-page-grouped=\"itemsPerPageGrouped\"\n            :hover-to-expand-enabled=\"hoverToExpandEnabled\"\n            :global-move-mode=\"globalMoveMode\"\n            :recently-added-category=\"recentlyAddedCategory\"\n            @play-audio=\"playAudio\"\n            @edit-word=\"openEditDialog\"\n            @delete-word=\"deleteWord\"\n            @toggle-favorite=\"toggleFavorite\"\n            @view-details=\"openDetailsDialog\"\n            @previous-page=\"previousPage\"\n            @next-page=\"nextPage\"\n            @go-to-page=\"goToPage\"\n            @date-group-previous=\"(date) => dateGroupPrevious(date, filteredVocabulary)\"\n            @date-group-next=\"(date) => dateGroupNext(date, filteredVocabulary)\"\n            @date-group-go-to-page=\"dateGroupGoToPage\"\n            @move-vocabulary=\"handleMoveVocabulary\"\n            @open-note-dialog=\"openNoteDialog\"\n            @open-add-vocabulary-dialog=\"openAddVocabularyForDate\"\n            @open-grammar-manager=\"openGrammarManagerForDate\"\n            @batch-move-category=\"handleBatchMoveCategory\"\n          />\n        </div>\n      </LazyLoadComponent>\n    </div>\n\n    <!-- Vocabulary Form Dialog -->\n    <VocabularyFormDialog\n      v-model=\"showFormDialog\"\n      :vocabulary=\"selectedVocabulary\"\n      :target-date=\"targetDateForNewVocabulary\"\n      @vocabulary-saved=\"onVocabularySaved\"\n    />\n\n    <!-- Vocabulary Detail Dialog -->\n    <VocabularyDetailDialog\n      v-model=\"showDetailDialog\"\n      :vocabulary=\"selectedVocabularyForDetail\"\n      @edit-vocabulary=\"openEditFromDetail\"\n      @toggle-favorite=\"toggleFavorite\"\n    />\n\n    <!-- Topic Manager Dialog -->\n    <TopicManager\n      v-model=\"showTopicManager\"\n      :vocabulary-usage=\"categoryUsage\"\n      @topic-added=\"onTopicAdded\"\n      @topic-updated=\"onTopicUpdated\"\n      @topic-deleted=\"onTopicDeleted\"\n    />\n\n    <!-- Vocabulary Note Dialog -->\n    <VocabularyNoteDialog\n      v-model=\"showNoteDialog\"\n      :date=\"noteDialogDate\"\n      :today-words=\"noteDialogWords\"\n      @save-note=\"handleNoteSaved\"\n    />\n\n    <!-- Grammar Manager Modal -->\n    <GrammarManagerModal\n      v-model=\"showGrammarManagerModal\"\n      :selectedDate=\"grammarManagerDate\"\n    />\n    \n    <!-- Sticky Floating Add Button -->\n    <Transition name=\"fade-scale\">\n      <div \n        v-show=\"showStickyButtonVisible\"\n        class=\"fixed bottom-6 z-50 left-1/2 translate-x-4 md:translate-x-4 lg:left-auto lg:right-6 lg:translate-x-0\"\n      >\n        <button \n          @click=\"openAddDialog\"\n          @mouseenter=\"showStickyTooltip = true\"\n          @mouseleave=\"showStickyTooltip = false\"\n          class=\"relative bg-blue-500 hover:bg-blue-600 text-white font-medium w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 flex items-center justify-center\"\n        >\n          <svg \n            class=\"w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8\" \n            fill=\"currentColor\" \n            viewBox=\"0 0 20 20\"\n          >\n            <path fill-rule=\"evenodd\" d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\" clip-rule=\"evenodd\"/>\n          </svg>\n          \n          <!-- Tooltip -->\n          <div\n            v-if=\"showStickyTooltip\"\n            class=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs font-medium text-white bg-gray-900 dark:bg-black dark:text-white dark:border dark:border-dark-bg-mute rounded shadow-lg whitespace-nowrap z-50\"\n          >\n            {{ t('vocabulary.addNew', 'Add New Word') }}\n            <div class=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900 dark:border-t-black\"></div>\n          </div>\n        </button>\n      </div>\n    </Transition>\n\n    <!-- Move Modal Component -->\n    <MoveModal\n      :show-modal=\"showMoveModal\"\n      :word-to-move=\"wordToMove\"\n      :available-date-groups=\"availableDateGroups\"\n      :source-date=\"currentSourceDate\"\n      :all-vocabularies=\"vocabularyStore.allVocabularies.value\"\n      @close=\"closeMoveModal\"\n      @confirm-move=\"confirmMove\"\n    />\n\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, onUnmounted, watch, defineAsyncComponent, nextTick } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport { useToast, POSITION } from 'vue-toastification';\nimport { useVoiceStore } from '../../stores/voiceStore';\nimport { useVocabularyStore } from '../../composables/useVocabularyStore';\nimport { useModalStore } from '../../stores/modalStore';\nimport { groupVocabulariesByDate } from '../../utils/dateUtils';\nimport { getTopicName } from '../../utils/topicUtils';\nimport type { Vocabulary } from '../../composables/useVocabularyStore';\n\n// Local components\nconst LazyLoadComponent = defineAsyncComponent(() => import('../../components/LazyLoadComponent.vue'));\nconst BaseAccordion = defineAsyncComponent(() => import('../../components/BaseAccordion.vue'));\nconst GroupingToggle = defineAsyncComponent(() => import('./components/GroupingToggle.vue'));\nconst ConfirmToast = defineAsyncComponent(() => import('../../components/common/ConfirmToast.vue'));\nconst TopicManagerPanel = defineAsyncComponent(() => import('./components/TopicManagerPanel.vue'));\nconst SaveControlPanel = defineAsyncComponent(() => import('./components/SaveControlPanel.vue'));\nconst VocabularyHeader = defineAsyncComponent(() => import('./components/VocabularyHeader.vue'));\nconst VocabularyFilters = defineAsyncComponent(() => import('./components/VocabularyFilters.vue'));\nconst VocabularyList = defineAsyncComponent(() => import('./components/VocabularyList.vue'));\nconst VocabularyFormDialog = defineAsyncComponent(() => import('./components/VocabularyFormDialog.vue'));\nconst VocabularyDetailDialog = defineAsyncComponent(() => import('./components/VocabularyDetailDialog.vue'));\nconst VocabularyNoteDialog = defineAsyncComponent(() => import('./components/VocabularyNoteDialog.vue'));\nconst GrammarManagerModal = defineAsyncComponent(() => import('./components/GrammarManagerModal.vue'));\nconst MoveModal = defineAsyncComponent(() => import('./components/move/MoveModal.vue'));\nconst VoiceSelector = defineAsyncComponent(() => import('../../components/VoiceSelector.vue'));\nconst TopicManager = defineAsyncComponent(() => import('./components/TopicManager.vue'));\nconst DeleteAllVocabulariesPanel = defineAsyncComponent(() => import('./components/DeleteAllVocabulariesPanel.vue'));\n\n// Composables\nimport { useVocabularyFilters } from './composables/useVocabularyFilters';\nimport { useVocabularyPagination } from './composables/useVocabularyPagination';\nimport { useVocabularyGrouping } from './composables/useVocabularyGrouping';\nimport { useVocabularyDialogs } from './composables/useVocabularyDialogs';\nimport { useTopicManager } from './composables/useTopicManager';\nimport { useVocabularySaving } from './composables/useVocabularySaving';\nimport { useMoveMode } from './composables/useMoveMode';\n\nconst { t, locale } = useI18n();\nconst toast = useToast();\nconst vocabularyStore = useVocabularyStore();\nconst voiceStore = useVoiceStore();\nconst modalStore = useModalStore();\n\nconst itemsPerPage = ref(5);\n\nconst {\n  searchQuery,\n  selectedCategory,\n  selectedLevel,\n  showFavoritesOnly,\n  updateShowFavoritesOnly,\n  updateSearchQuery,\n  updateSelectedCategory,\n  updateSelectedLevel,\n} = useVocabularyFilters();\n\nconst {\n  useGrouping,\n  itemsPerPageGrouped,\n  dateGroupPages,\n  toggleGrouping,\n  reloadGroupingState,\n  dateGroupPrevious,\n  dateGroupNext,\n  dateGroupGoToPage,\n} = useVocabularyGrouping();\n\n// Hover to expand functionality with localStorage persistence\nconst HOVER_EXPAND_STORAGE_KEY = 'vocabulary-hover-expand-enabled';\n\nconst getStoredHoverState = (): boolean => {\n  try {\n    const stored = localStorage.getItem(HOVER_EXPAND_STORAGE_KEY);\n    return stored ? JSON.parse(stored) : false;\n  } catch (error) {\n    console.warn('Failed to load hover expand state from localStorage:', error);\n    return false;\n  }\n};\n\nconst setStoredHoverState = (enabled: boolean) => {\n  try {\n    localStorage.setItem(HOVER_EXPAND_STORAGE_KEY, JSON.stringify(enabled));\n  } catch (error) {\n    console.warn('Failed to save hover expand state to localStorage:', error);\n  }\n};\n\nconst hoverToExpandEnabled = ref(getStoredHoverState());\n\n// Global Move Mode functionality with localStorage persistence\n// Move Mode functionality using composable\nconst {\n  globalMoveMode,\n  showMoveModal,\n  wordToMove,\n  selectedTargetDate,\n  availableDateGroups,\n  currentSourceDate,\n  toggleMoveMode,\n  handleMoveVocabulary,\n  handleBatchMoveCategory,\n  closeMoveModal,\n  confirmMove,\n  formatDateForDisplay\n} = useMoveMode()\n\n// Note dialog state\nconst showNoteDialog = ref(false);\nconst noteDialogDate = ref('');\nconst noteDialogWords = ref<any[]>([]);\n\nconst filteredVocabulary = computed(() => {\n  return vocabularyStore.allVocabularies.value.filter(word => {\n    const matchesSearch = !searchQuery.value ||\n      word.word.toLowerCase().includes(searchQuery.value.toLowerCase()) ||\n      word.meaning.toLowerCase().includes(searchQuery.value.toLowerCase());\n    const matchesCategory = !selectedCategory.value || word.category === selectedCategory.value;\n    const matchesLevel = !selectedLevel.value || word.level === selectedLevel.value;\n    const matchesFavorite = !showFavoritesOnly.value || word.favorite === true;\n    return matchesSearch && matchesCategory && matchesLevel && matchesFavorite;\n  });\n});\n\nconst {\n  currentPage,\n  totalPages,\n  paginatedVocabulary,\n  startIndex,\n  endIndex,\n  visiblePages,\n  previousPage,\n  nextPage,\n  goToPage,\n} = useVocabularyPagination(filteredVocabulary, useGrouping, itemsPerPage);\n\nconst {\n  showFormDialog,\n  selectedVocabulary,\n  showDetailDialog,\n  selectedVocabularyForDetail,\n  openAddDialog,\n  openEditDialog,\n  onVocabularySaved: originalOnVocabularySaved,\n  openDetailsDialog,\n  openEditFromDetail,\n} = useVocabularyDialogs();\n\n// Store the category that should be at the top\nconst recentlyAddedCategory = ref<string | null>(null);\n\n// Override onVocabularySaved to reset target date and reload grouping\nconst onVocabularySaved = (data?: { category: string }) => {\n  originalOnVocabularySaved();\n  targetDateForNewVocabulary.value = null;\n  \n  // Store the category that was just added to move it to the top\n  if (data?.category) {\n    recentlyAddedCategory.value = data.category;\n    console.log('Recently added category:', data.category);\n  }\n  \n  // Trigger auto-save when vocabulary is added/updated\n  if (autoSaveEnabled.value) {\n    debounceAutoSave();\n    console.log('Auto-save triggered from Add Word in date group');\n  }\n  \n  // Reload grouping state to ensure new vocabulary appears in correct date group\n  if (useGrouping.value) {\n    nextTick(() => {\n      reloadGroupingState();\n      console.log('Grouping state reloaded after vocabulary saved');\n    });\n  }\n};\n\nconst {\n  autoSaveEnabled,\n  isSaving,\n  lastSaveTime,\n  hasAutoSaveFile,\n  hasGoogleDriveFile,\n  storageType,\n  saveStatus,\n  getSaveStatusColor,\n  getSaveStatusText,\n  manualSave,\n  debounceAutoSave,\n  scheduleAutoSave,\n  setupAutoSaveFile,\n  setupGoogleDrive,\n  syncFromGoogleDrive,\n  handleGoogleSignIn,\n  handleGoogleSignOut,\n  handleFileImport,\n  resetAutoSaveFile,\n  autoSaveFilePath,\n  isGoogleSignedIn,\n  googleUserEmail,\n  googleAuthError,\n} = useVocabularySaving();\n\nconst {\n  showTopicManager,\n  openTopicManager,\n  onTopicAdded,\n  onTopicUpdated,\n  onTopicDeleted,\n} = useTopicManager(debounceAutoSave);\n\n// Only show categories that are actually used in vocabularies\nconst categories = computed(() => {\n  const usedCategories = new Set(vocabularyStore.allVocabularies.value.map(vocab => vocab.category));\n  return Array.from(usedCategories).sort();\n});\nconst categoryUsage = computed(() => vocabularyStore.getCategoryUsage.value);\n\n// Computed property to control sticky button visibility\nconst showStickyButtonVisible = computed(() => {\n  return showStickyButton.value && !showFormDialog.value && !modalStore.shouldHideAddNewWord;\n});\n\n// Computed property to format save status for accordion header\nconst formattedSaveStatusForAccordion = computed(() => {\n  if (!lastSaveTime.value) {\n    return t('vocabulary.save.notSaved', 'Not saved');\n  }\n  \n  const statusText = getSaveStatusText.value;\n  const timeText = lastSaveTime.value;\n  \n  // Format: \"Last saved: 16:22:38 16/8/2025 - Auto (file)\"\n  const lastSaveLabel = t('vocabulary.save.lastSave', { time: timeText }, 'Last saved: {time}');\n  let finalText;\n  \n  if (lastSaveLabel && lastSaveLabel.includes('{time}')) {\n    finalText = lastSaveLabel.replace('{time}', timeText);\n  } else {\n    finalText = lastSaveLabel || `Last saved: ${timeText}`;\n  }\n  \n  // Add status info with separator for better spacing\n  return `${finalText} - ${statusText}`;\n});\n\nconst deleteWord = (word: any) => {\n  const toastId = toast(\n    {\n      component: ConfirmToast,\n      props: {\n        message: t('vocabulary.confirmDelete', { word: word.word }),\n        confirmText: t('common.confirm'),\n        cancelText: t('common.cancel'),\n        onConfirm: () => {\n          vocabularyStore.deleteVocabulary(word.id);\n          debounceAutoSave();\n          toast.dismiss(toastId);\n          toast.success(t('vocabulary.deleteSuccess', { word: word.word }) || `Successfully deleted \"${word.word}\"`);\n        },\n        onCancel: () => {\n          toast.dismiss(toastId);\n        },\n      },\n    },\n    {\n      position: POSITION.TOP_CENTER,\n      timeout: false,\n      closeButton: false,\n      draggable: false,\n      icon: false,\n    }\n  );\n};\n\nconst toggleFavorite = (word: Vocabulary) => {\n  vocabularyStore.toggleFavorite(word.id);\n\n  // Manually toggle the favorite status on the vocabulary object\n  // currently displayed in the detail dialog to make the change\n  // immediately visible.\n  if (selectedVocabularyForDetail.value && selectedVocabularyForDetail.value.id === word.id) {\n      selectedVocabularyForDetail.value.favorite = !selectedVocabularyForDetail.value.favorite;\n  }\n  \n  debounceAutoSave();\n};\n\nconst playAudio = async (word: string) => {\n  try {\n    const utterance = voiceStore.createUtterance(word);\n    await new Promise<void>((resolve, reject) => {\n      utterance.onend = () => resolve();\n      utterance.onerror = (event) => reject(event.error);\n      if ('speechSynthesis' in window) {\n        speechSynthesis.speak(utterance);\n      } else {\n        reject(new Error('Speech synthesis not supported'));\n      }\n    });\n  } catch (error) {\n    console.error('Error playing audio:', error);\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(word);\n      utterance.lang = 'en-US';\n      speechSynthesis.speak(utterance);\n    }\n  }\n};\n\nwatch(\n  () => vocabularyStore.allVocabularies.value,\n  (newVocabularies, oldVocabularies) => {\n    const newCount = newVocabularies?.length || 0;\n    const oldCount = oldVocabularies?.length || 0;\n    if (autoSaveEnabled.value && newCount > 0 && oldCount !== undefined && newCount !== oldCount) {\n      saveStatus.value = 'saving';\n      debounceAutoSave();\n    }\n    \n    // Reload grouping state when vocabulary count changes (new vocabulary added)\n    if (useGrouping.value && newCount !== oldCount && newCount > 0) {\n      nextTick(() => {\n        reloadGroupingState();\n        console.log('Grouping state reloaded due to vocabulary count change');\n      });\n    }\n  },\n  { deep: true, immediate: false }\n);\n\nwatch(\n  () => vocabularyStore.allVocabularies.value.map(v => ({ id: v.id, favorite: v.favorite, word: v.word, meaning: v.meaning })),\n  (newData, oldData) => {\n    if (autoSaveEnabled.value && newData.length > 0 && oldData && JSON.stringify(newData) !== JSON.stringify(oldData)) {\n      debounceAutoSave();\n    }\n  },\n  { deep: true }\n);\n\n// Watch hover expand state and save to localStorage\nwatch(\n  hoverToExpandEnabled,\n  (newValue) => {\n    setStoredHoverState(newValue);\n  }\n);\n\n// Prevent body scroll when dialogs are open\nwatch(showNoteDialog, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open');\n  } else {\n    // Only remove if other dialogs are also closed\n    if (!showFormDialog.value) {\n      document.body.classList.remove('modal-open');\n    }\n  }\n  // Sync with modal store\n  modalStore.setNoteDialog(newValue);\n});\n\n// Prevent body scroll when form dialog is open\nwatch(showFormDialog, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open');\n    // Hide sticky tooltip when dialog opens\n    showStickyTooltip.value = false;\n  } else {\n    // Only remove if other dialogs are also closed\n    if (!showNoteDialog.value) {\n      document.body.classList.remove('modal-open');\n    }\n  }\n  // Sync with modal store\n  modalStore.setVocabularyForm(newValue);\n});\n\nonMounted(() => {\n  vocabularyStore.initializeStore();\n  if (autoSaveEnabled.value) {\n    scheduleAutoSave();\n  }\n  \n  // Listen for vocabulary notes updates\n  window.addEventListener('vocabulary-notes-updated', () => {\n    if (autoSaveEnabled.value) {\n      debounceAutoSave();\n    }\n  });\n  \n  // Listen for grammar rules updates\n  window.addEventListener('grammar-rules-updated', () => {\n    if (autoSaveEnabled.value) {\n      debounceAutoSave();\n    }\n  });\n  \n  // Add scroll event listener for sticky button\n  window.addEventListener('scroll', handleScroll, { passive: true });\n  \n  // Initial call to set button state\n  handleScroll();\n});\n\nconst handleFileImportWithReload = (file: File) => {\n  const handleImportComplete = (event: CustomEvent) => {\n    nextTick(() => {\n      reloadGroupingState();\n      console.log('Grouping state reloaded after import');\n    });\n    window.removeEventListener('vocabularyImportComplete', handleImportComplete as EventListener);\n  };\n  \n  window.addEventListener('vocabularyImportComplete', handleImportComplete as EventListener);\n  \n  handleFileImport(file);\n};\n\n\n\n// Sticky button state\nconst showStickyButton = ref(false);\nconst showStickyTooltip = ref(false);\nconst headerHeight = ref(0);\nconst isScrollingDown = ref(false);\nconst lastScrollY = ref(0);\nconst accordionState = ref(true); // Track accordion state\n\n// Scroll handler for sticky button\nconst handleScroll = () => {\n  const scrollY = window.scrollY;\n  const headerElement = document.querySelector('[data-vocabulary-header]') || document.querySelector('header');\n  \n  // Get header height if not cached\n  if (headerHeight.value === 0 && headerElement) {\n    headerHeight.value = (headerElement as HTMLElement).offsetHeight;\n  }\n  \n  // Update accordion state from localStorage first\n  const currentAccordionState = (() => {\n    try {\n      const stored = localStorage.getItem('accordion-vocabulary-header');\n      return stored !== null ? JSON.parse(stored) : true; // default is true\n    } catch {\n      return true;\n    }\n  })();\n  accordionState.value = currentAccordionState;\n  \n  // Find the original add button position\n  const originalAddButton = document.querySelector('[data-original-add-button]');\n  \n  let originalButtonVisible = false;\n  if (originalAddButton) {\n    const rect = originalAddButton.getBoundingClientRect();\n    const computedStyle = window.getComputedStyle(originalAddButton);\n    // Button is visible if it has dimensions and is not hidden\n    originalButtonVisible = rect.height > 0 && rect.width > 0 && \n                           computedStyle.display !== 'none' && \n                           computedStyle.visibility !== 'hidden' &&\n                           computedStyle.opacity !== '0';\n  }\n  \n  // Show sticky button logic\n  const headerBottom = headerHeight.value || 120;\n  let shouldShowSticky;\n  \n  if (!accordionState.value) {\n    // Accordion is closed - show sticky button always\n    shouldShowSticky = true;\n  } else if (originalButtonVisible) {\n    // Accordion is open and original button is visible - hide sticky\n    shouldShowSticky = false;\n  } else {\n    // Accordion is open but original button not visible - show sticky based on scroll\n    shouldShowSticky = scrollY > headerBottom;\n  }\n  \n  showStickyButton.value = shouldShowSticky;\n  \n  lastScrollY.value = scrollY;\n};\n\n// Note dialog handlers\nconst openNoteDialog = (date: string, words: any[]) => {\n  noteDialogDate.value = date;\n  noteDialogWords.value = words;\n  showNoteDialog.value = true;\n};\n\n// Store the target date for new vocabulary\nconst targetDateForNewVocabulary = ref<string | null>(null);\n\n// Grammar manager modal state\nconst showGrammarManagerModal = ref(false);\nconst grammarManagerDate = ref<string | null>(null);\n\n// Open add vocabulary dialog with specific date\nconst openAddVocabularyForDate = (date: string) => {\n  // Store the target date\n  targetDateForNewVocabulary.value = date;\n  \n  // Use the standard add dialog approach\n  selectedVocabulary.value = null;\n  showFormDialog.value = true;\n  \n  // Dispatch edit word event\n  window.dispatchEvent(new CustomEvent('vocabulary-edit-word'));\n};\n\n// Open grammar manager modal for specific date\nconst openGrammarManagerForDate = (date: string) => {\n  console.log('Opening grammar manager for date:', date);\n  grammarManagerDate.value = date;\n  showGrammarManagerModal.value = true;\n  modalStore.setGrammarManager(true);\n  console.log('Modal state:', showGrammarManagerModal.value);\n};\n\n// Prevent body scroll when grammar manager modal is open\nwatch(showGrammarManagerModal, (newValue) => {\n  if (newValue) {\n    document.body.classList.add('modal-open');\n  } else {\n    // Only remove if other dialogs are also closed\n    if (!showNoteDialog.value && !showFormDialog.value) {\n      document.body.classList.remove('modal-open');\n    }\n  }\n  // Sync with modal store\n  modalStore.setGrammarManager(newValue);\n});\n\nconst handleNoteSaved = (note: string, markedWords: string[]) => {\n  toast.success(t('vocabulary.notes.saveSuccess', 'Notes saved successfully'), {\n    timeout: 2000,\n  });\n  \n  // Check if auto-save is enabled\n  if (autoSaveEnabled.value) {\n    toast.info(t('vocabulary.notes.autoSaveNotice', 'Notes will be included in auto-save'), {\n      timeout: 3000,\n    });\n    debounceAutoSave();\n  }\n  \n  console.log(`Note saved for ${noteDialogDate.value} with ${markedWords.length} marked words`);\n};\n\n// Handle vocabularies deleted event from DeleteAllVocabulariesPanel\nconst handleVocabulariesDeleted = () => {\n  // Reset pagination to first page\n  currentPage.value = 1;\n  \n  // Reset recently added category\n  recentlyAddedCategory.value = null;\n  \n  // Reset grouping state\n  if (useGrouping.value) {\n    nextTick(() => {\n      reloadGroupingState();\n      console.log('Grouping state reloaded after delete all');\n    });\n  }\n  \n  // Trigger auto-save if enabled to save the empty state\n  if (autoSaveEnabled.value) {\n    debounceAutoSave();\n  }\n};\n\n// Handle local store cleared event from DeleteAllVocabulariesPanel\nconst handleLocalStoreCleared = () => {\n  // Reset pagination to first page\n  currentPage.value = 1;\n  \n  // Reset recently added category\n  recentlyAddedCategory.value = null;\n  \n  // Reset all local state\n  useGrouping.value = false;\n  autoSaveEnabled.value = false;\n  hoverToExpandEnabled.value = false;\n  globalMoveMode.value = false;\n  \n  // Reset grouping state\n  nextTick(() => {\n    reloadGroupingState();\n    console.log('Grouping state reloaded after local store clear');\n  });\n  \n  // Show info message about the reset\n  toast.info(\n    t('vocabulary.deleteAll.localStoreClearedInfo', 'Application has been reset to initial state. All local preferences have been cleared.'),\n    { timeout: 5000 }\n  );\n  \n  console.log('Local store cleared, application reset to initial state');\n};\n\n// Perform move vocabulary between date groups  \nconst performMoveVocabulary = (data: { word: any, targetDate: string }) => {\n  try {\n    // Find and update the word's createdAt and updatedAt to match target date\n    const wordIndex = vocabularyStore.allVocabularies.value.findIndex(w => w.id === data.word.id)\n    \n    if (wordIndex !== -1) {\n      // Update the vocabulary array using store method\n      vocabularyStore.updateVocabulary(data.word.id, {\n        createdAt: data.targetDate,\n        updatedAt: data.targetDate\n      })\n      \n      // Show success message\n      toast.success(\n        t('vocabulary.moveSuccess', \n          { word: data.word.word, date: new Date(data.targetDate).toLocaleDateString() },\n          `Successfully moved \"${data.word.word}\" to ${new Date(data.targetDate).toLocaleDateString()}`\n        ),\n        { timeout: 3000 }\n      )\n      \n      // Trigger auto-save if enabled\n      if (autoSaveEnabled.value) {\n        debounceAutoSave()\n        toast.info(t('vocabulary.moveAutoSaveNotice', 'Word moved and will be included in auto-save'), {\n          timeout: 2000,\n        })\n      }\n      \n      console.log(`Moved vocabulary \"${data.word.word}\" to ${data.targetDate}`)\n    } else {\n      throw new Error('Word not found')\n    }\n  } catch (error) {\n    console.error('Failed to move vocabulary:', error)\n    toast.error(\n      t('vocabulary.moveError', \n        { word: data.word.word, error: (error as Error).message },\n        `Failed to move \"${data.word.word}\": ${(error as Error).message}`\n      ),\n      { timeout: 5000 }\n    )\n  }\n};\n\n\n\n// Watch for changes and persist to localStorage\nwatch(hoverToExpandEnabled, (newValue) => {\n  setStoredHoverState(newValue);\n});\n\nwatch(globalMoveMode, (newValue) => {\n  toggleMoveMode(newValue);\n});\n\n// Handle localStorage changes for accordion state\nconst handleStorageChange = (e: StorageEvent) => {\n  if (e.key === 'accordion-vocabulary-header') {\n    // Accordion state changed, update sticky button immediately\n    setTimeout(() => handleScroll(), 50); // Small delay to ensure DOM is updated\n  }\n};\n\nonMounted(() => {\n  document.addEventListener('scroll', handleScroll);\n  window.addEventListener('storage', handleStorageChange);\n  \n  // Listen for clicks on accordion button to immediately update sticky button\n  const accordionButton = document.querySelector('[data-vocabulary-header] button');\n  if (accordionButton) {\n    accordionButton.addEventListener('click', () => {\n      setTimeout(() => handleScroll(), 100); // Delay to ensure accordion animation completes\n    });\n  }\n  \n  handleScroll(); // Initial check\n});\n\nonUnmounted(() => {\n  document.removeEventListener('scroll', handleScroll);\n  window.removeEventListener('storage', handleStorageChange);\n  // Clean up modal-open class\n  document.body.classList.remove('modal-open');\n});\n\n</script>\n\n<style>\n/* Global styles for modal */\nbody.modal-open {\n  overflow: hidden !important;\n}\n\n/* Sticky button fade-scale transition */\n.fade-scale-enter-active,\n.fade-scale-leave-active {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.fade-scale-enter-from,\n.fade-scale-leave-to {\n  opacity: 0;\n  transform: scale(0.8) translateY(10px);\n}\n\n.fade-scale-enter-to,\n.fade-scale-leave-from {\n  opacity: 1;\n  transform: scale(1) translateY(0);\n}\n\n/* XS: Override animation to include Add New Word positioning */\n@media (max-width: 639px) {\n  .fade-scale-enter-from,\n  .fade-scale-leave-to {\n    opacity: 0;\n    transform: scale(0.8) translateY(10px) translateX(1rem);\n  }\n  \n  .fade-scale-enter-to,\n  .fade-scale-leave-from {\n    opacity: 1;\n    transform: scale(1) translateY(0) translateX(1rem);\n  }\n}\n</style>\n"],"file":"assets/VocabularyListView-BlBnKkKP.js"}