{"version":3,"mappings":"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","names":["_openBlock","_createElementBlock","_createElementVNode","_normalizeClass","flashcardFlipStates","cardKey","_toDisplayString","entry","_Fragment","_unref","_renderList","_createVNode"],"ignoreList":[],"sources":["../../src/views/practice/components/component-child/SessionDetailModal/FlashcardDetail.vue"],"sourcesContent":["<template>\n  <!-- Flashcard Mode detailed UI section -->\n  <div class=\"space-y-3 sm:space-y-4\">\n    <div class=\"perspective-1000\">\n      <div\n        :class=\"['flashcard-history', { 'flipped': flashcardFlipStates[`${cardKey}`] }]\"\n        @click=\"toggleFlashcardFlip(`${cardKey}`)\"\n        class=\"relative w-full cursor-pointer h-80 sm:h-96 md:h-[28rem] select-none\"\n      >\n        <!-- Front Side (exactly matching FlashcardCard.vue) -->\n        <div class=\"flashcard-face flashcard-front absolute inset-0 bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-800 flex items-center justify-center p-2 sm:p-4 md:p-6\">\n          <div class=\"text-center w-full max-w-full h-full flex flex-col justify-center overflow-y-auto\">\n            <div class=\"mb-2 sm:mb-3 md:mb-4 w-full flex justify-center flex-shrink-0\">\n              <span class=\"inline-block px-2 py-1 sm:px-3 sm:py-1 bg-blue-100 dark:bg-gray-800 text-blue-800 dark:text-blue-300 text-xs sm:text-sm font-medium rounded-full max-w-[85%] truncate\">\n                {{ getCategoryName(entry) }}\n              </span>\n            </div>\n            \n            <!-- Normal Flashcard Mode -->\n            <template v-if=\"entry.mode !== 'scramble-words'\">\n              <h2 class=\"text-xl sm:text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-3 sm:mb-4 md:mb-5\">\n                {{ getWord(entry) }}\n              </h2>\n              <p class=\"text-sm sm:text-base md:text-lg text-gray-600 dark:text-gray-300 mb-4 sm:mb-5 md:mb-6\">\n                {{ getPronunciation(entry) }}\n              </p>\n              <p class=\"text-xs sm:text-sm md:text-base text-gray-500 dark:text-gray-400\">\n                {{ t('flashcard.card.flip_to_meaning', 'Click to see meaning') }}\n              </p>\n            </template>\n\n            <!-- Scramble Words Mode -->\n            <template v-else>\n              <h3 class=\"text-sm sm:text-base md:text-lg font-bold text-gray-900 dark:text-white mb-1 sm:mb-2 flex-shrink-0\">\n                {{ t('flashcard.scrambleWords.instruction', 'Arrange the letters to form the word') }}\n              </h3>\n              <p class=\"text-xs sm:text-sm md:text-base text-gray-600 dark:text-gray-300 mb-2 sm:mb-3 flex-shrink-0\">\n                {{ entry.extra.scrambleWords?.pronunciation || '' }}\n              </p>\n              \n              <!-- User's assembled word (read-only) -->\n              <div class=\"mb-2 sm:mb-3 w-full flex-shrink-0\">\n                <div class=\"flex flex-wrap justify-center items-center gap-1 mb-1 sm:mb-2 min-h-[2.5rem] w-full px-1\">\n                  <div \n                    v-for=\"(letter, letterIdx) in (entry.extra.scrambleWords?.assembledWord || [])\"\n                    :key=\"`assembled-${letterIdx}`\"\n                    class=\"w-7 h-7 sm:w-8 sm:h-8 md:w-9 md:h-9 border-2 border-gray-300 dark:border-dark-bg-mute rounded-lg flex items-center justify-center bg-blue-50 dark:bg-[#0f0f0f] text-sm sm:text-base md:text-lg font-bold text-gray-900 dark:text-white cursor-pointer hover:bg-blue-100 dark:hover:bg-[#1a1a1a] transition-colors flex-shrink-0\"\n                  >\n                    {{ letter }}\n                  </div>\n                  <!-- Empty slots -->\n                  <div \n                    v-for=\"n in Math.max(0, (entry.extra.scrambleWords?.targetWord || entry.word).length - (entry.extra.scrambleWords?.assembledWord?.length || 0))\"\n                    :key=\"`empty-${n}`\"\n                    class=\"w-7 h-7 sm:w-8 sm:h-8 md:w-9 md:h-9 border-2 border-dashed border-gray-300 dark:border-dark-bg-mute rounded-lg bg-gray-50 dark:bg-[#0f0f0f] flex-shrink-0\"\n                  ></div>\n                </div>\n                \n                <!-- Feedback (historical result) -->\n                <div class=\"text-center w-full px-1 flex-shrink-0\">\n                  <div v-if=\"entry.isCorrect === true\" class=\"text-green-600 dark:text-green-400\">\n                    <p class=\"font-semibold text-sm sm:text-base mb-2\">\n                      ✅ {{ t('flashcard.scrambleWords.correct', 'Correct!') }}\n                    </p>\n                    <div class=\"bg-green-50 dark:bg-[#0f0f0f] border border-green-200 dark:border-dark-bg-mute rounded-lg p-3 sm:p-4\">\n                      <p class=\"text-green-700 dark:text-green-400 font-medium text-sm sm:text-base\">\n                        {{ entry.extra.scrambleWords?.meaning || entry.meaningShort }}\n                      </p>\n                      <p v-if=\"entry.extra.scrambleWords?.partOfSpeech\" class=\"text-green-600 dark:text-green-500 text-xs sm:text-sm mt-1 opacity-80\">\n                        {{ t(`vocabulary.wordTypes.${entry.extra.scrambleWords.partOfSpeech}`, entry.extra.scrambleWords.partOfSpeech) }}\n                      </p>\n                    </div>\n                  </div>\n                  <div v-else class=\"text-red-600 dark:text-red-400\">\n                    <p class=\"font-semibold text-sm sm:text-base mb-2\">\n                      ❌ {{ t('flashcard.scrambleWords.incorrect', 'Incorrect') }}\n                    </p>\n                    <div class=\"bg-red-50 dark:bg-[#0f0f0f] border border-red-200 dark:border-dark-bg-mute rounded-lg p-3 sm:p-4\">\n                      <p class=\"text-red-700 dark:text-red-400 font-bold text-base sm:text-lg mb-1\">\n                        {{ (entry.extra.scrambleWords?.targetWord || entry.word).toUpperCase() }}\n                      </p>\n                      <p class=\"text-red-600 dark:text-red-500 text-sm sm:text-base\">\n                        {{ entry.extra.scrambleWords?.meaning || entry.meaningShort }}\n                      </p>\n                      <p v-if=\"entry.extra.scrambleWords?.partOfSpeech\" class=\"text-red-500 dark:text-red-600 text-xs sm:text-sm mt-1 opacity-80\">\n                        {{ t(`vocabulary.wordTypes.${entry.extra.scrambleWords.partOfSpeech}`, entry.extra.scrambleWords.partOfSpeech) }}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Scrambled letters to choose from -->\n              <div class=\"flex justify-center flex-wrap gap-1 mb-2 sm:mb-3 w-full px-1 flex-shrink-0\">\n                <button \n                  v-for=\"(letter, letterIdx) in (entry.extra.scrambleWords?.scrambledLetters || [])\"\n                  :key=\"`scrambled-${letterIdx}`\"\n                  disabled\n                  class=\"w-7 h-7 sm:w-8 sm:h-8 md:w-9 md:h-9 border-2 border-gray-400 dark:border-dark-bg-soft rounded-lg flex items-center justify-center bg-white dark:bg-[#0f0f0f] text-sm sm:text-base md:text-lg font-bold text-gray-900 dark:text-white cursor-not-allowed opacity-75 transition-all duration-200 flex-shrink-0\"\n                >\n                  {{ letter }}\n                </button>\n              </div>\n              \n              <!-- Control buttons -->\n              <div class=\"flex justify-center gap-1 w-full px-1 flex-shrink-0 mt-auto\">\n                <button \n                  disabled\n                  class=\"flex-1 max-w-[30%] min-w-[70px] px-1 py-1 sm:px-2 sm:py-1.5 bg-orange-500/50 hover:bg-orange-600/50 dark:bg-orange-600/50 dark:hover:bg-orange-700/50 text-white text-xs font-semibold rounded cursor-not-allowed flex items-center justify-center gap-1 truncate\"\n                  :title=\"t('flashcard.scrambleWords.backspace', 'Backspace')\"\n                >\n                  <svg class=\"w-3 h-3 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fill-rule=\"evenodd\" d=\"M6.707 4.879A3 3 0 018.828 4H15a3 3 0 013 3v6a3 3 0 01-3 3H8.828a3 3 0 01-2.12-.879l-4.415-4.414a1 1 0 010-1.414l4.414-4.414zm4 3.707a1 1 0 00-1.414-1.414L8 8.586 6.707 7.293a1 1 0 10-1.414 1.414L6.586 10l-1.293 1.293a1 1 0 101.414 1.414L8 11.414l1.293 1.293a1 1 0 001.414-1.414L9.414 10l1.293-1.293z\" clip-rule=\"evenodd\"/>\n                  </svg>\n                  <span class=\"hidden sm:inline text-xs truncate\">{{ t('flashcard.scrambleWords.backspace', 'Backspace') }}</span>\n                </button>\n                <button \n                  disabled\n                  class=\"flex-1 max-w-[30%] min-w-[50px] px-1 py-1 sm:px-2 sm:py-1.5 bg-gray-500/50 hover:bg-gray-600/50 dark:bg-gray-600/50 dark:hover:bg-gray-700/50 text-white text-xs font-semibold rounded cursor-not-allowed truncate\"\n                >\n                  {{ t('flashcard.scrambleWords.clear', 'Clear') }}\n                </button>\n                <button \n                  disabled\n                  class=\"flex-1 max-w-[30%] min-w-[50px] px-1 py-1 sm:px-2 sm:py-1.5 bg-blue-600/50 hover:bg-blue-700/50 text-white text-xs font-semibold rounded cursor-not-allowed truncate\"\n                >\n                  {{ t('flashcard.scrambleWords.check', 'Check') }}\n                </button>\n              </div>\n            </template>\n          </div>\n        </div>\n\n        <!-- Back Side (exactly matching FlashcardCard.vue) -->\n        <div class=\"flashcard-face flashcard-back absolute inset-0 bg-gradient-to-br from-green-400 to-green-600 dark:from-green-700 dark:to-green-900 rounded-xl shadow-2xl border border-gray-200 dark:border-gray-800 flex items-center justify-center p-4 sm:p-6 md:p-8\">\n          <div class=\"text-center text-white\">\n            <h3 class=\"text-base sm:text-lg md:text-xl font-bold mb-3 sm:mb-4 md:mb-5\">\n              {{ getMeaning(entry) }}\n            </h3>\n            <p class=\"text-sm sm:text-base md:text-lg mb-3 sm:mb-4 md:mb-5\" v-if=\"getPartOfSpeech(entry)\">\n              {{ t(`vocabulary.wordTypes.${getPartOfSpeech(entry)}`, getPartOfSpeech(entry)) }}\n            </p>\n            <p class=\"text-xs sm:text-sm md:text-base mb-3 sm:mb-4 md:mb-5\" v-if=\"getExample(entry)\">\n              \"{{ getExample(entry) }}\"\n            </p>\n            <p class=\"text-xs sm:text-sm md:text-base text-white/80\">\n              {{ t('flashcard.card.flip_back', 'Click to flip back') }}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Result Summary -->\n    <ResultSummary\n      :user-answer=\"entry.extra.flashcard?.word || entry.word\"\n      :correct-answer=\"entry.extra.flashcard?.meaning || entry.meaningShort\"\n      :is-correct=\"entry.isCorrect\"\n      user-answer-label=\"Vocabulary\"\n      correct-answer-label=\"Meaning\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { defineAsyncComponent } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { getTopicName } from '../../../../../utils/topicUtils'\nconst ResultSummary = defineAsyncComponent(()=>import('./ResultSummary.vue'))\n\n\ndefineProps<{\n  entry: any\n  cardKey: string\n  flashcardFlipStates: Record<string, boolean>\n}>()\n\nconst emit = defineEmits<{\n  toggleFlashcardFlip: [cardKey: string]\n}>()\n\nconst { t } = useI18n()\n\nconst toggleFlashcardFlip = (cardKey: string) => {\n  emit('toggleFlashcardFlip', cardKey)\n}\n\nconst getCategoryName = (entry: any) => {\n  const category = entry.extra.scrambleWords?.category || entry.extra.flashcard?.category\n  return category ? getTopicName(category) : 'Unknown Category'\n}\n\nconst getWord = (entry: any) => {\n  return entry.extra.scrambleWords?.targetWord || entry.extra.flashcard?.word || entry.word\n}\n\nconst getPronunciation = (entry: any) => {\n  return entry.extra.scrambleWords?.pronunciation || entry.extra.flashcard?.pronunciation || ''\n}\n\nconst getMeaning = (entry: any) => {\n  return entry.extra.scrambleWords?.meaning || entry.extra.flashcard?.meaning || entry.meaningShort\n}\n\nconst getPartOfSpeech = (entry: any) => {\n  return entry.extra.scrambleWords?.partOfSpeech || entry.extra.flashcard?.partOfSpeech\n}\n\nconst getExample = (entry: any) => {\n  return entry.extra.scrambleWords?.example || entry.extra.flashcard?.example\n}\n</script>\n\n<style scoped>\n/* Flashcard flip animation styles (matching FlashcardCard.vue) */\n.perspective-1000 {\n  perspective: 1000px;\n}\n\n.flashcard-history {\n  transform-style: preserve-3d;\n  transition: transform 0.6s;\n}\n\n.flashcard-history.flipped {\n  transform: rotateY(180deg);\n}\n\n.flashcard-face {\n  backface-visibility: hidden;\n}\n\n.flashcard-front {\n  transform: rotateY(0deg);\n}\n\n.flashcard-back {\n  transform: rotateY(180deg);\n}\n</style>\n"],"file":"assets/FlashcardDetail-Dsp6fZTb.js"}