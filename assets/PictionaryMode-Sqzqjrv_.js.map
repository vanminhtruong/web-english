{"version":3,"mappings":"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","names":["_createElementBlock","_createElementVNode","_toDisplayString","card","getTopicName","_unref","_normalizeClass","_openBlock","_Fragment","_renderList","_withModifiers","pictionaryAnswered","pictionaryCorrect","_createTextVNode","_createVNode"],"ignoreList":[],"sources":["../../src/views/practice/components/PictionaryMode.vue"],"sourcesContent":["<template>\n  <div\n    class=\"bg-white dark:bg-black rounded-xl shadow-2xl border border-gray-200 dark:border-dark-bg-mute p-6 min-h-96 max-h-[560px] select-none\"\n    @copy.prevent\n    @cut.prevent\n    @contextmenu.prevent\n    @click=\"focusInput\"\n  >\n    <div class=\"h-full flex flex-col overflow-hidden\">\n      <!-- Category Badge -->\n      <div class=\"mb-4 flex items-center justify-center gap-3\">\n        <span class=\"px-3 py-1 bg-purple-100 dark:bg-dark-bg-mute text-purple-800 dark:text-purple-300 text-sm font-medium rounded-full\">\n          {{ card?.category ? getTopicName(card.category) : '' }}\n        </span>\n        <!-- Drag mode toggle (local to Pictionary) -->\n        <div class=\"flex items-center gap-2\">\n          <span class=\"text-xs text-gray-600 dark:text-white/70\">{{ t('flashcard.pictionary.dragToggle', 'Drag & Drop') }}</span>\n          <button\n            class=\"relative inline-flex h-5 w-9 items-center rounded-full transition-colors border border-gray-300 dark:border-dark-bg-mute\"\n            :class=\"dragMode ? 'bg-blue-600' : 'bg-gray-200 dark:bg-dark-bg-soft'\"\n            @click.stop=\"toggleDragMode\"\n            :aria-pressed=\"dragMode ? 'true' : 'false'\"\n            :title=\"t('flashcard.pictionary.dragToggle', 'Drag & Drop')\"\n          >\n            <span :class=\"['inline-block h-4 w-4 transform rounded-full bg-white transition-transform', dragMode ? 'translate-x-5' : 'translate-x-1']\" />\n          </button>\n        </div>\n      </div>\n\n      <!-- Image Display as hint -->\n      <div class=\"flex-1 flex items-center justify-center mb-4 min-h-0\">\n        <div v-if=\"card?.image\" class=\"relative\">\n          <img\n            :src=\"card.image\"\n            :alt=\"t('flashcard.pictionary.imageAlt', 'Pictionary image')\"\n            class=\"max-w-full max-h-40 object-contain rounded-lg shadow-md border border-gray-200 dark:border-dark-bg-mute\"\n            @error=\"handleImageError\"\n          />\n          <div v-if=\"imageError\" class=\"absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-dark-bg-mute rounded-lg\">\n            <div class=\"text-center\">\n              <svg class=\"mx-auto h-12 w-12 text-gray-400 dark:text-white/50\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 16m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n              </svg>\n              <p class=\"text-sm text-gray-500 dark:text-white/60 mt-2\">{{ t('flashcard.image.imageError', 'Could not load image.') }}</p>\n            </div>\n          </div>\n        </div>\n        <div v-else class=\"flex items-center justify-center bg-gray-100 dark:bg-dark-bg-mute rounded-lg p-8 w-full max-w-sm\">\n          <div class=\"text-center\">\n            <svg class=\"mx-auto h-16 w-16 text-gray-400 dark:text-white/50\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 16m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n            </svg>\n            <p class=\"text-sm text-gray-500 dark:text-white/60 mt-2\">{{ t('flashcard.image.noImage', 'No image available for this card.') }}</p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Letter slots -->\n      <div class=\"flex-shrink-0\">\n        <div class=\"flex flex-wrap gap-2 justify-center items-center\">\n          <div v-for=\"(slot, idx) in slots\" :key=\"idx\">\n            <div v-if=\"slot.separator\" class=\"px-1 text-lg text-gray-700 dark:text-white/80 select-none\">\n              {{ slot.char }}\n            </div>\n            <div\n              v-else\n              class=\"w-10 h-12 sm:w-12 sm:h-14 flex items-center justify-center rounded-md border text-xl sm:text-2xl font-semibold bg-white dark:bg-dark-bg-soft text-gray-900 dark:text-white border-gray-300 dark:border-dark-bg-mute transition-all duration-200\"\n              :class=\"[\n                slot.fixed\n                  ? 'opacity-90'\n                  : 'cursor-pointer hover:bg-gray-50 dark:hover:bg-dark-bg-mute hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-sm',\n                dragMode && !slot.fixed ? 'ring-0' : ''\n              ]\"\n              @click=\"onSlotClick(idx)\"\n              @dragover.prevent=\"onSlotDragOver(idx, $event)\"\n              @drop.prevent=\"onSlotDrop(idx, $event)\"\n            >\n              <span v-if=\"slot.char\" class=\"uppercase tracking-wider\">{{ slot.char }}</span>\n              <span\n                v-else-if=\"!dragMode && isFocused && !pictionaryAnswered && idx === nextEditableIndex()\"\n                class=\"caret-block\"\n                aria-hidden=\"true\"\n              ></span>\n              <span v-else class=\"uppercase tracking-wider\">&nbsp;</span>\n            </div>\n          </div>\n        </div>\n        <!-- Letter bank filter & list for drag mode -->\n        <div v-if=\"dragMode && !pictionaryAnswered\" class=\"mt-3\">\n          <div class=\"mb-2 flex justify-center\">\n            <div class=\"relative w-48 sm:w-56\">\n              <input\n                v-model=\"letterQuery\"\n                type=\"text\"\n                inputmode=\"text\"\n                autocomplete=\"off\"\n                spellcheck=\"false\"\n                placeholder=\"Find letter...\"\n                class=\"w-full px-3 pr-8 py-1.5 text-sm rounded-md border bg-white text-gray-900 border-gray-300 dark:bg-dark-bg-soft dark:text-white dark:border-dark-bg-mute focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                @click.stop\n              />\n              <button\n                type=\"button\"\n                class=\"absolute right-1.5 top-1/2 -translate-y-1/2 z-10 p-1 rounded text-gray-500 dark:text-white/70 hover:bg-gray-100 dark:hover:bg-white/10\"\n                :class=\"{ 'opacity-40 pointer-events-none': !letterQuery }\"\n                @click.stop=\"clearLetterQuery\"\n                :aria-label=\"t('common.clear', 'Clear')\"\n                :title=\"t('common.clear', 'Clear')\"\n              >\n                <svg class=\"w-4 h-4\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                  <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n          <div class=\"flex flex-wrap gap-2 justify-center\">\n            <button\n              v-for=\"ch in filteredLetterBank\"\n              :key=\"ch\"\n              class=\"w-8 h-10 sm:w-9 sm:h-11 inline-flex items-center justify-center rounded-md text-base sm:text-lg font-semibold border bg-blue-50 text-blue-700 border-blue-200 dark:bg-dark-bg-soft dark:text-blue-300 dark:border-blue-900/40 hover:shadow transition\"\n              draggable=\"true\"\n              @dragstart=\"onLetterDragStart(ch, $event)\"\n            >\n              {{ ch }}\n            </button>\n          </div>\n        </div>\n        <!-- Hidden input to capture typing -->\n        <input\n          ref=\"hiddenInput\"\n          type=\"text\"\n          class=\"fixed top-0 left-0 w-px h-px opacity-0\"\n          tabindex=\"-1\"\n          aria-hidden=\"true\"\n          autocomplete=\"off\"\n          autocapitalize=\"off\"\n          spellcheck=\"false\"\n          inputmode=\"text\"\n          @beforeinput.stop.prevent=\"handleBeforeInput\"\n          @input.stop.prevent=\"handleInput\"\n          @keydown.stop.prevent=\"handleKeydown\"\n          @compositionstart=\"onCompositionStart\"\n          @compositionupdate=\"onCompositionUpdate\"\n          @compositionend=\"onCompositionEnd\"\n          @focus=\"isFocused = true\"\n          @blur=\"onHiddenBlur\"\n        />\n      </div>\n\n      <!-- Feedback -->\n      <div v-if=\"pictionaryAnswered\" class=\"text-center space-y-2 max-h-32 overflow-y-auto mt-3\">\n        <div\n          :class=\"[\n            'inline-flex items-center px-3 py-1 rounded-full text-sm font-medium',\n            pictionaryCorrect\n              ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300'\n              : 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300'\n          ]\"\n        >\n          <svg v-if=\"pictionaryCorrect\" class=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\"/>\n          </svg>\n          <svg v-else class=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 0 1 1.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 0 1 0-1.414z\" clip-rule=\"evenodd\"/>\n          </svg>\n          {{ pictionaryCorrect ? t('common.correct', 'Correct') : t('common.incorrect', 'Incorrect') }}\n        </div>\n        <div v-if=\"!pictionaryCorrect\" class=\"text-center\">\n          <p class=\"text-sm text-gray-600 dark:text-white/70\">\n            {{ t('flashcard.image.correctAnswer', 'Correct answer') }}:\n            <span class=\"font-semibold text-gray-900 dark:text-white\">{{ card?.word }}</span>\n          </p>\n          <p class=\"text-xs text-gray-500 dark:text-white/60 mt-1 line-clamp-2\">\n            {{ card?.meaning }}\n          </p>\n        </div>\n        <div v-else class=\"text-center\">\n          <p class=\"text-sm text-gray-600 dark:text-white/70 line-clamp-2\">\n            {{ card?.meaning }}\n          </p>\n        </div>\n      </div>\n\n      <!-- Instruction -->\n      <p v-if=\"!pictionaryAnswered\" class=\"text-center text-sm text-gray-500 dark:text-white/60 mt-3\">\n        {{ dragMode\n          ? t('flashcard.pictionary.dragInstruction', 'Drag letters into the boxes, then press Enter to check.')\n          : t('flashcard.pictionary.instruction', 'Click the boxes and type to fill in the missing letters. Press Enter to check.')\n        }}\n      </p>\n      \n      <!-- Firework Sound Effect -->\n      <FireworkSoundEffect \n        ref=\"fireworkEffect\"\n        :trigger-firework=\"triggerFirework\"\n        :trigger-sound=\"triggerSound\"\n        :is-correct=\"isCorrectAnswer\"\n        @effect-complete=\"resetTriggers\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, onMounted, onBeforeUnmount, nextTick, defineAsyncComponent, computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport type { Vocabulary } from '../../../composables/useVocabularyStore'\nimport { useVoiceStore } from '../../../stores/voiceStore'\n\ninterface Props {\n  card: Vocabulary | null\n  pictionaryAnswer: string\n  pictionaryAnswered: boolean\n  pictionaryCorrect: boolean\n  getTopicName: (id: string) => string\n}\n\ninterface Emits {\n  (e: 'update:pictionary-answer', value: string): void\n  (e: 'check-answer'): void\n  (e: 'pictionary-snapshot', value: { slots: Slot[] }): void\n}\n\nconst props = defineProps<Props>()\nconst emit = defineEmits<Emits>()\nconst { t } = useI18n()\nconst { playAudio } = useVoiceStore()\n\nconst imageError = ref(false)\nconst hiddenInput = ref<HTMLInputElement | null>(null)\nconst isFocused = ref(false)\n// Track IME composition to avoid altering previous characters\nconst isComposing = ref(false)\nlet compositionBuffer = ''\n// Drag & drop mode state\nconst dragMode = ref(false)\nconst letterBank = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n// Query to filter letter bank in drag mode\nconst letterQuery = ref('')\nconst filteredLetterBank = computed(() => {\n  const q = letterQuery.value.trim().toUpperCase()\n  if (!q) return letterBank\n  // Allow entering multiple characters: show unique letters typed that exist in A-Z\n  const onlyLetters = q.replace(/[^A-Z]/g, '')\n  if (!onlyLetters) return letterBank\n  const set = new Set(onlyLetters.split(''))\n  return letterBank.filter(ch => set.has(ch))\n})\n\nconst clearLetterQuery = () => {\n  letterQuery.value = ''\n}\n\n// Import effect component lazily\nconst FireworkSoundEffect = defineAsyncComponent(() => import('./FireworkSoundEffect.vue'))\n// Effect triggers\nconst triggerFirework = ref(false)\nconst triggerSound = ref(false)\nconst isCorrectAnswer = ref(false)\nconst fireworkEffect = ref()\n\ntype Slot = { char: string; fixed: boolean; separator?: boolean }\nconst slots = ref<Slot[]>([])\n\nconst normalizeWord = (w: string) => w.normalize('NFKC')\n\nconst buildSlots = (word: string) => {\n  const letters = normalizeWord(word)\n  const arr: Slot[] = []\n  const isAlpha = (c: string) => /^[a-z]$/i.test(c)\n  const meaningfulIndices: number[] = []\n  for (let i = 0; i < letters.length; i++) {\n    const c = letters[i]\n    if (isAlpha(c)) {\n      meaningfulIndices.push(i)\n    }\n  }\n  // Determine number of hint letters: 1 for short words (<= 3 letters), else 2\n  const alphaCount = meaningfulIndices.length\n  const hintCount = alphaCount <= 3 ? 1 : 2\n  // Randomly select hint positions among alphabetic letters\n  const hintSet = new Set<number>()\n  while (hintSet.size < Math.min(hintCount, alphaCount)) {\n    const r = meaningfulIndices[Math.floor(Math.random() * alphaCount)]\n    hintSet.add(r)\n  }\n\n  for (let i = 0; i < letters.length; i++) {\n    const c = letters[i]\n    if (!isAlpha(c)) {\n      // keep separators (space, hyphen, apostrophe)\n      arr.push({ char: c, fixed: true, separator: true })\n      continue\n    }\n    if (hintSet.has(i)) {\n      arr.push({ char: c.toUpperCase(), fixed: true })\n    } else {\n      arr.push({ char: '', fixed: false })\n    }\n  }\n  slots.value = arr\n  pushAnswer()\n}\n\nconst pushAnswer = () => {\n  // Emit string preserving separators; blanks are empty until filled\n  const answer = slots.value\n    .map(s => (s.separator ? s.char : (s.char || '')))\n    .join('')\n  emit('update:pictionary-answer', answer)\n}\n\nconst emitSnapshot = () => {\n  // Emit a deep copy of slot states to avoid mutation by parent consumers\n  const snapshot = slots.value.map(s => ({ char: s.char, fixed: s.fixed, separator: s.separator }))\n  emit('pictionary-snapshot', { slots: snapshot })\n}\n\nconst focusInput = async () => {\n  await nextTick()\n  try {\n    hiddenInput.value?.focus({ preventScroll: true })\n  } catch {\n    // Fallback for browsers not supporting FocusOptions\n    hiddenInput.value?.focus()\n  }\n  isFocused.value = true\n}\n\n// Ensure focus stays on the hidden input when in typing mode and not answered\nconst ensureFocusIfNeeded = () => {\n  if (!props.pictionaryAnswered && !dragMode.value) {\n    if (document.activeElement !== hiddenInput.value) {\n      focusInput()\n    }\n  }\n}\n\nconst onHiddenBlur = () => {\n  isFocused.value = false\n  // Immediately refocus if still eligible to type\n  ensureFocusIfNeeded()\n}\n\nconst nextEditableIndex = () => slots.value.findIndex(s => !s.fixed && !s.char)\nconst lastFilledEditableIndex = () => {\n  for (let i = slots.value.length - 1; i >= 0; i--) {\n    const s = slots.value[i]\n    if (!s.fixed && s.char) return i\n  }\n  return -1\n}\n\n// Remove Vietnamese diacritics so input is handled without accents\n// Special-case: map all forms of 'ư' to 'w' so Unikey 'w' is preserved\nconst stripDiacritics = (s: string) => s\n  .replace(/[ưừứửữự]/g, 'w')\n  .replace(/[ƯỪỨỬỮỰ]/g, 'W')\n  .normalize('NFD')\n  .replace(/[\\u0300-\\u036f]/g, '')\n  .replace(/đ/g, 'd')\n  .replace(/Đ/g, 'D')\n\nconst handleKeydown = (e: KeyboardEvent) => {\n  if (props.pictionaryAnswered) return\n  // Ignore keydown while composing (IME in progress)\n  if (isComposing.value) return\n  const key = e.key\n  // In drag mode, ignore typing except Enter\n  if (dragMode.value) {\n    if (key === 'Enter') {\n      emitSnapshot()\n      emit('check-answer')\n    }\n    return\n  }\n  // Support desktop physical keyboards (sanitize Vietnamese diacritics)\n  const alpha = stripDiacritics(key)\n  if (/^[a-z]$/i.test(alpha)) {\n    const idx = nextEditableIndex()\n    if (idx !== -1) {\n      slots.value[idx].char = alpha.toUpperCase()\n      pushAnswer()\n    }\n    return\n  }\n  if (key === 'Backspace') {\n    const idx = lastFilledEditableIndex()\n    if (idx !== -1) {\n      slots.value[idx].char = ''\n      pushAnswer()\n    }\n  } else if (key === 'Enter') {\n    emitSnapshot()\n    emit('check-answer')\n  }\n}\n\nconst handleBeforeInput = (e: Event) => {\n  if (props.pictionaryAnswered) return\n  // Ignore programmatic updates while composing; we'll handle on compositionend\n  if (isComposing.value) {\n    return\n  }\n  if (dragMode.value) {\n    // ignore text input events while in drag mode, but still clear input value\n    if (hiddenInput.value) hiddenInput.value.value = ''\n    return\n  }\n  const ie = e as InputEvent\n  const type = ie.inputType as string | undefined\n  // Handle character insertion from soft keyboards (Android/iOS)\n  if (type === 'insertText') {\n    const data = stripDiacritics(((ie as any).data || ''))\n    if (/^[a-z]$/i.test(data)) {\n      const idx = nextEditableIndex()\n      if (idx !== -1) {\n        slots.value[idx].char = data.toUpperCase()\n        pushAnswer()\n      }\n    }\n  } else if (type === 'deleteContentBackward') {\n    const idx = lastFilledEditableIndex()\n    if (idx !== -1) {\n      slots.value[idx].char = ''\n      pushAnswer()\n    }\n  } else if (type === 'insertLineBreak') {\n    emitSnapshot()\n    emit('check-answer')\n  }\n  // Always clear the hidden input value so it doesn't accumulate text\n  if (hiddenInput.value) hiddenInput.value.value = ''\n}\n\nconst handleInput = (e: Event) => {\n  // Clear any stray value in the hidden input\n  if (isComposing.value) return\n  if (hiddenInput.value) hiddenInput.value.value = ''\n}\n\n// IME composition handlers to prevent retroactive edits to previous letters\nconst onCompositionStart = () => {\n  isComposing.value = true\n  compositionBuffer = ''\n}\n\nconst onCompositionUpdate = (e: CompositionEvent) => {\n  // Keep a sanitized view of current composition text\n  const data = (e.data || '').toString()\n  compositionBuffer = stripDiacritics(data)\n}\n\nconst onCompositionEnd = (e: CompositionEvent) => {\n  // Finalize composition and insert letters sequentially without changing previous ones\n  const dataRaw = (e.data || hiddenInput.value?.value || '').toString()\n  const finalized = stripDiacritics(dataRaw).toUpperCase()\n  for (const ch of finalized) {\n    if (!/^[A-Z]$/.test(ch)) continue\n    const idx = nextEditableIndex()\n    if (idx === -1) break\n    slots.value[idx].char = ch\n  }\n  pushAnswer()\n  if (hiddenInput.value) hiddenInput.value.value = ''\n  compositionBuffer = ''\n  isComposing.value = false\n}\n\n// Determines if all editable, non-separator slots are filled\nconst allEditableFilled = () => {\n  return slots.value.every(s => s.fixed || s.separator || !!s.char)\n}\n\n// In drag mode, auto-check when all letters are filled\nconst maybeAutoCheck = () => {\n  if (dragMode.value && !props.pictionaryAnswered && allEditableFilled()) {\n    emitSnapshot()\n    emit('check-answer')\n  }\n}\n\nwatch(() => props.card, (c) => {\n  imageError.value = false\n  if (c?.word) buildSlots(c.word)\n  // Focus on new card in typing mode\n  ensureFocusIfNeeded()\n})\n\nonMounted(() => {\n  if (props.card?.word) buildSlots(props.card.word)\n  focusInput()\n  // As a safeguard, re-focus on visibility regain (e.g., after dialogs)\n  document.addEventListener('visibilitychange', ensureFocusIfNeeded)\n})\n\nonBeforeUnmount(() => {\n  document.removeEventListener('visibilitychange', ensureFocusIfNeeded)\n})\n\nconst handleImageError = () => {\n  imageError.value = true\n}\n\n// Reset effect triggers\nconst resetTriggers = () => {\n  triggerFirework.value = false\n  triggerSound.value = false\n}\n\n// Watch answer completion to trigger effects\nwatch(() => props.pictionaryAnswered, (newVal) => {\n  if (newVal && !triggerFirework.value) {\n    isCorrectAnswer.value = props.pictionaryCorrect\n    setTimeout(() => {\n      triggerFirework.value = true\n      triggerSound.value = true\n    }, 50)\n  }\n  // When answered correctly, pronounce the word using project voice settings\n  if (newVal && props.pictionaryCorrect && props.card?.word) {\n    // Fire and forget; ignore errors if TTS unsupported\n    Promise.resolve(playAudio(props.card.word)).catch(() => {})\n  }\n  if (newVal) {\n    // Hide caret when answered\n    isFocused.value = false\n  }\n  // When the answer state resets (moving to next card), restore focus\n  if (!newVal) {\n    ensureFocusIfNeeded()\n  }\n})\n\n// Drag & drop helpers (top-level)\nconst toggleDragMode = () => {\n  dragMode.value = !dragMode.value\n  if (!dragMode.value) {\n    // when leaving drag mode, allow typing focus\n    focusInput()\n  } else {\n    // leaving focus to avoid showing caret\n    isFocused.value = false\n  }\n}\n\nconst onLetterDragStart = (ch: string, ev: DragEvent) => {\n  ev.dataTransfer?.setData('text/plain', ch)\n  ev.dataTransfer?.setDragImage?.(createDragImage(ch), 12, 12)\n}\n\nconst onSlotDragOver = (idx: number, _ev: DragEvent) => {\n  // Only allow drop on editable and non-fixed slots\n  const s = slots.value[idx]\n  if (!s || s.fixed || s.separator) return\n}\n\nconst onSlotDrop = (idx: number, ev: DragEvent) => {\n  const s = slots.value[idx]\n  if (!s || s.fixed || s.separator) return\n  const ch = (ev.dataTransfer?.getData('text/plain') || '').toUpperCase()\n  if (/^[A-Z]$/.test(ch)) {\n    s.char = ch\n    pushAnswer()\n    // Clear search query after successfully placing a letter\n    clearLetterQuery()\n    // After filling a letter via drag, auto-check if all slots are filled in drag mode\n    maybeAutoCheck()\n  }\n}\n\nconst onSlotClick = (idx: number) => {\n  const s = slots.value[idx]\n  if (!s || s.separator || s.fixed) return\n  if (dragMode.value) {\n    // In drag mode: click toggles clear if filled\n    if (s.char) {\n      s.char = ''\n      pushAnswer()\n    }\n  } else {\n    // typing mode focuses input\n    focusInput()\n  }\n}\n\n// Create a lightweight drag image element\nconst createDragImage = (ch: string) => {\n  const el = document.createElement('div')\n  el.textContent = ch\n  el.style.position = 'absolute'\n  el.style.top = '-1000px'\n  el.style.left = '-1000px'\n  el.style.padding = '6px 8px'\n  el.style.fontWeight = '700'\n  el.style.fontSize = '16px'\n  el.style.borderRadius = '8px'\n  el.style.background = 'rgba(37,99,235,0.15)'\n  el.style.color = '#1D4ED8'\n  el.style.border = '1px solid rgba(37,99,235,0.35)'\n  document.body.appendChild(el)\n  setTimeout(() => document.body.removeChild(el), 0)\n  return el\n}\n</script>\n\n<style scoped>\n@keyframes caret-blink {\n  0%, 50% { opacity: 1; }\n  50.01%, 100% { opacity: 0; }\n}\n\n.caret-block {\n  display: block;\n  width: 2px;\n  height: 1.3em; /* match text height */\n  background-color: currentColor; /* inherits from parent text color */\n  border-radius: 1px;\n  animation: caret-blink 1s step-end infinite;\n}\n</style>\n"],"file":"assets/PictionaryMode-Sqzqjrv_.js"}