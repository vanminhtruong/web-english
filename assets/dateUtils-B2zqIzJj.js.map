{"version":3,"file":"dateUtils-B2zqIzJj.js","sources":["../../src/utils/dateUtils.ts"],"sourcesContent":["import type { TopicGroup } from '../views/vocabulary/types'\r\n\r\nexport interface GroupedVocabulary {\r\n  date: string\r\n  displayDate: string\r\n  vocabularies: any[]\r\n  topics?: TopicGroup[]\r\n  totalItems?: number\r\n  currentPage?: number\r\n  totalPages?: number\r\n}\r\n\r\n/**\r\n * Format date to readable string\r\n */\r\nexport const formatDate = (dateString: string | undefined, locale: string = 'vi-VN'): string => {\r\n  if (!dateString) return ''\r\n  \r\n  try {\r\n    const date = new Date(dateString)\r\n    return date.toLocaleDateString(locale, {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    })\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Format date and time to readable string\r\n */\r\nexport const formatDateTime = (dateString: string | undefined, locale: string = 'vi-VN'): string => {\r\n  if (!dateString) return ''\r\n  \r\n  try {\r\n    const date = new Date(dateString)\r\n    return date.toLocaleString(locale, {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Get relative time from now (e.g., \"2 hours ago\", \"yesterday\", \"3 days ago\")\r\n */\r\nexport const getRelativeTime = (dateString: string | undefined, t?: (key: string, params?: any) => string): string => {\r\n  if (!dateString) return ''\r\n  \r\n  try {\r\n    const date = new Date(dateString)\r\n    const now = new Date()\r\n    const diffInMs = now.getTime() - date.getTime()\r\n    const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60))\r\n    const diffInDays = Math.floor(diffInHours / 24)\r\n    \r\n    if (diffInHours < 1) {\r\n      const diffInMinutes = Math.floor(diffInMs / (1000 * 60))\r\n      if (diffInMinutes < 1) {\r\n        return t ? t('time.ago.justNow') : 'Just now'\r\n      }\r\n      return t ? t('time.ago.minutesAgo', { minutes: diffInMinutes }) : `${diffInMinutes} minutes ago`\r\n    } else if (diffInHours < 24) {\r\n      return t ? t('time.ago.hoursAgo', { hours: diffInHours }) : `${diffInHours} hours ago`\r\n    } else if (diffInDays === 1) {\r\n      return t ? t('time.ago.yesterday') : 'Yesterday'\r\n    } else if (diffInDays < 7) {\r\n      return t ? t('time.ago.daysAgo', { days: diffInDays }) : `${diffInDays} days ago`\r\n    } else {\r\n      return formatDate(dateString)\r\n    }\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Get date key for grouping (YYYY-MM-DD)\r\n */\r\nexport const getDateKey = (dateString: string | undefined): string => {\r\n  if (!dateString) return ''\r\n  \r\n  try {\r\n    const date = new Date(dateString)\r\n    return date.toISOString().split('T')[0]\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Group vocabularies by topic\r\n */\r\nexport const groupVocabulariesByTopic = (vocabularies: any[]): TopicGroup[] => {\r\n  const grouped = new Map<string, any[]>()\r\n  const uncategorizedKey = 'Uncategorized'\r\n\r\n  vocabularies.forEach(vocab => {\r\n    const topic = vocab.category || uncategorizedKey\r\n    if (!grouped.has(topic)) {\r\n      grouped.set(topic, [])\r\n    }\r\n    grouped.get(topic)!.push(vocab)\r\n  })\r\n\r\n  const result = Array.from(grouped.entries()).map(([topic, vocabs]) => {\r\n    // Get category name from the first vocabulary item in the group (for imported data)\r\n    const firstVocab = vocabs[0]\r\n    // If there's a categoryName from imported data, use it\r\n    // Otherwise, we'll let the component use getTopicName to get the proper translation\r\n    const categoryName = firstVocab?.categoryName || null\r\n    \r\n    return {\r\n      topic,\r\n      categoryName, // Preserve category name from imported data\r\n      vocabularies: vocabs.sort((a, b) => {\r\n          const timeA = new Date(a.createdAt || '').getTime()\r\n          const timeB = new Date(b.createdAt || '').getTime()\r\n          return timeB - timeA\r\n        })\r\n    }\r\n  })\r\n\r\n  return result.sort((a, b) => {\r\n    if (a.topic === uncategorizedKey) return 1;\r\n    if (b.topic === uncategorizedKey) return -1;\r\n    return a.topic.localeCompare(b.topic);\r\n  });\r\n}\r\n\r\n/**\r\n * Group vocabularies by date and then by topic\r\n */\r\nexport const groupVocabulariesByDateAndTopic = (\r\n  vocabularies: any[],\r\n  locale: string = 'vi-VN',\r\n  t?: (key: string) => string\r\n): GroupedVocabulary[] => {\r\n  const groupedByDate = groupVocabulariesByDate(vocabularies, locale, t)\r\n\r\n  return groupedByDate.map(dateGroup => {\r\n    return {\r\n      ...dateGroup,\r\n      topics: groupVocabulariesByTopic(dateGroup.vocabularies)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Group vocabularies by date\r\n */\r\nexport const groupVocabulariesByDate = (\r\n  vocabularies: any[],\r\n  locale: string = 'vi-VN',\r\n  t?: (key: string) => string\r\n): GroupedVocabulary[] => {\r\n  const grouped = new Map<string, any[]>()\r\n  \r\n  // Group by date key\r\n  vocabularies.forEach(vocab => {\r\n    const dateKey = getDateKey(vocab.createdAt)\r\n    if (!dateKey) return\r\n    \r\n    if (!grouped.has(dateKey)) {\r\n      grouped.set(dateKey, [])\r\n    }\r\n    grouped.get(dateKey)!.push(vocab)\r\n  })\r\n  \r\n  // Convert to array and sort by date (newest first)\r\n  const result: GroupedVocabulary[] = Array.from(grouped.entries())\r\n    .map(([dateKey, vocabs]) => ({\r\n      date: dateKey,\r\n      displayDate: getGroupDisplayDate(dateKey, locale, t),\r\n      vocabularies: vocabs.sort((a, b) => {\r\n        // Sort by creation time within the same date (newest first)\r\n        const timeA = new Date(a.createdAt || '').getTime()\r\n        const timeB = new Date(b.createdAt || '').getTime()\r\n        return timeB - timeA\r\n      })\r\n    }))\r\n    .sort((a, b) => {\r\n      // Sort groups by date (newest first)\r\n      return b.date.localeCompare(a.date)\r\n    })\r\n  \r\n  return result\r\n}\r\n\r\n/**\r\n * Get display name for date group\r\n */\r\nexport const getGroupDisplayDate = (dateKey: string, locale: string = 'vi-VN', t?: (key: string) => string): string => {\r\n  try {\r\n    const date = new Date(dateKey + 'T00:00:00')\r\n    const today = new Date()\r\n    const yesterday = new Date(today)\r\n    yesterday.setDate(today.getDate() - 1)\r\n    \r\n    const todayKey = getDateKey(today.toISOString())\r\n    const yesterdayKey = getDateKey(yesterday.toISOString())\r\n    \r\n    if (dateKey === todayKey) {\r\n      // Prefer i18n if provided\r\n      if (t) return t('time.today') || 'Today'\r\n      // Fallback by locale (support vi and ko)\r\n      const l = locale.toLowerCase()\r\n      if (l.startsWith('vi')) return 'Hôm nay'\r\n      if (l.startsWith('ko')) return '오늘'\r\n      return 'Today'\r\n    } else if (dateKey === yesterdayKey) {\r\n      if (t) return t('time.yesterday') || 'Yesterday'\r\n      const l = locale.toLowerCase()\r\n      if (l.startsWith('vi')) return 'Hôm qua'\r\n      if (l.startsWith('ko')) return '어제'\r\n      return 'Yesterday'\r\n    } else {\r\n      return formatDate(date.toISOString(), locale)\r\n    }\r\n  } catch (error) {\r\n    return dateKey\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}