{"version":3,"file":"useVocabularyStore-C5HdnbWt.js","sources":["../../src/composables/useVocabularyStore.ts"],"sourcesContent":["import { ref, computed } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\n\r\n// Define vocabulary interface\r\nexport interface Vocabulary {\r\n  id: number\r\n  word: string\r\n  pronunciation: string\r\n  partOfSpeech: string\r\n  meaning: string\r\n  example?: string\r\n  category: string\r\n  level: string\r\n  synonyms?: string[]\r\n  antonyms?: string[]\r\n  notes?: string\r\n  favorite?: boolean\r\n  image?: string // Base64 encoded image or URL\r\n  createdAt?: string\r\n  updatedAt?: string\r\n}\r\n\r\n// Global vocabulary store\r\nconst vocabularies = ref<Vocabulary[]>([])\r\nlet nextId = 1\r\nlet isInitialized = false\r\n\r\n// Reactive flag to track initialization status\r\nconst isStoreReady = ref(false)\r\n\r\n// Reactive custom topics to fix category update issue\r\nconst customTopics = ref<{key: string, vi: string, en: string}[]>([])\r\n\r\n// Load custom topics from localStorage into reactive ref\r\nconst loadCustomTopics = () => {\r\n  try {\r\n    const saved = localStorage.getItem('customTopics')\r\n    if (saved) {\r\n      const parsedTopics = JSON.parse(saved)\r\n      if (Array.isArray(parsedTopics)) {\r\n        customTopics.value = parsedTopics\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading custom topics:', error)\r\n    customTopics.value = []\r\n  }\r\n}\r\n\r\n// Load from localStorage immediately when module is imported\r\nconst loadFromLocalStorage = () => {\r\n  try {\r\n    const saved = localStorage.getItem('vocabularies')\r\n    const savedNextId = localStorage.getItem('nextVocabId')\r\n    \r\n    if (saved) {\r\n      const parsedVocabs = JSON.parse(saved)\r\n      if (Array.isArray(parsedVocabs)) {\r\n        vocabularies.value = parsedVocabs\r\n      }\r\n    }\r\n    \r\n    if (savedNextId) {\r\n      nextId = parseInt(savedNextId, 10) || 1\r\n    }\r\n    \r\n    // Load custom topics as well\r\n    loadCustomTopics()\r\n    \r\n    isInitialized = true\r\n    isStoreReady.value = true\r\n  } catch (error) {\r\n    console.error('Error loading vocabularies from localStorage:', error)\r\n    isInitialized = true\r\n    isStoreReady.value = true\r\n  }\r\n}\r\n\r\n// Save to localStorage\r\nconst saveToLocalStorage = () => {\r\n  try {\r\n    localStorage.setItem('vocabularies', JSON.stringify(vocabularies.value))\r\n    localStorage.setItem('nextVocabId', nextId.toString())\r\n    // Also save custom topics\r\n    localStorage.setItem('customTopics', JSON.stringify(customTopics.value))\r\n  } catch (error) {\r\n    console.error('Error saving data to localStorage:', error)\r\n  }\r\n}\r\n\r\nfunction normalizeCategoryKeys() {\r\n  const categoryKeys = [\r\n    'technology', 'business', 'travel', 'food', 'health', 'education', 'sports', 'entertainment',\r\n    'science', 'art', 'music', 'literature', 'politics', 'environment', 'fashion', 'finance'\r\n  ];\r\n  // Danh sách các bản dịch tiếng Anh/Việt cho từng key\r\n  const translationMap: { [key: string]: string[] } = {\r\n    technology: ['Technology', 'Công nghệ'],\r\n    business: ['Business', 'Kinh doanh'],\r\n    travel: ['Travel', 'Du lịch'],\r\n    food: ['Food', 'Ẩm thực'],\r\n    health: ['Health', 'Sức khỏe'],\r\n    education: ['Education', 'Giáo dục'],\r\n    sports: ['Sports', 'Thể thao'],\r\n    entertainment: ['Entertainment', 'Giải trí'],\r\n    science: ['Science', 'Khoa học'],\r\n    art: ['Art', 'Nghệ thuật'],\r\n    music: ['Music', 'Âm nhạc'],\r\n    literature: ['Literature', 'Văn học'],\r\n    politics: ['Politics', 'Chính trị'],\r\n    environment: ['Environment', 'Môi trường'],\r\n    fashion: ['Fashion', 'Thời trang'],\r\n    finance: ['Finance', 'Tài chính']\r\n  };\r\n  vocabularies.value.forEach(vocab => {\r\n    for (const key of categoryKeys) {\r\n      if (\r\n        vocab.category === key ||\r\n        translationMap[key].includes(vocab.category)\r\n      ) {\r\n        vocab.category = key;\r\n        break;\r\n      }\r\n    }\r\n  });\r\n  saveToLocalStorage();\r\n}\r\n\r\n// Initialize immediately if in browser environment\r\nif (typeof window !== 'undefined') {\r\n  loadFromLocalStorage()\r\n  normalizeCategoryKeys()\r\n}\r\n\r\nexport function useVocabularyStore() {\r\n  // Computed properties\r\n  const allVocabularies = computed(() => vocabularies.value)\r\n  const totalCount = computed(() => vocabularies.value.length)\r\n  \r\n  // Get vocabulary by ID\r\n  const getVocabularyById = (id: number | string): Vocabulary | undefined => {\r\n    return vocabularies.value.find(vocab => vocab.id === Number(id))\r\n  }\r\n  \r\n  // Add new vocabulary\r\n  const addVocabulary = (vocabularyData: Omit<Vocabulary, 'id'> & { createdAt?: string }): Vocabulary => {\r\n    const newVocabulary: Vocabulary = {\r\n      ...vocabularyData,\r\n      id: nextId++,\r\n      createdAt: vocabularyData.createdAt || new Date().toISOString()\r\n    }\r\n    \r\n    vocabularies.value.unshift(newVocabulary) // Add to beginning of array\r\n    \r\n    // Save to localStorage for persistence\r\n    saveToLocalStorage()\r\n    \r\n    return newVocabulary\r\n  }\r\n  \r\n  // Update vocabulary\r\n  const updateVocabulary = (id: number, updates: Partial<Vocabulary>): boolean => {\r\n    const index = vocabularies.value.findIndex(vocab => vocab.id === id)\r\n    if (index !== -1) {\r\n      const existingVocab = vocabularies.value[index];\r\n      vocabularies.value[index] = {\r\n        ...existingVocab,\r\n        ...updates,\r\n        synonyms: updates.synonyms !== undefined ? updates.synonyms : existingVocab.synonyms,\r\n        antonyms: updates.antonyms !== undefined ? updates.antonyms : existingVocab.antonyms,\r\n        updatedAt: new Date().toISOString()\r\n      }\r\n      \r\n      saveToLocalStorage()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  \r\n  // Delete vocabulary\r\n  const deleteVocabulary = (id: number): boolean => {\r\n    const index = vocabularies.value.findIndex(vocab => vocab.id === id)\r\n    if (index !== -1) {\r\n      vocabularies.value.splice(index, 1)\r\n      saveToLocalStorage()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  \r\n  // Import vocabularies (merge with existing)\r\n  const importVocabularies = (newVocabularies: Vocabulary[]): boolean => {\r\n    try {\r\n      let importedCount = 0\r\n      let updatedCount = 0\r\n      \r\n      newVocabularies.forEach((importedVocab) => {\r\n        // Check if vocabulary already exists (by word, case-insensitive)\r\n        const existingIndex = vocabularies.value.findIndex(\r\n          vocab => vocab.word.toLowerCase() === importedVocab.word.toLowerCase()\r\n        )\r\n        \r\n        if (existingIndex !== -1) {\r\n          // Update existing vocabulary\r\n          const existingVocab = vocabularies.value[existingIndex]\r\n          vocabularies.value[existingIndex] = {\r\n            ...existingVocab, // Keep original id and createdAt\r\n            ...importedVocab, // Override with imported data\r\n            id: existingVocab.id, // Preserve original ID\r\n            createdAt: existingVocab.createdAt, // Preserve original creation date\r\n            updatedAt: new Date().toISOString() // Update modification time\r\n          }\r\n          updatedCount++\r\n        } else {\r\n          // Add new vocabulary\r\n          const newVocab = {\r\n            ...importedVocab,\r\n            id: nextId++,\r\n            createdAt: importedVocab.createdAt || new Date().toISOString(),\r\n            updatedAt: new Date().toISOString()\r\n          }\r\n          vocabularies.value.unshift(newVocab) // Add to beginning\r\n          importedCount++\r\n        }\r\n      })\r\n      \r\n      // Save to localStorage\r\n      saveToLocalStorage()\r\n      \r\n      console.log(`Import completed: ${importedCount} new vocabularies added, ${updatedCount} existing vocabularies updated`)\r\n      return true\r\n    } catch (error) {\r\n      console.error('Error importing vocabularies:', error)\r\n      return false\r\n    }\r\n  }\r\n  \r\n  // Filter vocabularies\r\n  const filterVocabularies = (filters: {\r\n    search?: string\r\n    category?: string\r\n    level?: string\r\n  }) => {\r\n    return computed(() => {\r\n      return vocabularies.value.filter(vocab => {\r\n        const matchesSearch = !filters.search || \r\n          vocab.word.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n          vocab.meaning.toLowerCase().includes(filters.search.toLowerCase())\r\n        \r\n        const matchesCategory = !filters.category || vocab.category === filters.category\r\n        const matchesLevel = !filters.level || vocab.level === filters.level\r\n        \r\n        return matchesSearch && matchesCategory && matchesLevel\r\n      })\r\n    })\r\n  }\r\n  \r\n  // Get categories (including custom topics)\r\n  const getCategories = computed(() => {\r\n    // Define the standard category keys - ALWAYS include all 16 built-in topics\r\n    const standardCategories = [\r\n      'technology', 'business', 'travel', 'food', 'health', 'education', 'sports', 'entertainment',\r\n      'science', 'art', 'music', 'literature', 'politics', 'environment', 'fashion', 'finance'\r\n    ]\r\n    \r\n    // Use reactive custom topics - this will trigger reactivity when topics change\r\n    const customTopicKeys = customTopics.value.map(topic => topic.key)\r\n    \r\n    // Get unique categories from vocabularies that are not in standard or custom\r\n    const usedCategories = new Set(vocabularies.value.map(vocab => vocab.category))\r\n    const additionalCategories = Array.from(usedCategories).filter(cat => \r\n      !standardCategories.includes(cat) && !customTopicKeys.includes(cat)\r\n    )\r\n    \r\n    // Always return ALL standard categories + custom topics + any additional ones\r\n    return [...standardCategories, ...customTopicKeys, ...additionalCategories].sort()\r\n  })\r\n  \r\n  // Get category usage count for topic manager\r\n  const getCategoryUsage = computed(() => {\r\n    const usage: Record<string, number> = {}\r\n    vocabularies.value.forEach(vocab => {\r\n      usage[vocab.category] = (usage[vocab.category] || 0) + 1\r\n    })\r\n    return usage\r\n  })\r\n  \r\n  // Get levels\r\n  const getLevels = computed(() => {\r\n    const levels = new Set(vocabularies.value.map(vocab => vocab.level))\r\n    return Array.from(levels).sort()\r\n  })\r\n  \r\n  // Toggle favorite status\r\n  const toggleFavorite = (id: number): boolean => {\r\n    const index = vocabularies.value.findIndex(vocab => vocab.id === id)\r\n    if (index !== -1) {\r\n      vocabularies.value[index] = {\r\n        ...vocabularies.value[index],\r\n        favorite: !vocabularies.value[index].favorite,\r\n        updatedAt: new Date().toISOString()\r\n      }\r\n      \r\n      saveToLocalStorage()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  \r\n  // Get favorite vocabularies\r\n  const favoriteVocabularies = computed(() => {\r\n    return vocabularies.value.filter(vocab => vocab.favorite)\r\n  })\r\n  \r\n  // Clear all vocabularies\r\n  const clearAllVocabularies = (): boolean => {\r\n    try {\r\n      vocabularies.value = []\r\n      nextId = 1\r\n      saveToLocalStorage()\r\n      console.log('All vocabularies cleared successfully')\r\n      return true\r\n    } catch (error) {\r\n      console.error('Error clearing all vocabularies:', error)\r\n      return false\r\n    }\r\n  }\r\n  \r\n  // Initialize store - ensure data is loaded\r\n  const initializeStore = () => {\r\n    if (!isInitialized) {\r\n      loadFromLocalStorage()\r\n    }\r\n    return isStoreReady\r\n  }\r\n  \r\n  // Functions to manage custom topics reactivity\r\n  const refreshCustomTopics = () => {\r\n    loadCustomTopics()\r\n  }\r\n  \r\n  const addCustomTopic = (topic: {key: string, vi: string, en: string}) => {\r\n    // Check if topic already exists to avoid duplicates\r\n    const existingTopic = customTopics.value.find(t => t.key === topic.key)\r\n    if (!existingTopic) {\r\n      customTopics.value.push(topic)\r\n      saveToLocalStorage()\r\n    }\r\n  }\r\n  \r\n  const updateCustomTopic = (oldKey: string, topic: {key: string, vi: string, en: string}) => {\r\n    const index = customTopics.value.findIndex(t => t.key === oldKey)\r\n    if (index !== -1) {\r\n      customTopics.value[index] = topic\r\n      saveToLocalStorage()\r\n    }\r\n  }\r\n  \r\n  const deleteCustomTopic = (key: string) => {\r\n    const index = customTopics.value.findIndex(t => t.key === key)\r\n    if (index !== -1) {\r\n      customTopics.value.splice(index, 1)\r\n      saveToLocalStorage()\r\n    }\r\n  }\r\n\r\n  return {\r\n    // State\r\n    allVocabularies,\r\n    totalCount,\r\n    favoriteVocabularies,\r\n    isStoreReady,\r\n    \r\n    // Getters\r\n    getVocabularyById,\r\n    getCategories,\r\n    getLevels,\r\n    getCategoryUsage,\r\n    \r\n    // Actions\r\n    addVocabulary,\r\n    updateVocabulary,\r\n    deleteVocabulary,\r\n    clearAllVocabularies,\r\n    importVocabularies,\r\n    toggleFavorite,\r\n    filterVocabularies,\r\n    initializeStore,\r\n    \r\n    // Utils\r\n    saveToLocalStorage,\r\n    \r\n    // Custom topics management\r\n    customTopics,\r\n    refreshCustomTopics,\r\n    addCustomTopic,\r\n    updateCustomTopic,\r\n    deleteCustomTopic\r\n  }\r\n}\r\n"],"names":[],"mappings":";AAuBA,MAAM,eAAe,IAAkB,EAAE;AACzC,IAAI,SAAS;AACb,IAAI,gBAAgB;AAGpB,MAAM,eAAe,IAAI,KAAK;AAG9B,MAAM,eAAe,IAA6C,EAAE;AAGpE,MAAM,mBAAmB,MAAM;AAC7B,MAAI;AACF,UAAM,QAAQ,aAAa,QAAQ,cAAc;AACjD,QAAI,OAAO;AACT,YAAM,eAAe,KAAK,MAAM,KAAK;AACrC,UAAI,MAAM,QAAQ,YAAY,GAAG;AAC/B,qBAAa,QAAQ;AAAA,MACvB;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,gCAAgC,KAAK;AACnD,iBAAa,QAAQ,CAAA;AAAA,EACvB;AACF;AAGA,MAAM,uBAAuB,MAAM;AACjC,MAAI;AACF,UAAM,QAAQ,aAAa,QAAQ,cAAc;AACjD,UAAM,cAAc,aAAa,QAAQ,aAAa;AAEtD,QAAI,OAAO;AACT,YAAM,eAAe,KAAK,MAAM,KAAK;AACrC,UAAI,MAAM,QAAQ,YAAY,GAAG;AAC/B,qBAAa,QAAQ;AAAA,MACvB;AAAA,IACF;AAEA,QAAI,aAAa;AACf,eAAS,SAAS,aAAa,EAAE,KAAK;AAAA,IACxC;AAGA,qBAAA;AAEA,oBAAgB;AAChB,iBAAa,QAAQ;AAAA,EACvB,SAAS,OAAO;AACd,YAAQ,MAAM,iDAAiD,KAAK;AACpE,oBAAgB;AAChB,iBAAa,QAAQ;AAAA,EACvB;AACF;AAGA,MAAM,qBAAqB,MAAM;AAC/B,MAAI;AACF,iBAAa,QAAQ,gBAAgB,KAAK,UAAU,aAAa,KAAK,CAAC;AACvE,iBAAa,QAAQ,eAAe,OAAO,SAAA,CAAU;AAErD,iBAAa,QAAQ,gBAAgB,KAAK,UAAU,aAAa,KAAK,CAAC;AAAA,EACzE,SAAS,OAAO;AACd,YAAQ,MAAM,sCAAsC,KAAK;AAAA,EAC3D;AACF;AAEA,SAAS,wBAAwB;AAC/B,QAAM,eAAe;AAAA,IACnB;AAAA,IAAc;AAAA,IAAY;AAAA,IAAU;AAAA,IAAQ;AAAA,IAAU;AAAA,IAAa;AAAA,IAAU;AAAA,IAC7E;AAAA,IAAW;AAAA,IAAO;AAAA,IAAS;AAAA,IAAc;AAAA,IAAY;AAAA,IAAe;AAAA,IAAW;AAAA,EAAA;AAGjF,QAAM,iBAA8C;AAAA,IAClD,YAAY,CAAC,cAAc,WAAW;AAAA,IACtC,UAAU,CAAC,YAAY,YAAY;AAAA,IACnC,QAAQ,CAAC,UAAU,SAAS;AAAA,IAC5B,MAAM,CAAC,QAAQ,SAAS;AAAA,IACxB,QAAQ,CAAC,UAAU,UAAU;AAAA,IAC7B,WAAW,CAAC,aAAa,UAAU;AAAA,IACnC,QAAQ,CAAC,UAAU,UAAU;AAAA,IAC7B,eAAe,CAAC,iBAAiB,UAAU;AAAA,IAC3C,SAAS,CAAC,WAAW,UAAU;AAAA,IAC/B,KAAK,CAAC,OAAO,YAAY;AAAA,IACzB,OAAO,CAAC,SAAS,SAAS;AAAA,IAC1B,YAAY,CAAC,cAAc,SAAS;AAAA,IACpC,UAAU,CAAC,YAAY,WAAW;AAAA,IAClC,aAAa,CAAC,eAAe,YAAY;AAAA,IACzC,SAAS,CAAC,WAAW,YAAY;AAAA,IACjC,SAAS,CAAC,WAAW,WAAW;AAAA,EAAA;AAElC,eAAa,MAAM,QAAQ,CAAA,UAAS;AAClC,eAAW,OAAO,cAAc;AAC9B,UACE,MAAM,aAAa,OACnB,eAAe,GAAG,EAAE,SAAS,MAAM,QAAQ,GAC3C;AACA,cAAM,WAAW;AACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACD,qBAAA;AACF;AAGA,IAAI,OAAO,WAAW,aAAa;AACjC,uBAAA;AACA,wBAAA;AACF;AAEO,SAAS,qBAAqB;AAEnC,QAAM,kBAAkB,SAAS,MAAM,aAAa,KAAK;AACzD,QAAM,aAAa,SAAS,MAAM,aAAa,MAAM,MAAM;AAG3D,QAAM,oBAAoB,CAAC,OAAgD;AACzE,WAAO,aAAa,MAAM,KAAK,CAAA,UAAS,MAAM,OAAO,OAAO,EAAE,CAAC;AAAA,EACjE;AAGA,QAAM,gBAAgB,CAAC,mBAAgF;AACrG,UAAM,gBAA4B;AAAA,MAChC,GAAG;AAAA,MACH,IAAI;AAAA,MACJ,WAAW,eAAe,cAAa,oBAAI,KAAA,GAAO,YAAA;AAAA,IAAY;AAGhE,iBAAa,MAAM,QAAQ,aAAa;AAGxC,uBAAA;AAEA,WAAO;AAAA,EACT;AAGA,QAAM,mBAAmB,CAAC,IAAY,YAA0C;AAC9E,UAAM,QAAQ,aAAa,MAAM,UAAU,CAAA,UAAS,MAAM,OAAO,EAAE;AACnE,QAAI,UAAU,IAAI;AAChB,YAAM,gBAAgB,aAAa,MAAM,KAAK;AAC9C,mBAAa,MAAM,KAAK,IAAI;AAAA,QAC1B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,UAAU,QAAQ,aAAa,SAAY,QAAQ,WAAW,cAAc;AAAA,QAC5E,UAAU,QAAQ,aAAa,SAAY,QAAQ,WAAW,cAAc;AAAA,QAC5E,YAAW,oBAAI,KAAA,GAAO,YAAA;AAAA,MAAY;AAGpC,yBAAA;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAGA,QAAM,mBAAmB,CAAC,OAAwB;AAChD,UAAM,QAAQ,aAAa,MAAM,UAAU,CAAA,UAAS,MAAM,OAAO,EAAE;AACnE,QAAI,UAAU,IAAI;AAChB,mBAAa,MAAM,OAAO,OAAO,CAAC;AAClC,yBAAA;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAGA,QAAM,qBAAqB,CAAC,oBAA2C;AACrE,QAAI;AACF,UAAI,gBAAgB;AACpB,UAAI,eAAe;AAEnB,sBAAgB,QAAQ,CAAC,kBAAkB;AAEzC,cAAM,gBAAgB,aAAa,MAAM;AAAA,UACvC,WAAS,MAAM,KAAK,kBAAkB,cAAc,KAAK,YAAA;AAAA,QAAY;AAGvE,YAAI,kBAAkB,IAAI;AAExB,gBAAM,gBAAgB,aAAa,MAAM,aAAa;AACtD,uBAAa,MAAM,aAAa,IAAI;AAAA,YAClC,GAAG;AAAA;AAAA,YACH,GAAG;AAAA;AAAA,YACH,IAAI,cAAc;AAAA;AAAA,YAClB,WAAW,cAAc;AAAA;AAAA,YACzB,YAAW,oBAAI,KAAA,GAAO,YAAA;AAAA;AAAA,UAAY;AAEpC;AAAA,QACF,OAAO;AAEL,gBAAM,WAAW;AAAA,YACf,GAAG;AAAA,YACH,IAAI;AAAA,YACJ,WAAW,cAAc,cAAa,oBAAI,KAAA,GAAO,YAAA;AAAA,YACjD,YAAW,oBAAI,KAAA,GAAO,YAAA;AAAA,UAAY;AAEpC,uBAAa,MAAM,QAAQ,QAAQ;AACnC;AAAA,QACF;AAAA,MACF,CAAC;AAGD,yBAAA;AAEA,cAAQ,IAAI,qBAAqB,aAAa,4BAA4B,YAAY,gCAAgC;AACtH,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,iCAAiC,KAAK;AACpD,aAAO;AAAA,IACT;AAAA,EACF;AAGA,QAAM,qBAAqB,CAAC,YAItB;AACJ,WAAO,SAAS,MAAM;AACpB,aAAO,aAAa,MAAM,OAAO,CAAA,UAAS;AACxC,cAAM,gBAAgB,CAAC,QAAQ,UAC7B,MAAM,KAAK,YAAA,EAAc,SAAS,QAAQ,OAAO,aAAa,KAC9D,MAAM,QAAQ,YAAA,EAAc,SAAS,QAAQ,OAAO,aAAa;AAEnE,cAAM,kBAAkB,CAAC,QAAQ,YAAY,MAAM,aAAa,QAAQ;AACxE,cAAM,eAAe,CAAC,QAAQ,SAAS,MAAM,UAAU,QAAQ;AAE/D,eAAO,iBAAiB,mBAAmB;AAAA,MAC7C,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAGA,QAAM,gBAAgB,SAAS,MAAM;AAEnC,UAAM,qBAAqB;AAAA,MACzB;AAAA,MAAc;AAAA,MAAY;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAa;AAAA,MAAU;AAAA,MAC7E;AAAA,MAAW;AAAA,MAAO;AAAA,MAAS;AAAA,MAAc;AAAA,MAAY;AAAA,MAAe;AAAA,MAAW;AAAA,IAAA;AAIjF,UAAM,kBAAkB,aAAa,MAAM,IAAI,CAAA,UAAS,MAAM,GAAG;AAGjE,UAAM,iBAAiB,IAAI,IAAI,aAAa,MAAM,IAAI,CAAA,UAAS,MAAM,QAAQ,CAAC;AAC9E,UAAM,uBAAuB,MAAM,KAAK,cAAc,EAAE;AAAA,MAAO,CAAA,QAC7D,CAAC,mBAAmB,SAAS,GAAG,KAAK,CAAC,gBAAgB,SAAS,GAAG;AAAA,IAAA;AAIpE,WAAO,CAAC,GAAG,oBAAoB,GAAG,iBAAiB,GAAG,oBAAoB,EAAE,KAAA;AAAA,EAC9E,CAAC;AAGD,QAAM,mBAAmB,SAAS,MAAM;AACtC,UAAM,QAAgC,CAAA;AACtC,iBAAa,MAAM,QAAQ,CAAA,UAAS;AAClC,YAAM,MAAM,QAAQ,KAAK,MAAM,MAAM,QAAQ,KAAK,KAAK;AAAA,IACzD,CAAC;AACD,WAAO;AAAA,EACT,CAAC;AAGD,QAAM,YAAY,SAAS,MAAM;AAC/B,UAAM,SAAS,IAAI,IAAI,aAAa,MAAM,IAAI,CAAA,UAAS,MAAM,KAAK,CAAC;AACnE,WAAO,MAAM,KAAK,MAAM,EAAE,KAAA;AAAA,EAC5B,CAAC;AAGD,QAAM,iBAAiB,CAAC,OAAwB;AAC9C,UAAM,QAAQ,aAAa,MAAM,UAAU,CAAA,UAAS,MAAM,OAAO,EAAE;AACnE,QAAI,UAAU,IAAI;AAChB,mBAAa,MAAM,KAAK,IAAI;AAAA,QAC1B,GAAG,aAAa,MAAM,KAAK;AAAA,QAC3B,UAAU,CAAC,aAAa,MAAM,KAAK,EAAE;AAAA,QACrC,YAAW,oBAAI,KAAA,GAAO,YAAA;AAAA,MAAY;AAGpC,yBAAA;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAGA,QAAM,uBAAuB,SAAS,MAAM;AAC1C,WAAO,aAAa,MAAM,OAAO,CAAA,UAAS,MAAM,QAAQ;AAAA,EAC1D,CAAC;AAGD,QAAM,uBAAuB,MAAe;AAC1C,QAAI;AACF,mBAAa,QAAQ,CAAA;AACrB,eAAS;AACT,yBAAA;AACA,cAAQ,IAAI,uCAAuC;AACnD,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,oCAAoC,KAAK;AACvD,aAAO;AAAA,IACT;AAAA,EACF;AAGA,QAAM,kBAAkB,MAAM;AAC5B,QAAI,CAAC,eAAe;AAClB,2BAAA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAGA,QAAM,sBAAsB,MAAM;AAChC,qBAAA;AAAA,EACF;AAEA,QAAM,iBAAiB,CAAC,UAAiD;AAEvE,UAAM,gBAAgB,aAAa,MAAM,KAAK,OAAK,EAAE,QAAQ,MAAM,GAAG;AACtE,QAAI,CAAC,eAAe;AAClB,mBAAa,MAAM,KAAK,KAAK;AAC7B,yBAAA;AAAA,IACF;AAAA,EACF;AAEA,QAAM,oBAAoB,CAAC,QAAgB,UAAiD;AAC1F,UAAM,QAAQ,aAAa,MAAM,UAAU,CAAA,MAAK,EAAE,QAAQ,MAAM;AAChE,QAAI,UAAU,IAAI;AAChB,mBAAa,MAAM,KAAK,IAAI;AAC5B,yBAAA;AAAA,IACF;AAAA,EACF;AAEA,QAAM,oBAAoB,CAAC,QAAgB;AACzC,UAAM,QAAQ,aAAa,MAAM,UAAU,CAAA,MAAK,EAAE,QAAQ,GAAG;AAC7D,QAAI,UAAU,IAAI;AAChB,mBAAa,MAAM,OAAO,OAAO,CAAC;AAClC,yBAAA;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}