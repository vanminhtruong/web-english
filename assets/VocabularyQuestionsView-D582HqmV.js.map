{"version":3,"mappings":"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","names":["_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_unref","_Fragment","_renderList","_normalizeClass","_createBlock"],"ignoreList":[],"sources":["../../src/views/vocabulary/VocabularyQuestionsView.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-[#0a0a0a] dark:to-[#0f0f0f] relative overflow-x-hidden\">\n    <!-- Animated Background Elements -->\n    <div class=\"absolute inset-0 overflow-hidden pointer-events-none z-0\">\n      <div class=\"floating-shapes\">\n        <div class=\"absolute top-20 left-10 w-64 h-64 bg-blue-300 dark:bg-blue-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob\"></div>\n        <div class=\"absolute top-40 right-10 w-72 h-72 bg-purple-300 dark:bg-purple-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-2000\"></div>\n        <div class=\"absolute -bottom-8 left-20 w-80 h-80 bg-pink-300 dark:bg-pink-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-30 animate-blob animation-delay-4000\"></div>\n        <div class=\"hidden sm:block absolute top-10 left-1/2 -translate-x-1/2 w-40 h-40 bg-cyan-300 dark:bg-cyan-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-1000\"></div>\n        <div class=\"hidden sm:block absolute bottom-24 right-24 w-52 h-52 bg-indigo-300 dark:bg-indigo-500 rounded-full mix-blend-multiply dark:mix-blend-normal filter blur-xl opacity-25 animate-blob animation-delay-3000\"></div>\n      </div>\n    </div>\n    \n    <!-- Header -->\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto px-2 xs:px-3 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 pt-3 sm:pt-6\">\n      <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6 mb-3 xs:mb-4 sm:mb-6\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <div class=\"flex items-center\">\n            <div class=\"animate-pulse-slow\">\n              <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full mr-2.5\"></div>\n            </div>\n            <div>\n              <h1 class=\"text-lg sm:text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent mb-2\">\n                {{ t('vocabulary.questions.title', 'Question Manager') }}\n              </h1>\n              <p class=\"text-sm sm:text-base text-gray-600 dark:text-gray-300\">\n                {{ t('vocabulary.questions.description', 'Create and manage questions based on your vocabulary words') }}\n              </p>\n            </div>\n          </div>\n          <button\n            @click=\"openCreateDialog\"\n            class=\"px-4 sm:px-6 py-2 sm:py-3 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-lg font-medium transition-all duration-300 shadow-lg hover:shadow-xl\"\n          >\n            {{ t('vocabulary.questions.addQuestion', 'Add New Question') }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Search and Filters -->\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto py-3 px-2 xs:py-4 xs:px-3 sm:py-6 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 overflow-x-hidden\">\n      <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] mb-3 xs:mb-4 sm:mb-6 p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6\">\n        <div class=\"flex items-center mb-4\">\n          <div class=\"animate-pulse-slow\">\n            <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full mr-2.5\"></div>\n          </div>\n          <h3 class=\"text-base sm:text-lg font-semibold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent\">\n            {{ t('vocabulary.filters.title', 'Filters') }}\n          </h3>\n        </div>\n        <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <!-- Search -->\n          <div>\n            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              {{ t('vocabulary.questions.searchQuestions', 'Search questions...') }}\n            </label>\n            <input\n              v-model=\"searchTerm\"\n              type=\"text\"\n              :placeholder=\"t('vocabulary.questions.searchQuestions', 'Search questions...')\"\n              class=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-bg-mute rounded-lg bg-white/50 dark:bg-[#0a0a0a]/50 backdrop-blur-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 dark:text-white transition-all duration-300\"\n            />\n          </div>\n          \n          <!-- Filter by Vocabulary -->\n          <div>\n            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              {{ t('vocabulary.questions.filterByVocabulary', 'Filter by vocabulary') }}\n            </label>\n            <select\n              v-model=\"selectedVocabulary\"\n              class=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-bg-mute rounded-lg bg-white/50 dark:bg-[#0a0a0a]/50 backdrop-blur-sm text-gray-900 dark:text-white transition-all duration-300\"\n            >\n              <option value=\"\">{{ t('vocabulary.questions.allVocabulary', 'All Vocabulary') }}</option>\n              <option v-for=\"vocab in vocabularyList\" :key=\"vocab.id\" :value=\"vocab.id\">\n                {{ vocab.word }} - {{ vocab.meaning }}\n              </option>\n            </select>\n          </div>\n          \n          <!-- Filter by Type -->\n          <div>\n            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              {{ t('vocabulary.questions.filterByType', 'Filter by type') }}\n            </label>\n            <select\n              v-model=\"selectedType\"\n              class=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-bg-mute rounded-lg bg-white/50 dark:bg-[#0a0a0a]/50 backdrop-blur-sm text-gray-900 dark:text-white transition-all duration-300\"\n            >\n              <option value=\"\">{{ t('vocabulary.questions.allTypes', 'All Types') }}</option>\n              <option value=\"multiple-choice\">{{ t('vocabulary.questions.multipleChoice', 'Multiple Choice') }}</option>\n              <option value=\"fill-blank\">{{ t('vocabulary.questions.fillBlank', 'Fill in the Blank') }}</option>\n              <option value=\"true-false\">{{ t('vocabulary.questions.trueFalse', 'True/False') }}</option>\n              <option value=\"short-answer\">{{ t('vocabulary.questions.shortAnswer', 'Short Answer') }}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Questions List -->\n    <div class=\"relative z-10 max-w-full sm:max-w-full md:max-w-full lg:max-w-7xl mx-auto py-3 px-2 xs:py-4 xs:px-3 sm:py-6 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 overflow-x-hidden\">\n      <div class=\"group bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md shadow-xl hover:shadow-2xl rounded-2xl border border-white/20 dark:border-white/10 transition-all duration-500 hover:scale-[1.005] p-2 xs:p-3 sm:p-4 md:p-5 lg:p-6\">\n        <div class=\"flex items-center mb-4\">\n          <div class=\"animate-pulse-slow\">\n            <div class=\"w-2.5 h-2.5 bg-gradient-to-r from-green-400 to-blue-500 rounded-full mr-2.5\"></div>\n          </div>\n          <h3 class=\"text-base sm:text-lg font-semibold bg-gradient-to-r from-green-600 to-blue-600 dark:from-green-400 dark:to-blue-400 bg-clip-text text-transparent\">\n            {{ t('vocabulary.questions.title', 'Questions List') }}\n          </h3>\n        </div>\n        \n        <div class=\"space-y-4\">\n          <div v-if=\"filteredQuestions.length === 0\" class=\"text-center py-8\">\n            <div class=\"animate-pulse-slow\">\n              <div class=\"w-3 h-3 bg-gradient-to-r from-gray-400 to-gray-500 rounded-full mx-auto mb-3\"></div>\n            </div>\n            <p class=\"text-gray-500 dark:text-gray-400\">\n              {{ t('vocabulary.questions.noQuestions', 'No questions found') }}\n            </p>\n          </div>\n          \n          <div\n            v-for=\"question in filteredQuestions\"\n            :key=\"question.id\"\n            class=\"bg-white/60 dark:bg-[#0a0a0a]/60 backdrop-blur-sm rounded-xl border border-white/20 dark:border-white/10 p-3 sm:p-4 md:p-5 hover:shadow-lg transition-all duration-300 hover:scale-[1.002]\"\n          >\n            <div class=\"flex items-start justify-between\">\n              <div class=\"flex-1\">\n                <div class=\"flex items-center gap-3 mb-3\">\n                  <span class=\"px-2 py-1 text-xs font-medium rounded-full\" :class=\"getTypeColorClass(question.type)\">\n                    {{ getTypeLabel(question.type) }}\n                  </span>\n                  <span v-if=\"question.difficulty\" class=\"px-2 py-1 text-xs font-medium rounded-full\" :class=\"getDifficultyColorClass(question.difficulty)\">\n                    {{ getDifficultyLabel(question.difficulty) }}\n                  </span>\n                  <span v-if=\"question.vocabulary\" class=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {{ question.vocabulary.word }}\n                  </span>\n                </div>\n                \n                <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                  {{ question.question }}\n                </h3>\n                \n                <div v-if=\"question.options && question.type === 'multiple-choice'\" class=\"mb-3\">\n                  <div class=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                    <div\n                      v-for=\"(option, index) in question.options\"\n                      :key=\"index\"\n                      class=\"px-3 py-2 bg-white/50 dark:bg-[#0a0a0a]/50 backdrop-blur-sm rounded border border-gray-200 dark:border-white/10\"\n                      :class=\"{ 'border-green-500 bg-green-50/50 dark:bg-green-900/20': index === Number(question.correctAnswer) }\"\n                    >\n                      {{ option }}\n                    </div>\n                  </div>\n                </div>\n                \n                <div v-else class=\"mb-3\">\n                  <p class=\"text-sm text-gray-600 dark:text-gray-400\">\n                    <strong>{{ t('vocabulary.questions.correctAnswer', 'Correct Answer') }}:</strong>\n                    <span class=\"ml-2 px-2 py-1 bg-green-50/50 dark:bg-green-900/20 text-green-700 dark:text-green-400 rounded\">\n                      {{ question.correctAnswer }}\n                    </span>\n                  </p>\n                </div>\n                \n                <div v-if=\"question.explanation\" class=\"mb-3\">\n                  <p class=\"text-sm text-gray-600 dark:text-gray-400\">\n                    <strong>{{ t('vocabulary.questions.explanation', 'Explanation') }}:</strong>\n                    {{ question.explanation }}\n                  </p>\n                </div>\n                \n                <p class=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {{ t('vocabulary.questions.createdAt', 'Created At') }}: {{ formatDate(question.createdAt) }}\n                </p>\n              </div>\n              \n              <div class=\"flex items-center gap-2 ml-4\">\n                <button\n                  @click=\"editQuestion(question)\"\n                  class=\"px-3 py-2 text-blue-600 hover:text-blue-700 hover:bg-blue-50/50 dark:text-blue-400 dark:hover:text-blue-300 dark:hover:bg-blue-900/20 rounded-lg transition-all duration-300\"\n                >\n                  {{ t('common.edit', 'Edit') }}\n                </button>\n                <button\n                  @click=\"deleteQuestion(question)\"\n                  class=\"px-3 py-2 text-red-600 hover:text-red-700 hover:bg-red-50/50 dark:text-red-400 dark:hover:text-red-300 dark:hover:bg-red-900/20 rounded-lg transition-all duration-300\"\n                >\n                  {{ t('common.delete', 'Delete') }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Create/Edit Question Dialog -->\n    <QuestionFormDialog\n      v-if=\"showCreateDialog || showEditDialog\"\n      :show=\"showCreateDialog || showEditDialog\"\n      :question=\"currentQuestion\"\n      :vocabulary-list=\"vocabularyList\"\n      @close=\"closeDialog\"\n      @save=\"saveQuestion\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted, defineAsyncComponent } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useVocabularyStore } from '../../composables/useVocabularyStore'\n\nconst QuestionFormDialog = defineAsyncComponent(() => import('./components/QuestionFormDialog.vue'))\n\ninterface Question {\n  id: string\n  vocabularyId: string\n  vocabulary?: {\n    id: string\n    word: string\n  }\n  question: string\n  type: 'multiple-choice' | 'fill-blank' | 'true-false' | 'short-answer'\n  options?: string[]\n  correctAnswer: string\n  difficulty?: 'easy' | 'medium' | 'hard'\n  explanation?: string\n  createdAt: string\n  updatedAt: string\n}\n\nconst { t } = useI18n()\nconst vocabularyStore = useVocabularyStore()\n\n// State\nconst questions = ref<Question[]>([])\nconst showCreateDialog = ref(false)\nconst showEditDialog = ref(false)\nconst currentQuestion = ref<Question | null>(null)\nconst searchTerm = ref('')\nconst selectedVocabulary = ref('')\nconst selectedType = ref('')\n\n// Computed\nconst vocabularyList = computed(() => vocabularyStore.allVocabularies.value.map(v => ({ id: v.id.toString(), word: v.word, meaning: v.meaning })))\n\nconst filteredQuestions = computed(() => {\n  let filtered = questions.value\n\n  if (searchTerm.value) {\n    const term = searchTerm.value.toLowerCase()\n    filtered = filtered.filter(q => \n      q.question.toLowerCase().includes(term) ||\n      q.vocabulary?.word.toLowerCase().includes(term)\n    )\n  }\n\n  if (selectedVocabulary.value) {\n    filtered = filtered.filter(q => q.vocabularyId === selectedVocabulary.value)\n  }\n\n  if (selectedType.value) {\n    filtered = filtered.filter(q => q.type === selectedType.value)\n  }\n\n  return filtered\n})\n\n// Methods\nconst loadQuestions = () => {\n  const stored = localStorage.getItem('vocabulary-questions')\n  if (stored) {\n    questions.value = JSON.parse(stored)\n    // Populate vocabulary info\n    questions.value.forEach(question => {\n      const vocab = vocabularyList.value.find(v => v.id === question.vocabularyId)\n      if (vocab) {\n        question.vocabulary = { id: vocab.id, word: vocab.word }\n      }\n    })\n  }\n}\n\nconst saveQuestionsToStorage = () => {\n  localStorage.setItem('vocabulary-questions', JSON.stringify(questions.value))\n}\n\nconst editQuestion = (question: Question) => {\n  currentQuestion.value = { ...question }\n  showEditDialog.value = true\n}\n\nconst deleteQuestion = (question: Question) => {\n  if (confirm(t('vocabulary.questions.confirmDelete', 'Are you sure you want to delete this question?'))) {\n    questions.value = questions.value.filter(q => q.id !== question.id)\n    saveQuestionsToStorage()\n  }\n}\n\nconst saveQuestion = (questionData: Partial<Question>) => {\n  if (currentQuestion.value && showEditDialog.value) {\n    // Update existing question\n    const index = questions.value.findIndex(q => q.id === currentQuestion.value!.id)\n    if (index !== -1) {\n      questions.value[index] = {\n        ...questions.value[index],\n        vocabularyId: questionData.vocabularyId || questions.value[index].vocabularyId,\n        question: questionData.question || questions.value[index].question,\n        type: questionData.type || questions.value[index].type,\n        options: questionData.options || questions.value[index].options,\n        correctAnswer: questionData.correctAnswer || questions.value[index].correctAnswer,\n        difficulty: questionData.difficulty || questions.value[index].difficulty,\n        explanation: questionData.explanation || questions.value[index].explanation,\n        updatedAt: new Date().toISOString()\n      }\n      // Update vocabulary info\n      const vocab = vocabularyList.value.find(v => v.id === questions.value[index].vocabularyId)\n      if (vocab) {\n        questions.value[index].vocabulary = { id: vocab.id, word: vocab.word }\n      }\n    }\n  } else {\n    // Create new question\n    const newQuestion: Question = {\n      id: Date.now().toString(),\n      vocabularyId: questionData.vocabularyId!,\n      question: questionData.question!,\n      type: questionData.type!,\n      options: questionData.options,\n      correctAnswer: questionData.correctAnswer!,\n      difficulty: questionData.difficulty || 'medium',\n      explanation: questionData.explanation,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n    // Add vocabulary info\n    const vocab = vocabularyList.value.find(v => v.id === newQuestion.vocabularyId)\n    if (vocab) {\n      newQuestion.vocabulary = { id: vocab.id, word: vocab.word }\n    }\n    questions.value.push(newQuestion)\n  }\n  \n  saveQuestionsToStorage()\n  closeDialog()\n}\n\nconst openCreateDialog = () => {\n  currentQuestion.value = null\n  showCreateDialog.value = true\n}\n\nconst closeDialog = () => {\n  showCreateDialog.value = false\n  showEditDialog.value = false\n  currentQuestion.value = null\n}\n\nconst getTypeLabel = (type: string) => {\n  const labels = {\n    'multiple-choice': t('vocabulary.questions.types.multipleChoice', 'Multiple Choice'),\n    'fill-blank': t('vocabulary.questions.types.fillBlank', 'Fill in the Blank'),\n    'true-false': t('vocabulary.questions.types.trueFalse', 'True/False'),\n    'short-answer': t('vocabulary.questions.types.shortAnswer', 'Short Answer')\n  }\n  return labels[type as keyof typeof labels] || type\n}\n\nconst getTypeColorClass = (type: string) => {\n  const classes = {\n    'multiple-choice': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',\n    'fill-blank': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',\n    'true-false': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',\n    'short-answer': 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300'\n  }\n  return classes[type as keyof typeof classes] || 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n}\n\nconst getDifficultyLabel = (difficulty: string | undefined) => {\n  if (!difficulty) return ''\n  \n  const labels = {\n    'easy': t('common.easy', 'Easy'),\n    'medium': t('vocabulary.questions.difficulty.medium', 'Medium'),\n    'hard': t('common.difficult', 'Difficult')\n  }\n  return labels[difficulty as keyof typeof labels] || difficulty\n}\n\nconst getTypeClass = getTypeColorClass\n\nconst getDifficultyClass = (difficulty: string) => {\n  const classes = {\n    'easy': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',\n    'medium': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',\n    'hard': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'\n  }\n  return classes[difficulty as keyof typeof classes] || 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n}\n\nconst getDifficultyColorClass = (difficulty: string) => {\n  const classes = {\n    'easy': 'text-green-600 dark:text-green-400',\n    'medium': 'text-yellow-600 dark:text-yellow-400',\n    'hard': 'text-red-600 dark:text-red-400'\n  }\n  return classes[difficulty as keyof typeof classes] || 'text-gray-600 dark:text-gray-400'\n}\n\nconst formatDate = (dateString: string) => {\n  return new Date(dateString).toLocaleDateString()\n}\n\nonMounted(() => {\n  loadQuestions()\n})\n</script>\n"],"file":"assets/VocabularyQuestionsView-D582HqmV.js"}