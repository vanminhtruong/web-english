{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA,UAAM,sBAAsB,qBAAqB,0BAAM,OAAO,mCAA2B,oDAAC;AAE1F,UAAM,EAAE,MAAM;AAGd,UAAM,kBAAkB,IAAI,KAAK;AACjC,UAAM,eAAe,IAAI,KAAK;AAC9B,UAAM,kBAAkB,IAAI,KAAK;AACjC,UAAM,iBAAiB;AAkBvB,UAAM,QAAQ;AAEd,UAAM,OAAO;AAIb,UAAM,mBAAmB,MAAM;AAC7B,aAAO,MAAM,YAAY,QAAQ,MAAM,KAAK,EAAE,CAAC,EAAE;AAAA,IACnD;AAGA,UAAM,qBAAqB,CAAC,WAAmB;AAC7C,UAAI,MAAM,aAAc;AAGxB,WAAK,iBAAiB,MAAM;AAG5B,YAAM,gBAAgB;AACtB,sBAAgB,QAAQ,WAAW;AAGnC,iBAAW,MAAM;AACf,wBAAgB,QAAQ;AACxB,qBAAa,QAAQ;AAAA,MACvB,GAAG,GAAG;AAAA,IACR;AAGA,UAAM,gBAAgB,MAAM;AAC1B,sBAAgB,QAAQ;AACxB,mBAAa,QAAQ;AAAA,IACvB;;0BA7IEA,mBA0EM;AAAA,QAzEJ,OAAM;AAAA,QACL,gDAAD;AAAA,WAAa;AAAA,QACZ,+CAAD;AAAA,WAAY;AAAA,QACX,uDAAD;AAAA,WAAoB;AAAA;QAEpBC,gBA0DM,OA1DN,YA0DM;AAAA,UAxDJA,gBAIM,OAJN,YAIM;AAAA,YAHJA,gBAEO,QAFP,YAEOC,gBADFC,oBAAaC,iBAAY,QAAQ;AAAA;UAKxCH,gBAIM,OAJN,YAIM;AAAA,YAHJA,gBAAoH,MAApH,YAAoHC,gBAAxBE,iBAAY,IAAI;AAAA,YAC5GH,gBAAuF,KAAvF,YAAuFC,gBAAhCE,iBAAY,aAAa;AAAA,YAChFH,gBAAyJ,KAAzJ,YAAyJC,gBAArEC,MAAA,GAAC;AAAA;UAIvFF,gBAyCM,OAzCN,YAyCM;AAAA,YAxCJA,gBAuCM,OAvCN,YAuCM;AAAA,cAtCJA,gBAqCM,OArCN,aAqCM;AAAA,iBApCJI,UAAA,OAAAL,mBAmCSM,UAAA,MAAAC,WAlCmBC,kBAAW,CAA7B,QAAQ,UAAK;sCADvBR,mBAmCS;AAAA,oBAjCN,KAAK;AAAA,oBACL,SAAK,YAAE,mBAAmB,MAAM;AAAA,oBAChC,OAAKS,eAAA;AAAA;sBAAsLC,oBAAmC,WAAW,kIAAiL,WAAWC;;oBAUra,UAAUD;AAAAA;oBAGXT,gBAEO,QAFP,aAEOC,gBADF,OAAO,kBAAkB,KAAK;AAAA,oBAInCD,gBAAkD,QAAlD,aAAkDC,gBAAhB,MAAM;AAAA,oBAG5BQ,qBAAgB,WAAW,sBAAvCL,UAAA,GAAAL,mBAIO,QAJP,aAIO;AAAA,sBAHLC,gBAEM;AAAA,wBAFD,OAAM;AAAA,wBAAU,MAAK;AAAA,wBAAe,SAAQ;AAAA;wBAC/CA,gBAAsK;AAAA,0BAAhK,aAAU;AAAA,0BAAU,GAAE;AAAA,0BAAqH,aAAU;AAAA;;2BAG9IS,qBAAgB,WAAWC,uBAAkB,WAAW,sBAAzEN,aAAAL,mBAIO,QAJP,aAIO;AAAA,sBAHLC,gBAEM;AAAA,wBAFD,OAAM;AAAA,wBAAU,MAAK;AAAA,wBAAe,SAAQ;AAAA;wBAC/CA,gBAAsP;AAAA,0BAAhP,aAAU;AAAA,0BAAU,GAAE;AAAA,0BAAqM,aAAU;AAAA;;;;;;;;;QAUzPW,YAMET,MAAA;AAAA,mBALI;AAAA,UAAJ,KAAI;AAAA,UACH,oBAAkB;AAAA,UAClB,iBAAe;AAAA,UACf,cAAY;AAAA,UACZ,kBAAiB;AAAA","names":["_createElementBlock","_createElementVNode","_toDisplayString","_unref","currentCard","_openBlock","_Fragment","_renderList","quizOptions","_normalizeClass","quizAnswered","selectedAnswer","_createVNode"],"ignoreList":[],"sources":["../../src/views/practice/components/FlashcardQuiz.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-800 p-8 h-96 select-none\"\r\n    @copy.prevent\r\n    @cut.prevent\r\n    @contextmenu.prevent\r\n  >\r\n    <div class=\"h-full flex flex-col\">\r\n      <!-- Header -->\r\n      <div class=\"text-center mb-4\">\r\n        <span class=\"px-4 py-2 bg-yellow-100 dark:bg-gray-800 text-yellow-800 dark:text-yellow-300 text-sm font-medium rounded-full\">\r\n          {{ getTopicName(currentCard.category) }}\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Question -->\r\n      <div class=\"text-center mb-4 flex-shrink-0\">\r\n        <h2 class=\"text-xl sm:text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-2\">{{ currentCard.word }}</h2>\r\n        <p class=\"text-sm text-gray-600 dark:text-gray-300\">{{ currentCard.pronunciation }}</p>\r\n        <p class=\"text-xs sm:text-sm md:text-base text-gray-500 dark:text-gray-400 mt-1\">{{ t('flashcard.quiz.instruction', 'Choose the correct meaning:') }}</p>\r\n      </div>\r\n\r\n      <!-- Options -->\r\n      <div class=\"flex-1 flex flex-col justify-center min-h-0\">\r\n        <div class=\"flex items-center justify-center\">\r\n          <div class=\"grid grid-cols-2 gap-3 w-full max-w-lg\">\r\n            <button\r\n              v-for=\"(option, index) in quizOptions\"\r\n              :key=\"index\"\r\n              @click=\"handleSelectAnswer(option)\"\r\n              :class=\"[\r\n                'relative p-4 text-center rounded-lg border-2 transition-all duration-200 font-semibold text-sm min-h-[60px] flex items-center justify-center',\r\n                quizAnswered\r\n                  ? (option === getCorrectAnswer()\r\n                      ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300 border-green-300 dark:border-green-700'\r\n                      : (option === selectedAnswer\r\n                          ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300 border-red-300 dark:border-red-700'\r\n                          : 'bg-white dark:bg-gray-custom text-gray-900 dark:text-white border-gray-300 dark:border-gray-custom/60'))\r\n                  : 'bg-white dark:bg-gray-custom text-gray-900 dark:text-white border-gray-300 dark:border-gray-custom/60 hover:shadow-sm hover:scale-[1.01] dark:hover:bg-white/5'\r\n              ]\"\r\n              :disabled=\"quizAnswered\"\r\n            >\r\n              <!-- Letter badge -->\r\n              <span class=\"absolute top-2 left-2 w-6 h-6 rounded-full text-xs font-semibold flex items-center justify-center bg-gray-200 text-gray-700 dark:bg-white/10 dark:text-white/80\">\r\n                {{ String.fromCharCode(65 + index) }}\r\n              </span>\r\n\r\n              <!-- Answer text -->\r\n              <span class=\"text-center px-6\">{{ option }}</span>\r\n\r\n              <!-- Result icon -->\r\n              <span v-if=\"quizAnswered && option === getCorrectAnswer()\" class=\"absolute top-2 right-2 text-green-500\">\r\n                <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\"/>\r\n                </svg>\r\n              </span>\r\n              <span v-else-if=\"quizAnswered && option === selectedAnswer && option !== getCorrectAnswer()\" class=\"absolute top-2 right-2 text-red-500\">\r\n                <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"/>\r\n                </svg>\r\n              </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Firework Sound Effect -->\r\n    <FireworkSoundEffect \r\n      ref=\"fireworkEffect\"\r\n      :trigger-firework=\"triggerFirework\"\r\n      :trigger-sound=\"triggerSound\"\r\n      :is-correct=\"isCorrectAnswer\"\r\n      @effect-complete=\"resetTriggers\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, defineAsyncComponent } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { getTopicName } from '../../../utils/topicUtils'\r\n\r\n// Import component using defineAsyncComponent to avoid \"has no default export\" error\r\nconst FireworkSoundEffect = defineAsyncComponent(() => import('./FireworkSoundEffect.vue'))\r\n\r\nconst { t } = useI18n()\r\n\r\n// Effect triggers\r\nconst triggerFirework = ref(false)\r\nconst triggerSound = ref(false)\r\nconst isCorrectAnswer = ref(false)\r\nconst fireworkEffect = ref()\r\n\r\ninterface FlashcardData {\r\n  word: string\r\n  meaning: string\r\n  pronunciation: string\r\n  category: string\r\n  partOfSpeech?: string\r\n  example?: string\r\n}\r\n\r\ninterface Props {\r\n  currentCard: FlashcardData\r\n  quizOptions: string[]\r\n  selectedAnswer: string | null\r\n  quizAnswered: boolean\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst emit = defineEmits<{\r\n  'select-answer': [answer: string]\r\n}>()\r\n\r\nconst getCorrectAnswer = () => {\r\n  return props.currentCard.meaning.split(' - ')[0].trim()\r\n}\r\n\r\n// Handle answer selection with effects\r\nconst handleSelectAnswer = (answer: string) => {\r\n  if (props.quizAnswered) return\r\n  \r\n  // Emit the answer selection first\r\n  emit('select-answer', answer)\r\n  \r\n  // Determine if answer is correct\r\n  const correctAnswer = getCorrectAnswer()\r\n  isCorrectAnswer.value = answer === correctAnswer\r\n  \r\n  // Trigger effects after a small delay to let the UI update\r\n  setTimeout(() => {\r\n    triggerFirework.value = true\r\n    triggerSound.value = true\r\n  }, 100)\r\n}\r\n\r\n// Reset effect triggers\r\nconst resetTriggers = () => {\r\n  triggerFirework.value = false\r\n  triggerSound.value = false\r\n}\r\n</script>\r\n"],"file":"assets/FlashcardQuiz-CV-8ntwS.js"}