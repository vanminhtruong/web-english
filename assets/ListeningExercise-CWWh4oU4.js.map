{"version":3,"file":"ListeningExercise-CWWh4oU4.js","sources":["../../src/views/grammar/components/ListeningExercise.vue"],"sourcesContent":["<template>\r\n  <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-lg border border-gray-200 dark:border-white/10 p-6\">\r\n    <!-- Listening Controls -->\r\n    <div class=\"mb-8\">\r\n      <div class=\"text-center\">\r\n        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n          {{ tf('grammar.practice.exercises.listening.instruction', 'Listen carefully and answer the questions') }}\r\n        </h3>\r\n        \r\n        <!-- Audio Player -->\r\n        <div class=\"bg-gray-50 dark:bg-[#0a0a0a]/50 rounded-lg p-6 mb-4\">\r\n          <div class=\"flex items-center justify-center space-x-6 mb-4\">\r\n            <!-- Play/Pause Button -->\r\n            <button\r\n              @click=\"togglePlayback\"\r\n              :disabled=\"!audioLoaded\"\r\n              class=\"w-16 h-16 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white rounded-full flex items-center justify-center transition-colors shadow-lg\"\r\n            >\r\n              <svg v-if=\"!isPlaying\" class=\"w-8 h-8 ml-1\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M8 5v14l11-7z\"/>\r\n              </svg>\r\n              <svg v-else class=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\"/>\r\n                <rect x=\"14\" y=\"4\" width=\"4\" height=\"16\"/>\r\n              </svg>\r\n            </button>\r\n            \r\n            <!-- Restart Button -->\r\n            <button\r\n              @click=\"restartAudio\"\r\n              :disabled=\"!audioLoaded\"\r\n              class=\"p-3 bg-gray-300 dark:bg-white/10 hover:bg-gray-400 dark:hover:bg-white/15 disabled:bg-gray-200 dark:disabled:bg-white/5 text-gray-700 dark:text-white/80 rounded-full transition-colors\"\r\n            >\r\n              <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n              </svg>\r\n            </button>\r\n\r\n          </div>\r\n          \r\n          <!-- Progress Bar -->\r\n          <div class=\"mb-4\">\r\n            <div \r\n              class=\"w-full bg-gray-200 dark:bg-white/10 rounded-full h-2 cursor-pointer\"\r\n              @click=\"seekAudio\"\r\n              ref=\"progressBar\"\r\n            >\r\n              <div \r\n                class=\"bg-blue-600 h-2 rounded-full transition-all duration-100\"\r\n                :style=\"{ width: `${progress}%` }\"\r\n              ></div>\r\n            </div>\r\n            <div class=\"flex justify-between text-xs text-gray-500 dark:text-white/60 mt-1\">\r\n              <span>{{ formatTime(currentTime) }}</span>\r\n              <span>{{ formatTime(duration) }}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Play Count Info -->\r\n          <div class=\"flex items-center justify-center space-x-4 text-sm text-gray-600 dark:text-white/60\">\r\n            <div class=\"flex items-center space-x-1\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.536 8.464a5 5 0 010 7.072m-2.036-5.036a2.5 2.5 0 010 3.536M6 10h4l4.5-4.5v9L10 10H6V8z\" />\r\n              </svg>\r\n              <span>{{ tf('grammar.practice.exercises.listening.playsLeft', 'Plays left') }}: {{ playsRemaining }}</span>\r\n            </div>\r\n            <div v-if=\"question.allowNotes\" class=\"flex items-center space-x-1\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n              </svg>\r\n              <span>{{ tf('grammar.practice.exercises.listening.notesAllowed', 'Notes are allowed') }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Loading State -->\r\n        <div v-if=\"!audioLoaded\" class=\"text-gray-500 dark:text-white/60\">\r\n          {{ tf('grammar.practice.exercises.listening.loading', 'Loading') }}...\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Notes Section (if allowed) -->\r\n    <div v-if=\"question.allowNotes\" class=\"mb-6\">\r\n      <label class=\"block text-sm font-medium text-gray-700 dark:text-white/80 mb-2\">\r\n        {{ tf('grammar.practice.exercises.listening.takeNotes', 'Take notes') }}\r\n      </label>\r\n      <textarea\r\n        v-model=\"userNotes\"\r\n        :placeholder=\"tf('grammar.practice.exercises.listening.notesPlaceholder', 'Type your notes here...')\"\r\n        class=\"w-full h-32 px-4 py-2 border border-gray-300 dark:border-white/10 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-[#0a0a0a] text-gray-900 dark:text-white resize-none\"\r\n      ></textarea>\r\n    </div>\r\n\r\n    <!-- Questions Section -->\r\n    <div class=\"space-y-6\">\r\n      <h4 class=\"text-lg font-semibold text-gray-900 dark:text-white border-b border-gray-200 dark:border-white/10 pb-2\">\r\n        {{ tf('grammar.practice.exercises.listening.questions', 'Questions') }}\r\n      </h4>\r\n      \r\n      <!-- Question List -->\r\n      <div class=\"space-y-6\">\r\n        <div\r\n          v-for=\"(q, index) in question.questions\"\r\n          :key=\"index\"\r\n          class=\"border border-gray-200 dark:border-white/10 rounded-lg p-4\"\r\n        >\r\n          <div class=\"mb-4\">\r\n            <h5 class=\"font-medium text-gray-900 dark:text-white mb-2\">\r\n              {{ index + 1 }}. {{ q.question }}\r\n            </h5>\r\n            \r\n            <!-- Multiple Choice -->\r\n            <div v-if=\"q.type === 'multiple-choice'\" class=\"space-y-2\">\r\n              <label\r\n                v-for=\"(option, optionIndex) in q.options\"\r\n                :key=\"optionIndex\"\r\n                :class=\"[\r\n                  'flex items-start space-x-3 p-3 rounded-lg cursor-pointer transition-all',\r\n                  userAnswers[index] === optionIndex\r\n                    ? 'bg-blue-50 dark:bg-blue-900/30 border border-blue-300 dark:border-blue-600'\r\n                    : 'bg-gray-50 dark:bg-[#0a0a0a]/50 hover:bg-gray-100 dark:hover:bg-[#0a0a0a]/70 border border-transparent',\r\n                  showAnswers && optionIndex === q.correctAnswer\r\n                    ? 'bg-green-50 dark:bg-green-900/30 border border-green-300 dark:border-green-600'\r\n                    : '',\r\n                  showAnswers && userAnswers[index] === optionIndex && optionIndex !== q.correctAnswer\r\n                    ? 'bg-red-50 dark:bg-red-900/30 border border-red-300 dark:border-red-600'\r\n                    : ''\r\n                ]\"\r\n              >\r\n                <input\r\n                  type=\"radio\"\r\n                  :name=\"`question-${index}`\"\r\n                  :value=\"optionIndex\"\r\n                  v-model=\"userAnswers[index]\"\r\n                  :disabled=\"showAnswers\"\r\n                  class=\"mt-1\"\r\n                />\r\n                <span class=\"text-gray-900 dark:text-white\">{{ option }}</span>\r\n                \r\n                <!-- Answer icons -->\r\n                <div class=\"ml-auto\">\r\n                  <svg\r\n                    v-if=\"showAnswers && optionIndex === q.correctAnswer\"\r\n                    class=\"w-5 h-5 text-green-600 dark:text-green-400\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\r\n                  </svg>\r\n                  <svg\r\n                    v-else-if=\"showAnswers && userAnswers[index] === optionIndex && optionIndex !== q.correctAnswer\"\r\n                    class=\"w-5 h-5 text-red-600 dark:text-red-400\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n                  </svg>\r\n                </div>\r\n              </label>\r\n            </div>\r\n            \r\n            <!-- Fill in the blank -->\r\n            <div v-else-if=\"q.type === 'fill-blank'\" class=\"space-y-2\">\r\n              <input\r\n                v-model=\"userAnswers[index]\"\r\n                :disabled=\"showAnswers\"\r\n                :placeholder=\"tf('grammar.practice.exercises.listening.fillBlank', 'Type the missing word/phrase')\"\r\n                :class=\"[\r\n                  'w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent',\r\n                  showAnswers\r\n                    ? isAnswerCorrect(index)\r\n                      ? 'border-green-500 bg-green-50 dark:bg-green-900/30'\r\n                      : 'border-red-500 bg-red-50 dark:bg-red-900/30'\r\n                    : 'border-gray-300 dark:border-white/10 bg-white dark:bg-[#0a0a0a]',\r\n                  'text-gray-900 dark:text-white'\r\n                ]\"\r\n              />\r\n              \r\n              <!-- Show correct answer -->\r\n              <div v-if=\"showAnswers && !isAnswerCorrect(index)\" class=\"text-sm text-green-600 dark:text-green-400\">\r\n                {{ tf('grammar.practice.exercises.listening.correctAnswer', 'Correct answer') }}: {{ q.correctAnswer }}\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Ordering/Sequencing -->\r\n            <div v-else-if=\"q.type === 'ordering'\" class=\"space-y-2\">\r\n              <div class=\"text-sm text-gray-600 dark:text-white/60 mb-2\">\r\n                {{ tf('grammar.practice.exercises.listening.dragToOrder', 'Drag to order') }}\r\n              </div>\r\n              <draggable \r\n                v-model=\"userAnswers[index]\" \r\n                :disabled=\"showAnswers\"\r\n                class=\"space-y-2\"\r\n                item-key=\"id\"\r\n              >\r\n                <template #item=\"{ element, index: itemIndex }\">\r\n                  <div \r\n                    :class=\"[\r\n                      'p-3 bg-gray-50 dark:bg-[#0a0a0a] rounded-lg border cursor-move',\r\n                      showAnswers && itemIndex === element.correctPosition\r\n                        ? 'border-green-500 bg-green-50 dark:bg-green-900/30'\r\n                        : showAnswers && itemIndex !== element.correctPosition\r\n                        ? 'border-red-500 bg-red-50 dark:bg-red-900/30'\r\n                        : 'border-gray-200 dark:border-white/10'\r\n                    ]\"\r\n                  >\r\n                    <div class=\"flex items-center space-x-3\">\r\n                      <span class=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-medium\">\r\n                        {{ itemIndex + 1 }}\r\n                      </span>\r\n                      <span class=\"text-gray-900 dark:text-white\">{{ element.text }}</span>\r\n                    </div>\r\n                  </div>\r\n                </template>\r\n              </draggable>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Question explanation -->\r\n          <div v-if=\"showAnswers && q.explanation\" class=\"mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700 rounded-lg\">\r\n            <p class=\"text-sm text-yellow-800 dark:text-yellow-200\">\r\n              <strong>{{ tf('grammar.practice.exercises.explanation', 'Explanation') }}:</strong> {{ q.explanation }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Summary -->\r\n    <div v-if=\"showAnswers\" class=\"mt-8 p-4 bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 rounded-lg\">\r\n      <div class=\"grid grid-cols-3 gap-4 text-center\">\r\n        <div>\r\n          <div class=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{{ correctAnswers }}</div>\r\n          <div class=\"text-sm text-gray-600 dark:text-white/60\">{{ tf('grammar.practice.exercises.listening.correct', 'Correct') }}</div>\r\n        </div>\r\n        <div>\r\n          <div class=\"text-2xl font-bold text-red-600 dark:text-red-400\">{{ incorrectAnswers }}</div>\r\n          <div class=\"text-sm text-gray-600 dark:text-white/60\">{{ tf('grammar.practice.exercises.listening.incorrect', 'Incorrect') }}</div>\r\n        </div>\r\n        <div>\r\n          <div class=\"text-2xl font-bold text-green-600 dark:text-green-400\">{{ accuracy }}%</div>\r\n          <div class=\"text-sm text-gray-600 dark:text-white/60\">{{ tf('grammar.practice.exercises.listening.accuracy', 'Accuracy') }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Action Buttons -->\r\n    <div class=\"flex justify-between items-center mt-8\">\r\n      <div class=\"flex space-x-4\">\r\n        <!-- Transcript button (if available) -->\r\n        <button\r\n          v-if=\"question.transcript && showAnswers\"\r\n          @click=\"showTranscript = !showTranscript\"\r\n          class=\"flex items-center space-x-2 px-4 py-2 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors\"\r\n        >\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n          </svg>\r\n          <span>{{ showTranscript ? tf('grammar.practice.exercises.listening.hideTranscript', 'Hide transcript') : tf('grammar.practice.exercises.listening.showTranscript', 'Show transcript') }}</span>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"flex space-x-4\">\r\n        <!-- Submit/Check Answers -->\r\n        <button\r\n          v-if=\"!showAnswers\"\r\n          @click=\"checkAnswers\"\r\n          :disabled=\"!hasAllAnswers\"\r\n          class=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\r\n        >\r\n          {{ tf('grammar.practice.exercises.checkAnswer', 'Check answer') }}\r\n        </button>\r\n        \r\n        <!-- Next Question -->\r\n        <button\r\n          v-else\r\n          @click=\"nextQuestion\"\r\n          class=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\r\n        >\r\n          {{ questionIndex === totalQuestions - 1 ? tf('grammar.practice.exercises.finish', 'Finish') : tf('grammar.practice.exercises.next', 'Next') }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Transcript Modal -->\r\n    <div v-if=\"showTranscript\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white dark:bg-[#0a0a0a] rounded-xl shadow-2xl border border-gray-200 dark:border-white/10 p-6 max-w-2xl w-full mx-4 max-h-96 overflow-y-auto\">\r\n        <div class=\"flex items-center justify-between mb-4\">\r\n          <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            {{ tf('grammar.practice.exercises.listening.transcript', 'Transcript') }}\r\n          </h3>\r\n          <button\r\n            @click=\"showTranscript = false\"\r\n            class=\"p-2 rounded-lg text-gray-500 dark:text-white/60 hover:text-gray-700 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-white/10 transition-colors\"\r\n          >\r\n            <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <div class=\"prose dark:prose-invert max-w-none\">\r\n          <p class=\"text-gray-800 dark:text-gray-200 leading-relaxed\">\r\n            {{ question.transcript }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { useVoiceStore } from '../../../stores/voiceStore'\r\nimport { VueDraggableNext as draggable } from 'vue-draggable-next'\r\n\r\nconst { t } = useI18n()\r\n// Safe translation with explicit fallback and optional params\r\nconst tf = (key: string, fallback: string, params?: Record<string, any>) => {\r\n  try {\r\n    const translated = t(key as any, params as any)\r\n    return typeof translated === 'string' && translated !== key ? translated : fallback\r\n  } catch {\r\n    return fallback\r\n  }\r\n}\r\nconst { playAudio } = useVoiceStore()\r\n\r\n// YouTube player reference\r\nlet youtubePlayer: any = null\r\nconst isYouTubeAudio = ref(false)\r\nconst youtubeEmbedUrl = ref('')\r\n\r\n// YouTube API type declarations\r\ndeclare global {\r\n  interface Window {\r\n    YT: any\r\n    onYouTubeIframeAPIReady: () => void\r\n  }\r\n}\r\n\r\n// Props\r\ninterface Question {\r\n  question: string\r\n  type: 'multiple-choice' | 'fill-blank' | 'ordering'\r\n  options?: string[]\r\n  correctAnswer: any\r\n  explanation?: string\r\n}\r\n\r\ninterface Props {\r\n  question: {\r\n    id: number\r\n    audioUrl: string\r\n    questions: Question[]\r\n    allowNotes?: boolean\r\n    maxPlays?: number\r\n    transcript?: string\r\n    playbackSpeed?: number\r\n    difficulty?: string\r\n  }\r\n  questionIndex: number\r\n  totalQuestions: number\r\n  difficulty?: string\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\n// Emits\r\nconst emit = defineEmits<{\r\n  answer: [answer: { isCorrect: boolean; correctAnswers: number; totalQuestions: number }]\r\n  next: []\r\n  complete: []\r\n}>()\r\n\r\n// State\r\nconst userAnswers = ref<any[]>([])\r\nconst userNotes = ref('')\r\nconst showAnswers = ref(false)\r\nconst showTranscript = ref(false)\r\nconst audioLoaded = ref(false)\r\nconst isPlaying = ref(false)\r\nconst currentTime = ref(0)\r\nconst duration = ref(0)\r\nconst progress = ref(0)\r\nconst playsRemaining = ref(3)\r\nconst audio = ref<HTMLAudioElement | null>(null)\r\nconst progressBar = ref<HTMLElement | null>(null)\r\nconst youtubePlayerReady = ref(false)\r\n\r\n// Computed\r\nconst hasAllAnswers = computed(() => {\r\n  if (!props.question?.questions) return false\r\n  return userAnswers.value.length === props.question.questions.length &&\r\n         userAnswers.value.every(answer => answer !== null && answer !== undefined && answer !== '')\r\n})\r\n\r\nconst correctAnswers = computed(() => {\r\n  if (!props.question?.questions) return 0\r\n  return props.question.questions.filter((q, index) => {\r\n    return isAnswerCorrect(index)\r\n  }).length\r\n})\r\n\r\nconst incorrectAnswers = computed(() => {\r\n  return props.question.questions.length - correctAnswers.value\r\n})\r\n\r\nconst accuracy = computed(() => {\r\n  return props.question.questions.length > 0 \r\n    ? Math.round((correctAnswers.value / props.question.questions.length) * 100)\r\n    : 0\r\n})\r\n\r\nconst playbackSpeed = computed(() => {\r\n  // Priority: \r\n  // 1. Explicit playbackSpeed from question\r\n  // 2. Question's individual difficulty setting\r\n  // 3. Global difficulty setting\r\n  // 4. Default speed\r\n  \r\n  // DEBUG: Log the values\r\n  console.log('DEBUG - Question difficulty:', props.question.difficulty)\r\n  console.log('DEBUG - Global difficulty:', props.difficulty)\r\n  console.log('DEBUG - Explicit playbackSpeed:', props.question.playbackSpeed)\r\n  \r\n  if (props.question.playbackSpeed) {\r\n    console.log('DEBUG - Using explicit playbackSpeed:', props.question.playbackSpeed)\r\n    return props.question.playbackSpeed\r\n  }\r\n  \r\n  // Use question's individual difficulty first, then global difficulty\r\n  const difficulty = props.question.difficulty || props.difficulty\r\n  console.log('DEBUG - Final difficulty used:', difficulty)\r\n  \r\n  // Map difficulty to playback speed\r\n  let speed\r\n  switch (difficulty) {\r\n    case 'easy':\r\n      speed = 0.75  // Slower for easier listening\r\n      break\r\n    case 'medium':\r\n      speed = 1     // Normal speed\r\n      break\r\n    case 'hard':\r\n      speed = 3.25  // Faster for challenge\r\n      break\r\n    default:\r\n      speed = 1     // Default to normal speed\r\n  }\r\n  \r\n  console.log('DEBUG - Computed playback speed:', speed)\r\n  return speed\r\n})\r\n\r\n// Methods\r\nconst isAnswerCorrect = (index: number) => {\r\n  const userAnswer = userAnswers.value[index]\r\n  const correctAnswer = props.question.questions[index].correctAnswer\r\n  const questionType = props.question.questions[index].type\r\n  \r\n  if (questionType === 'fill-blank') {\r\n    return userAnswer?.toLowerCase().trim() === correctAnswer?.toLowerCase().trim()\r\n  } else if (questionType === 'ordering') {\r\n    return JSON.stringify(userAnswer) === JSON.stringify(correctAnswer)\r\n  }\r\n  \r\n  return userAnswer === correctAnswer\r\n}\r\n\r\nconst togglePlayback = () => {\r\n  // Check plays remaining first\r\n  if (playsRemaining.value <= 0) return\r\n  \r\n  // Handle YouTube audio\r\n  if (isYouTubeAudio.value) {\r\n    if (!youtubePlayerReady.value || !youtubePlayer || !youtubePlayer.playVideo || !youtubePlayer.pauseVideo) {\r\n      console.warn('YouTube player not ready yet')\r\n      return\r\n    }\r\n    \r\n    if (isPlaying.value) {\r\n      youtubePlayer.pauseVideo()\r\n    } else {\r\n      youtubePlayer.playVideo()\r\n      if (playsRemaining.value > 0) {\r\n        playsRemaining.value--\r\n      }\r\n    }\r\n    return\r\n  }\r\n  \r\n  // Handle regular audio\r\n  if (!audio.value) return\r\n  \r\n  if (isPlaying.value) {\r\n    audio.value.pause()\r\n  } else {\r\n    audio.value.play()\r\n    if (playsRemaining.value > 0) {\r\n      playsRemaining.value--\r\n    }\r\n  }\r\n}\r\n\r\nconst restartAudio = () => {\r\n  if (isYouTubeAudio.value) {\r\n    // Restart YouTube audio\r\n    if (youtubePlayer && youtubePlayer.seekTo) {\r\n      youtubePlayer.seekTo(0)\r\n      currentTime.value = 0\r\n      progress.value = 0\r\n    }\r\n  } else {\r\n    // Restart regular audio\r\n    if (!audio.value) return\r\n    \r\n    audio.value.currentTime = 0\r\n    currentTime.value = 0\r\n    progress.value = 0\r\n  }\r\n}\r\n\r\nconst updatePlaybackSpeed = () => {\r\n  console.log('DEBUG - updatePlaybackSpeed called!')\r\n  console.log('DEBUG - Current playbackSpeed.value:', playbackSpeed.value)\r\n  console.log('DEBUG - isYouTubeAudio.value:', isYouTubeAudio.value)\r\n  console.log('DEBUG - audio.value exists:', !!audio.value)\r\n  \r\n  if (isYouTubeAudio.value) {\r\n    if (youtubePlayer && youtubePlayer.setPlaybackRate) {\r\n      console.log('DEBUG - Setting YouTube playback rate to:', playbackSpeed.value)\r\n      youtubePlayer.setPlaybackRate(parseFloat(playbackSpeed.value.toString()))\r\n    } else {\r\n      console.log('DEBUG - YouTube player not ready for setPlaybackRate')\r\n    }\r\n  } else if (audio.value) {\r\n    console.log('DEBUG - Setting audio playback rate to:', playbackSpeed.value)\r\n    console.log('DEBUG - Audio playbackRate BEFORE setting:', audio.value.playbackRate)\r\n    audio.value.playbackRate = parseFloat(playbackSpeed.value.toString())\r\n    console.log('DEBUG - Audio playbackRate AFTER setting:', audio.value.playbackRate)\r\n    \r\n    // Double-check after a short delay to see if it gets reset\r\n    setTimeout(() => {\r\n      console.log('DEBUG - Audio playbackRate after 100ms:', audio.value?.playbackRate)\r\n      // Force re-apply if it got reset\r\n      if (audio.value && audio.value.playbackRate !== parseFloat(playbackSpeed.value.toString())) {\r\n        console.log('DEBUG - Playback rate was reset! Force re-applying...')\r\n        audio.value.playbackRate = parseFloat(playbackSpeed.value.toString())\r\n        console.log('DEBUG - Force-applied playbackRate:', audio.value.playbackRate)\r\n      }\r\n    }, 100)\r\n  } else {\r\n    console.log('DEBUG - No audio element available to set playback rate')\r\n  }\r\n}\r\n\r\nconst seekAudio = (event: MouseEvent) => {\r\n  if (!progressBar.value) return\r\n  \r\n  const rect = progressBar.value.getBoundingClientRect()\r\n  const clickX = event.clientX - rect.left\r\n  const newTime = (clickX / rect.width) * duration.value\r\n  \r\n  if (isYouTubeAudio.value) {\r\n    if (youtubePlayer && youtubePlayer.seekTo) {\r\n      youtubePlayer.seekTo(newTime, true)\r\n      currentTime.value = newTime\r\n    }\r\n  } else if (audio.value) {\r\n    audio.value.currentTime = newTime\r\n    currentTime.value = newTime\r\n  }\r\n}\r\n\r\nconst updateProgress = () => {\r\n  if (audio.value) {\r\n    currentTime.value = audio.value.currentTime\r\n    progress.value = duration.value > 0 ? (currentTime.value / duration.value) * 100 : 0\r\n  }\r\n}\r\n\r\nconst checkAnswers = () => {\r\n  if (!hasAllAnswers.value) return\r\n  \r\n  showAnswers.value = true\r\n  const isCorrect = correctAnswers.value === props.question.questions.length\r\n  \r\n  emit('answer', {\r\n    isCorrect,\r\n    correctAnswers: correctAnswers.value,\r\n    totalQuestions: props.question.questions.length\r\n  })\r\n}\r\n\r\nconst nextQuestion = () => {\r\n  if (props.questionIndex === props.totalQuestions - 1) {\r\n    emit('complete')\r\n  } else {\r\n    resetExercise()\r\n    emit('next')\r\n  }\r\n}\r\n\r\nconst resetExercise = () => {\r\n  userAnswers.value = []\r\n  userNotes.value = ''\r\n  showAnswers.value = false\r\n  showTranscript.value = false\r\n  playsRemaining.value = props.question.maxPlays || 3\r\n  restartAudio()\r\n}\r\n\r\nconst formatTime = (seconds: number) => {\r\n  const mins = Math.floor(seconds / 60)\r\n  const secs = Math.floor(seconds % 60)\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`\r\n}\r\n\r\n// YouTube audio player creation using iframe with Player API\r\nconst createYouTubeAudioPlayer = (videoId: string) => {\r\n  isYouTubeAudio.value = true\r\n  \r\n  // Create container for YouTube player\r\n  const playerContainer = document.createElement('div')\r\n  playerContainer.id = `youtube-player-${Date.now()}`\r\n  playerContainer.style.position = 'absolute'\r\n  playerContainer.style.left = '-9999px'\r\n  playerContainer.style.top = '-9999px'\r\n  playerContainer.style.width = '1px'\r\n  playerContainer.style.height = '1px'\r\n  document.body.appendChild(playerContainer)\r\n  \r\n  // Load YouTube Player API if not already loaded\r\n  if (!window.YT) {\r\n    const script = document.createElement('script')\r\n    script.src = 'https://www.youtube.com/iframe_api'\r\n    document.head.appendChild(script)\r\n    \r\n    // Wait for API to load\r\n    window.onYouTubeIframeAPIReady = () => {\r\n      initYouTubePlayer(videoId, playerContainer.id)\r\n    }\r\n  } else {\r\n    initYouTubePlayer(videoId, playerContainer.id)\r\n  }\r\n}\r\n\r\n// Initialize YouTube Player\r\nconst initYouTubePlayer = (videoId: string, containerId: string) => {\r\n  youtubePlayer = new window.YT.Player(containerId, {\r\n    height: '1',\r\n    width: '1',\r\n    videoId: videoId,\r\n    playerVars: {\r\n      autoplay: 0,\r\n      controls: 0,\r\n      disablekb: 1,\r\n      fs: 0,\r\n      iv_load_policy: 3,\r\n      modestbranding: 1,\r\n      rel: 0,\r\n      showinfo: 0\r\n    },\r\n    events: {\r\n      onReady: (event: any) => {\r\n        audioLoaded.value = true\r\n        youtubePlayerReady.value = true\r\n        duration.value = event.target.getDuration() || 0\r\n        // Apply playback speed after YouTube player is ready\r\n        updatePlaybackSpeed()\r\n      },\r\n      onStateChange: (event: any) => {\r\n        const state = event.data\r\n        if (state === window.YT.PlayerState.PLAYING) {\r\n          isPlaying.value = true\r\n        } else if (state === window.YT.PlayerState.PAUSED || state === window.YT.PlayerState.ENDED) {\r\n          isPlaying.value = false\r\n          if (state === window.YT.PlayerState.ENDED) {\r\n            currentTime.value = 0\r\n            progress.value = 0\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n  \r\n  // Start progress tracking for YouTube\r\n  const updateYouTubeProgress = () => {\r\n    if (youtubePlayer && youtubePlayer.getCurrentTime && isPlaying.value) {\r\n      const current = youtubePlayer.getCurrentTime()\r\n      currentTime.value = current\r\n      if (duration.value > 0) {\r\n        progress.value = (current / duration.value) * 100\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Update progress every second for YouTube\r\n  setInterval(updateYouTubeProgress, 1000)\r\n}\r\n\r\nconst initializeAudio = () => {\r\n  // Handle YouTube URLs by converting them to playable audio format\r\n  let audioUrl = props.question.audioUrl\r\n  \r\n  // Check if it's a YouTube format (youtube:videoId)\r\n  if (audioUrl.startsWith('youtube:')) {\r\n    const videoId = audioUrl.replace('youtube:', '')\r\n    createYouTubeAudioPlayer(videoId)\r\n    return\r\n  }\r\n  \r\n  // Check if it's a full YouTube URL\r\n  if (audioUrl.includes('youtube.com/watch') || audioUrl.includes('youtu.be/')) {\r\n    let videoId = ''\r\n    if (audioUrl.includes('youtube.com/watch')) {\r\n      const urlParams = new URLSearchParams(audioUrl.split('?')[1])\r\n      videoId = urlParams.get('v') || ''\r\n    } else if (audioUrl.includes('youtu.be/')) {\r\n      videoId = audioUrl.split('youtu.be/')[1].split('?')[0]\r\n    }\r\n    \r\n    if (videoId) {\r\n      createYouTubeAudioPlayer(videoId)\r\n      return\r\n    }\r\n  }\r\n  \r\n  // Handle regular audio URLs\r\n  audio.value = new Audio(audioUrl)\r\n  \r\n  audio.value.addEventListener('loadedmetadata', () => {\r\n    duration.value = audio.value!.duration\r\n    audioLoaded.value = true\r\n    // Apply playback speed after audio is loaded\r\n    updatePlaybackSpeed()\r\n  })\r\n  \r\n  audio.value.addEventListener('timeupdate', updateProgress)\r\n  \r\n  audio.value.addEventListener('play', () => {\r\n    isPlaying.value = true\r\n    // Apply playback speed every time audio starts playing\r\n    updatePlaybackSpeed()\r\n  })\r\n  \r\n  audio.value.addEventListener('pause', () => {\r\n    isPlaying.value = false\r\n  })\r\n  \r\n  audio.value.addEventListener('ended', () => {\r\n    isPlaying.value = false\r\n    currentTime.value = 0\r\n    progress.value = 0\r\n  })\r\n}\r\n\r\n// Watch for playback speed changes based on difficulty\r\nwatch(playbackSpeed, (newSpeed) => {\r\n  // Update the audio speed when difficulty changes\r\n  updatePlaybackSpeed()\r\n}, { immediate: false })\r\n\r\n// Watch for question changes to reinitialize audio with new audioUrl\r\nwatch(() => props.question, (newQuestion, oldQuestion) => {\r\n  if (newQuestion && oldQuestion && newQuestion.audioUrl !== oldQuestion.audioUrl) {\r\n    // Clean up old audio\r\n    if (audio.value) {\r\n      audio.value.pause()\r\n      audio.value = null\r\n    }\r\n    if (youtubePlayer) {\r\n      youtubePlayer.destroy()\r\n      youtubePlayer = null\r\n    }\r\n    \r\n    // Reset state\r\n    audioLoaded.value = false\r\n    isPlaying.value = false\r\n    currentTime.value = 0\r\n    duration.value = 0\r\n    progress.value = 0\r\n    playsRemaining.value = newQuestion.maxPlays || 3\r\n    isYouTubeAudio.value = false\r\n    youtubePlayerReady.value = false\r\n    \r\n    // Initialize new audio\r\n    initializeAudio()\r\n  }\r\n}, { deep: true })\r\n\r\n// Initialize\r\nonMounted(() => {\r\n  userAnswers.value = new Array(props.question.questions?.length || 0).fill(null)\r\n  playsRemaining.value = props.question.maxPlays || 3\r\n  initializeAudio()\r\n})\r\n\r\nonUnmounted(() => {\r\n  if (audio.value) {\r\n    audio.value.pause()\r\n    audio.value = null\r\n  }\r\n})\r\n</script>\r\n"],"names":["_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","question","_Fragment","_normalizeClass","_vModelRadio","_vModelText","_createVNode","_unref","draggable","_withCtx","questionIndex","totalQuestions"],"mappings":"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"}